<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Notes | Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-11T15:16:50+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UTICODE编码记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/11/uticodebian-ma-ji-lu/"/>
    <updated>2012-06-11T11:29:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/11/uticodebian-ma-ji-lu</id>
    <content type="html"><![CDATA[<p>今天查看师兄以前写的笔记，中间看到一个UNICODE和UTF-8编码的内容，于是在网上找了下资料，现在对这点有一点点了解，主要参考了<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">阮老师的这篇文章</a>，先记录下笔记吧。</p>

<h2>UNICODE编码由来</h2>

<p>在20世纪60年代，美国指定了ASCII编码体系，将英语字符与二进制位的关系做了统一的规定，这就是ASCII编码，并且一直沿用到今天。ASCII一共规定了128个字符的编码，只占用了一个字节的后7位，最高位始终为0。</p>

<p>但是不同的国家的字符符号不一样，为了适应这种情况，就出现了UNICODE。<br/>
UNICODE目前可以容纳100多万个符号，每个符号的编码都不一样。</p>

<!--more-->


<h2>UNICODE的问题</h2>

<p>UNCIDOE仅仅是一个符号集，它仅仅规定了符号的二进制代码，并没有规定符号如何存储。这就造成了下面两种结果：</p>

<ul>
<li>出现了UNICODE的多种存储方式；</li>
<li>UNICODE在很长时间无法推广，直到互联网出现。</li>
</ul>


<h2>UTF-8</h2>

<p>目前UTF-8（UCS Transformation Format-8-bit）是互联网使用最广的一种编码，在<a href="http://en.wikipedia.org/wiki/UTF-8" title="WIKI UTF-8">WIKI</a>上其说明UTF-8是为了向后兼容ASCII码，同时也是为了避免在UTF-16和UTF-32中出现的复杂的大端序、小端序和字节符号序列，具统计目前有超过一半的Web网页使用的是UTF-8编码格式。IETF工作组也要求所有的网络协议表明字符集所使用的编码并且要求必须支持UTF-8。</p>

<p>最开始UTF-8的设计图可以在下表中清晰的反应出来：</p>

<table>
<thead>
<tr>
<th></th>
<th align="right">Bits</th>
<th align="left">Last Code Point</th>
<th align="center">Byte 1</th>
<th align="center">Byte 2</th>
<th align="center">Byte 3</th>
<th align="center">Byte 4</th>
<th align="center">Byte 5</th>
<th align="center">Byte 6</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="right">7   </td>
<td align="left">U+007F     </td>
<td align="center">0xxxxxxx</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">11  </td>
<td align="left">U+07FF     </td>
<td align="center">110xxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">16  </td>
<td align="left">U+FFFF     </td>
<td align="center">1110xxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">21  </td>
<td align="left">U+1FFFFF   </td>
<td align="center">11110xxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">25  </td>
<td align="left">U+3FFFFFF  </td>
<td align="center">111110xx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">31  </td>
<td align="left">U+7FFFFFFF </td>
<td align="center">1111110x</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx|</td>
</tr>
</tbody>
</table>


<p>最开始UTF-8的设计如上图所示，但是在<a href="http://tools.ietf.org/html/rfc3629" title="rfc3629">RFC 3629</a>中UTF-8被截短了，目前UTF-8的最大值为U+10FFFF，因此所有的5字节和6字节的编码都被取消掉了。</p>

<p>UTF-8的编码即是将UNICODE对应的编码值以上表的方式编码出来即可。因此所有的ASCII码都是以一个字节的方式编码，其他的字符集会根据对应的UNICODE的编码值进行编码。比如<code>美</code>对应的UNICODE的值为7F8E，在上表中可以查看出其使用3字节编码即可，7F8E的二进制表示为0111 1111 1000 1110因此其UTF-8的编码为E7 BE 8E。就是将UNICODE的二进制值填充到UTF-8中的x上，完成编码。 <br/>
注意，UTF-8仅仅是UNICODE的一种编码方式。</p>

<h2>UTF-8的bomb字符</h2>

<p>在编辑器打开一个文本文件时，其是怎么判断打开文件的编码格式？下面是个人的理解，编辑器应该会对打开的文件进行编码猜测，但是如果文件没有提供对应的编码标志的话，其就会按照自己的猜测文件编码格式将文本文件打开。如果编辑器猜测的编码与文件的实际编码不一致，就会出现乱码现象。但是如果文本文件提供了自身的编码方式，并且编辑器也可以理解即解释这种编码方式的话，应该就可以将文本文件按照正确的形式显现出来。</p>

<p>上面的那段主要是为了引出UTF-8的bomb字符。参考<a href="http://www.i-alive.com/post/8/">这篇博客</a>，可以知道UTF-8的bomb为字符：EF BB BF。按照文中的方式，在VIM中使用16进制的方式<kbd>:%!xxd</kbd>，将文本文件打开，可以看出对应文字的UTF-8编码，在自己的环境下，使用的是UTF-8的编码格式，VIM似乎就已经将该bomb值去掉了。但是通过设置<kbd>:set bomb</kbd>可以将bomb保留，通过<kbd>:set nobomb</kbd>可以将文件的bomb去除。</p>

<p>在这种情形下想到以前从Linux系统向Windows系统下拷贝文本文件时，有时候会出现乱码现象，猜想会不会是由于VIM将文件的bomb去除了，而Windows使用的编码默认不是UTF-8编码，其编辑器猜测编码的格式猜测错了，导致乱码，于是在Linux系统下拷贝了两个简单的带有汉字的文件到Windows系统下，这两个文件分别使用<kbd>:set bomb</kbd>和<kbd>:set nobomb</kbd>的方式将UTF-8的编码信息保留和去除。</p>

<p>在Windows下使用记事本打开这两个文件时，汉字都可以正常的显示，但是由于Linux和Windows的换行方式不一致，会出现一些黑的方框；在写字板中打开文件时，带有bomb编码信息的文本文件可以正常的显示汉字，但是去除了bomb信息的文本文件出现了乱码。</p>

<p>上面的现象应该可以说明Windows下面的记事本猜测编码格式正确，但是写字板猜测错误，可写字板对Linux下的换行符可以正常的显示。如果为了在Windows下正确的打开Linux下带有中文字符的文本文件，同时换行符也正常显示的话，可以在保存文件之前输入<kbd>:set bomb</kbd>将文本文件的编码格式保存下。</p>

<h3>附录</h3>

<p>VIM中使用16进制的方式打开文件 <kbd>:%!xxd</kbd>   <br/>
VIM中在打开16进制的方式中编辑完文件之后保存 <kbd>:%!xxd -r</kbd>  <br/>
VIM保存UTF-8文件的bomb信息 <kbd>:set bomb</kbd>   <br/>
VIM中去除文件的bomb信息 <kbd>:set nobomb</kbd>    <br/>
UTF－8：一个汉字＝3个字节</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS实现之保护模式]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/10/osshi-xian-zhi-bao-hu-mo-shi/"/>
    <updated>2012-06-10T20:57:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/10/osshi-xian-zhi-bao-hu-mo-shi</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nasm摘要]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/10/nasmzhai-yao/"/>
    <updated>2012-06-10T15:22:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/10/nasmzhai-yao</id>
    <content type="html"><![CDATA[<p>还是为了看<a href="http://book.douban.com/subject/3735649/" title="一个操作系统的实现">这本书</a>，又找了下nasm的学习资料，在网上找到了这个<a href="http://www.nasm.us/doc/nasmdoc0.html" title="nasm手册">网址</a>，应该是nasm的官方参考手册，重点打算看下前面三章，做下笔记。</p>

<h2>介绍</h2>

<h3>什么是NASM</h3>

<p>NASM是一种面向80x86和x86-64的新型汇编语言，其出现主要是为了可移植性和可修改性。</p>

<!--more-->


<h2>运行NASM</h2>

<h3>NASM语法</h3>

<p><kbd>nasm -f <format> <filename> [-o <output>]</kbd></p>

<h4><kbd>-o</kbd>选项：指定输出文件名</h4>

<p>NASM会根据文件的名字自动来生成输出文件名，对于WIN32和Unix系列输出的文件名的方式不一样，但是都是会将后缀去掉，NASM不关心后缀究竟是什么，只是按照不同的平台输出对应的后缀名。<br/>
如果指定了<kbd>-o</kbd>选项，将会按照<kbd>-o</kbd>的选项的文件名产生文件，如果<kbd>-o</kbd>指定的文件已经存在则会将已存在的文件覆盖除非指定的输出的文件名为汇编源文件，在这种情况下将会输出警告，同时NASM将会生成一个名为<kbd>nasm.out</kbd>的文件。在<kbd>-o</kbd>选项和输出的文件名之间可以有空格也可以没有。</p>

<h4><kbd>-f</kbd>选项指定输出文件的格式</h4>

<p><kbd>-f</kbd>选项指定输出文件的格式，如果没有指定的话，NASM将会按照其默认格式输出，一般输出的是bin格式。在<code>-f</code>和输出格式之间的空格是可选的，比如<kbd>-f elf</kbd>和<kbd>-felf</kbd>都是合法的。</p>

<h4><kbd>-l</kbd>选项生成文件清单</h4>

<p>如果指定-l选项，将会生成一个汇编生成的文件。在该文件，左侧是地址和产生的代码，右侧是实际的汇编代码。</p>

<h4><kbd>-M</kbd>选项生成Makefile的依赖关系</h4>

<p>如果使用该选项，将会在标准输出上生成Makefile的依赖关系。</p>

<h4><kbd>-MG</kbd>选项生成Makefile的依赖关系</h4>

<p>该选项和上面的选项的区别在与如果存在一个不存在的文件的依赖关系，它将会假定产生了该文件，同时将未加文件前缀的名字输出到标准输出上。</p>

<h4><kbd>-MF</kbd>选项将Makefile的依赖关系输出到文件</h4>

<p>这个选项一般和-M或者-MG同时使用，将依赖关系生成一个文件。<br/>
nams -M -MF myfle.dep myfile.asm</p>

<h4><kbd>-MD</kbd>选项汇编并且生成依赖关系</h4>

<p>-MD选项可以作为-M和-MF的联合体。但是与-M或者-MG不同的是，-MD选项不会禁止汇编器的正常操作。比如：<br/>
nasm -f elf -o myfile.o -MD myfile.dep myfile.asm</p>

<h4><kbd>-MT</kbd>选项：目的文件文件名</h4>

<p>功能与-o一样。</p>

<h4><kbd>-MQ</kbd>选项：指定目的文件文件名</h4>

<p>功能与-MT类似，只是其指定了被引用的字符具有特殊含义。</p>

<h4><kbd>-MP</kbd>选项：省略中间输出</h4>

<p>使用该选项将会省略中间的输出。</p>

<h4><kbd>-F</kbd>选项：选择Debug的格式</h4>

<h4><kbd>-g</kbd>选项：允许调试信息</h4>

<h4><kbd>-x</kbd>选项：选择生成错误报告的格式</h4>

<h4><kbd>-z</kbd>选项：将错误信息输出到文件</h4>

<h4><kbd>-s</kbd>选项：将错误信息输出到标准输出</h4>

<h4><kbd>-i</kbd>选项：在搜索目录中添加搜索路径</h4>

<h3>MASM用户指南</h3>

<p>下文主要介绍NASM与MASM的区别</p>

<h4>NASM区分大小写</h4>

<p>一个最简单的区别就是NASM是区分大小写的。</p>

<h4>NASM对内存的使用需要使用方括号</h4>

<p>与MASM相比较来说，NASM的目的是对所有语句，尽可能的将一条语句与对应的机器码对应起来。对内存地址的引用都需要使用中括号。相对于MASM中的间接寻址等方式，NASM中的所有和内存相关的操作均需要添加中括号。因此在NASM中也就没有<code>offset</code>这样的关键字，比如在MASM中的<code>mov ax, table[bx]</code>在NASM中是非法的，必须转为<code>mov ax, [table+bx]</code>。</p>

<h4>NASM不支持存储变量类型</h4>

<p>在MASM中，对变量的说明的同时还指定了变量的类型，但是NASM中仅仅记录了变量的开始位置，不会记录任何有关变量类型的说明。因此在对变量赋值操作时，需要指定赋值的大小，因此NASM不支持例如<code>LODS, MOVS, STOS, SCAS, CMPS, INS, OUTS</code>等指令，而仅仅支持<code>LODSB, MOVSW, SCASD</code>，这几种支持的操作都明确指定了操作数的大小。</p>

<h4>NASM不使用<kbd>ASSUME</kbd></h4>

<p>作为NASM的一个简化动机，NASM不支持使用<kbd>ASSUME</kbd>，NASM不会跟踪在段寄存器中存放的是什么值，并且不会自动生成段前缀。</p>

<h4>NASM不支持内存模型</h4>

<p>NASM不支持16比特的内存模型，程序员自己负责<code>jmp</code>等指令是否为近转移或是远转移。同时对于<code>RET</code>指令，也是程序员自己负责。NASM将<code>RET</code>作为<code>RETN</code>的一个可选模式。</p>

<h4>浮点数的区别</h4>

<p>NASM使用不同的名字来命名浮点数，在MASM中，对于浮点数将会命名为类似于<code>ST(0)</code>或<code>ST(1)</code>等类似的方式，可在NASM中，将会命名为<code>st0</code>，<code>st1</code>等方式。</p>

<h4>其他区别</h4>

<p>由于历史的原因，NASM使用关键字<kbd>TWORD</kbd>而MASM使用的是<kbd>TBYTE</kbd>。<br/>
除了上述区别之外，宏和指令性的工作在MASM和NASM中也是不同的。</p>

<h2>NASM语言</h2>

<h3>NASM语言的布局</h3>

<p>{% codeblock NASM语言的布局 lang:nasm %}
label:  instruction     operands        ;comment
{% endcodeblock %}
NASM语句中空格是可以任意多的。NASM使用\来作为一行的换行符指示后面还是当前行的继续。</p>

<h3>伪指令</h3>

<p>NASM中支持的伪指令包括<kbd>DB,DW,DD,DQ,DT,DO</kbd>和<kbd>DY；RESB，RESW，RESD，RESQ，REST，RESO和RESY</kbd>；以及<kbd>INCBIN，EQU，TIMES</kbd></p>

<h4>DB及同类：声明已初始化数据</h4>

<h4>RESB及同类：声明未初始化数据</h4>

<h4>INCBIN：包含而外的二进制文件</h4>

<h4>EQU：定义常量</h4>

<h4>TIMES：重复指令或数据</h4>

<h3>有效的地址</h3>

<p>语法非常简单，就是在有效地址的变量加上中括号即可。</p>

<h3>常量</h3>

<p>NASM包括四种类型的常量，分别是数字、字符、字符串和浮点数</p>

<h3>表达式</h3>

<p>在NASM中的表达式与C语言中的类似。表达式被当做64位整型数计算然后再被调整到合适的尺寸。NASM在表达式中支持两个特殊的符号，用来计算当前汇编语言的位置，分别是<kbd>$</kbd>和<kbd>$$</kbd>操作符。<br/>
<kbd>$</kbd>操作符用来计算包含该符号的表达式在汇编语言中的起始位置；<kbd>$$</kbd>用来计算当前区域的其实位置。所以可以通过使用<kbd>$-$$</kbd>来计算当前位置与段起始处的距离。</p>

<h4><kbd>|</kbd>按位或</h4>

<h4><kbd><sup></kbd>按位异或</sup></h4>

<h4><kbd>&amp;</kbd>按位与</h4>

<h4><kbd>>></kbd>和<kbd>&lt;&lt;</kbd>移位操作符</h4>

<h4><kbd>+</kbd> <kbd>-</kbd>：加减操作符</h4>

<h4><kbd>*</kbd>,<kbd>/</kbd>,<kbd>//</kbd>,<kbd>%</kbd>, <kbd>%%</kbd>：乘法和除法表达式</h4>

<h4>一元操作符：<kbd>+</kbd>,<kbd>-</kbd>,<kbd>~</kbd>,<kbd>!</kbd>,<kbd>SEG</kbd></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM用户手册27笔记]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/vim_help_read/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/vim_help_read</id>
    <content type="html"><![CDATA[<p>VIM的查找命令与模式，这章节和正则表达式相关，可以重点查阅下。</p>

<h2>大小写忽略</h2>

<p>ignorecase  忽视大小写<br/>
smartcase   若只有小写，可匹配大小写；若含有大写，则严格匹配  <br/>
特定模式中的大小写可以使用\C来严格匹配，\c可以用来通用匹配，不区分大小写</p>

<h2>无折返查找</h2>

<p><code>:set nowrapscan</code>简单的说就是在查找到文件结束处后不再返回文件开始处重新查找。</p>

<!--more-->


<h2>查找偏移</h2>

<p><code>/pattern/2</code>，这个查找将会在单词pattern的后两行。</p>

<ul>
<li>匹配一个可选项，使用<code>\=</code>，比如

<blockquote><p>/folders\=</p></blockquote></li>
</ul>


<p>匹配的是"folder"和"folders"</p>

<ul>
<li>指定重复次数时，使用<code>\{n,m}</code>这样的形式。匹配n到m次，包括n和m，相当于一个闭区间。</li>
<li>匹配尽可能少的字符使用'{-n,m}`。与上面的作用类似，区别在于尽可能少的匹配。</li>
</ul>


<h2>多选一</h2>

<p>或的运算符是<code>\|</code>。</p>

<h2>字符范围</h2>

<table>
<thead>
<tr>
<th></th>
<th align="left">项    </th>
<th align="left">匹配         </th>
<th align="center">相当于 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">\d </td>
<td align="left">数位         </td>
<td align="center">[0-9]</td>
</tr>
<tr>
<td></td>
<td align="left">\D </td>
<td align="left">非数位          </td>
<td align="center">[<code>^</code>0-9]</td>
</tr>
<tr>
<td></td>
<td align="left">\x </td>
<td align="left">十六进制数位 </td>
<td align="center">[0-9a-fA-F]</td>
</tr>
<tr>
<td></td>
<td align="left">\X </td>
<td align="left">非十六进制数位  </td>
<td align="center">[<code>^</code>0-9a-fA-F]</td>
</tr>
<tr>
<td></td>
<td align="left">\s </td>
<td align="left">空白字符       </td>
<td align="center">[  ]     (<code>&lt;Tab&gt;</code> 和 <code>&lt;Space&gt;</code>)</td>
</tr>
<tr>
<td></td>
<td align="left">\S </td>
<td align="left">非空白字符        </td>
<td align="center">[<code>^</code>  ]     (非 <code>&lt;Tab&gt;</code> 和 <code>&lt;Space&gt;</code>)</td>
</tr>
<tr>
<td></td>
<td align="left">\l </td>
<td align="left">小写字母       </td>
<td align="center">[a-z]</td>
</tr>
<tr>
<td></td>
<td align="left">\L </td>
<td align="left">非小写字母        </td>
<td align="center">[<code>^</code>a-z]</td>
</tr>
<tr>
<td></td>
<td align="left">\u </td>
<td align="left">大写字母       </td>
<td align="center">[A-Z]</td>
</tr>
<tr>
<td></td>
<td align="left">\U </td>
<td align="left">非大写字母        </td>
<td align="center">[<code>^</code>A-Z]</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汇编语言学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/assemble_language_learn/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/assemble_language_learn</id>
    <content type="html"><![CDATA[<p>本书主要记录的在学习王爽编著的<a href="http://book.douban.com/subject/3037562/" title="汇编语言">《汇编语言》</a>中的一些记录。</p>

<h2>第二章 寄存器（CPU原理）</h2>

<p>8086中内存地址的访问是由基地址加上偏移地址组成的物理地址，而这个基地址主要是由段寄存器提供的，在8086中有4个段寄存器，分别是CS，DS，SS和ES。<br/>
<kbd>CS</kbd>为代码段寄存器，<kbd>IP</kbd>为指令指针寄存器，在8086机中，任意时刻，CPU将CS：IP指向的内容当做指令执行。<br/>
8086CPU的工作过程如下所示：</p>

<ol>
<li>从CS：IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</li>
<li>IP=IP+所读取的指令长度，从而指向下一条指令；</li>
<li>执行指令，转到步骤1，重复这个过程。</li>
</ol>


<!--more-->


<p>在8086CPU加电启动或复位后，<kbd>CS</kbd>和<kbd>IP</kbd>被设置为<code>CS=F000H，IP=FFFFH</code>。<br/>
CPU只认定由<code>CS：IP</code>指向内存单元中的内容为指令。</p>

<h2>第三章 寄存器（内存访问）</h2>

<p>当CPU要读写一个内存单元时，必须指定内存单元的段地址与偏移地址。在8086CPU中，使用的是<code>DS</code>来指定段地址，当将段地址传送进入<code>DS</code>寄存器时，必须再依靠另外一个寄存器来将该数值传送进入到<code>DS</code>中，不支持直接将数据传送到<code>DS</code>寄存器中。比如想要从内存单元10000H中读取数据到<code>al</code>中，可以采用如下操作：
{% codeblock lang:nasm %}
mov bx, 1000H
mov ds, bx
mov al, [0]
{% endcodeblock %}
注意上面代码中<code>[0]</code>这个部分是不可缺少的，表示的是一个内存偏移单元而不是一个数。<br/>
8086CPU的入栈和出栈操作都是以字为单位的。在任意时刻，SS：SP指向栈顶元素，栈的段地址寄存器为<code>SS</code>，偏移地址寄存器为<code>SP</code>。</p>

<h2>第四章 第一个程序</h2>

<p>{% codeblock lang:nasm %}
assume cs:codesg
codesg segment
start:  mov ax, 0123H</p>

<pre><code>    mov bx, 0456H
    add ax, bx
    add ax, ax

    mov ax, 4c00H
    int 21H
</code></pre>

<p>codesg ends
end
{% endcodeblock %}
汇编语言中有两种类型的指令，分别为<code>伪指令</code>和<code>汇编指令</code>。<code>segment和ends</code>是一对成对使用的<code>伪指令</code>，用来定义一个段。一个有意义的汇编程序至少有一个段，这个段用来存储程序。<code>end</code>是指定程序结束的标记。<code>assume</code>用于假设某个寄存器与<code>segment ends</code>指定的名称相关联。</p>

<h2>第五章 [bx]和loop指令</h2>

<p>寄存器中的内容也可作为偏移指令，在使用<code>loop</code>时，每次执行完一次之后，寄存器<code>CX</code>的值都将会减1，因此可以将循环次数放入到<code>CX</code>寄存器中，然后再使用<code>loop</code>来实现循环操作。</p>

<h2>第六章 包含多个段的程序</h2>

<p>这章节主要介绍程序中可以有多个段，比如代码段、数据段和栈等，整个代码的架构可以使用下面的方式
{% codeblock lang:nasm %}
assume cs:code, ds:date, ss:stack
date segment</p>

<pre><code>dw 0123H, 0234H, 0123H
</code></pre>

<p>date ends
stack segment</p>

<pre><code>dw 0, 0, 0,0
</code></pre>

<p>stack ends
code segment
start:  code here</p>

<pre><code>    "
    "
    "
</code></pre>

<p>code ends
end start
{% endcodeblock %}</p>

<h2>第七章 更灵活的定位内存地址的方法</h2>

<p>这章节主要介绍的是内存寻址的方式，增加了<code>bx</code>寄存器寻址的方式内容，同时引入了<code>SI</code>和<code>DI</code>这两个寄存器的寻址方式，其中<code>SI</code>和<code>DI</code>这两个提供的方式和<code>bx</code>相似，但是这两个寄存器不能分成两个8位寄存器。<br/>
总共的寻址方式可以总结为如下几种：</p>

<ol>
<li>[idata]用一个常量表示地址用于直接定位一个内存单元；</li>
<li>[bx]用一个变量表示内存地址，用于间接定位一个内存单元；</li>
<li>[bx+idata]用一个变量和常量定义一个内存单元；</li>
<li>[bx+si]用两个变量；</li>
<li>[bx+di+idata]用两个变量和一个常量定义。</li>
</ol>


<h2>第八章 数据处理的两个基本问题</h2>

<p>这两个基本问题是：</p>

<ul>
<li>处理的数据在什么地方？</li>
<li>要处理的数据有多长？</li>
</ul>


<p>对于数据存储在什么地方这个问题，根据书上的例子，摘抄如下：</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">机器码     </th>
<th align="left">汇编指令           </th>
<th align="left">指令执行前数据的位置</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">8E1E0000   </td>
<td align="left">mov bx, [0]        </td>
<td align="left">内存，ds:0单元</td>
</tr>
<tr>
<td></td>
<td align="left">89C3       </td>
<td align="left">mov bx, ax         </td>
<td align="left">CPU内部，ax寄存器</td>
</tr>
<tr>
<td></td>
<td align="left">BB0100     </td>
<td align="left">mov bx, 1          </td>
<td align="left">CPU内部，指令缓冲器</td>
</tr>
</tbody>
</table>


<p>对于数据的长度，可以有下面三种方法：</p>

<ul>
<li>通过寄存器名指定要处理的数据的尺寸；</li>
<li>在没有寄存器名存在的情况下，用操作符<code>X ptr</code>指明内存单元的长度，其中<code>X</code>在汇编指令中可以为<code>word</code>或<code>byte</code></li>
<li>使用其他方法</li>
</ul>


<p>这章节还介绍了几个其他指令，分别为<code>div 除法指令</code>，<code>dd双字节伪指令</code>，<code>dup操作符重复指令</code>。</p>

<h2>第九章 转移指令的原理</h2>

<p>可以修改<kbd>IP</kbd>，或同时修改<kbd>CS</kbd>和<kbd>IP</kbd>的指令统称为转移指令。<br/>
操作符<kbd>offset</kbd>在汇编语言中是由编译器处理的符号，它的功能是取得编号的偏移地址。<br/>
<kbd>jmp</kbd>为无条件转义指令，可以只修改<kbd>IP</kbd>，也可以同时修改<kbd>CS和IP</kbd>。</p>

<h2>第十章 call和ret指令</h2>

<p><kbd>call</kbd>和<kbd>ret</kbd>指令都是转移指令，它们都修改<kbd>IP</kbd>，或同时修改<kbd>CS</kbd>和<kbd>IP</kbd>。</p>

<h2>第十一章 标志寄存器</h2>

<p>这章节主要介绍的是CPU进行操作之后，在标识寄存器中各标志位的含义，其主要作用如下所示：</p>

<ol>
<li>用来存储相关指令的某些执行结果；</li>
<li>用来为CPU执行相关指令提供行为依据；</li>
<li>用来控制CPU的相关工作方式。</li>
</ol>


<p>标志寄存器共有16位，其中有意义的为0、2、4、6、7、8、9、10、11这几位，其余的位均没有意义。</p>

<h2>第十二章 内中断</h2>

<p>中断分为内中断和外中断，其中产生内中断的方式主要有下面几种：</p>

<ul>
<li>除法错误，比如在<kbd>div指令</kbd>产生除法溢出，中断类型码为：0</li>
<li>单步执行，中断类型码为：1；</li>
<li>执行<kbd>int0指令</kbd>中断类型码为：4;</li>
<li>执行<kbd>int指令</kbd>中断类型码为对应的整形数。</li>
</ul>


<h2>第十三章 int指令</h2>

<p>CPU执行<kbd>int n</kbd>指令，相当于引发一个n号中断的中断过程，执行过程如下：</p>

<ul>
<li>取中断类型码n；</li>
<li>标志寄存器入栈，IF=0，TF=0；</li>
<li>CS，IP入栈；</li>
<li>IP=(n<em>4)，(CS)=(n</em>4+2)</li>
</ul>


<p>BIOS主要包含的内容：</p>

<ul>
<li>硬件系统的检测和初始化程序；</li>
<li>外部中断和内部中断例程；</li>
<li>用于对硬件设备进行I/O操作的中断例程；</li>
<li>其他和硬件系统相关的中断例程。</li>
</ul>


<h2>第十四章 端口</h2>

<p>对端口的操作使用的是<kbd>in</kbd>，<kbd>out</kbd>指令。</p>

<h2>第十五章 外中断</h2>

<p>CPU通过端口和外部设备进行联系。<br/>
一共有两类中断，<kbd>可屏蔽中断</kbd>和<kbd>不可屏蔽中断</kbd>。不可屏蔽中断用的中断号固定为2。</p>
]]></content>
  </entry>
  
</feed>
