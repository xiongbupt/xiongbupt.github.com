<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Notes | Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-14T08:32:05+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入理解计算机系统-笔记 Ch2]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji-2/"/>
    <updated>2012-06-12T03:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji-2</id>
    <content type="html"><![CDATA[<p>计算机的表示法是用有限数量的位来完成对一个数字的编码，因此当结果太大时，将会溢出（overflow），整数运算具有结合性但是浮点数的运算是不可结合的。附录中有演示了书中提到的溢出和浮点数结合的c源代码。</p>

<p>gcc编译选项指定c语言的版本：</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">c版本      </th>
<th align="center">GCC命令行选项  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">GNU89      </td>
<td align="center">无， -std=gnu89</td>
</tr>
<tr>
<td></td>
<td align="center">ANSI, ISO C90</td>
<td align="center"> -ansi, -std=c89</td>
</tr>
<tr>
<td></td>
<td align="center">ISO C99    </td>
<td align="center">-std=c99</td>
</tr>
<tr>
<td></td>
<td align="center">GNU 99     </td>
<td align="center">-std=gnu99</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>信息存储</h2>

<h2>附录</h2>

<p>c代码
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>overflow溢出代码  (overflow.c)</span> <a href='/downloads/code/c/overflow.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include	&lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include	&lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="mi">200</span> <span class="o">*</span> <span class="mi">300</span> <span class="o">*</span> <span class="mi">400</span> <span class="o">*</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mf">3.14</span> <span class="o">+</span> <span class="mf">1e20</span><span class="p">)</span> <span class="o">-</span> <span class="mf">1e20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;the b is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">b</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;the a is %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="mf">3.14</span> <span class="o">+</span> <span class="p">(</span><span class="mf">1e20</span> <span class="o">-</span> <span class="mf">1e20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;the c is %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">c</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>				<span class="cm">/* ----------  end of function main  ---------- */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
perl代码
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>perl 10进制转16进制脚本  (d2h)</span> <a href='/downloads/code/perl/d2h'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@ARGV</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">printf</span><span class="p">(</span><span class="s">&quot;%d\t = 0x%x\n&quot;</span><span class="p">,</span> <span class="nv">$ARGV</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nv">$ARGV</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>perl 16进制转10进制脚本  (h2d)</span> <a href='/downloads/code/perl/h2d'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@ARGV</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$val</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="nv">$ARGV</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>    <span class="nb">printf</span><span class="p">(</span><span class="s">&quot;0x%x\t = %d\n&quot;</span><span class="p">,</span> <span class="nv">$val</span><span class="p">,</span> <span class="nv">$val</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解计算机系统-笔记 Ch1]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji/"/>
    <updated>2012-06-12T03:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji</id>
    <content type="html"><![CDATA[<h2>计算机系统漫游</h2>

<p>信息就是<code>位</code>加<code>上下文</code>。<br/>
由gcc处理的程序包括四个步骤，这四个步骤的处理程序分别是：预处理器、编译器、汇编器、链接器，对应的四个阶段分别是：预处理阶段（将头文件、预处理指令插入到源代码中），编译阶段（将c文件生成为汇编语言文件），汇编阶段（将汇编语言翻译成为机器文件），链接阶段（将各个目标代码合并生成一个可执行程序）。</p>

<p>了解编译系统的工作流程的好处：</p>

<ul>
<li>优化程序性能；</li>
<li>理解链接时出现的错误；</li>
<li>避免安全漏洞。</li>
</ul>


<!--more-->


<p>寄存器文件是一个小的存储设备，由一些字长为1的寄存器组成，每个寄存器有唯一的名字。</p>

<p>指令集结构与微体系结构的区别：指令集结构描述的是每条机器代码指令的效果；而微体系结构描述的是处理器实际上是如何实现的。</p>

<p>操作系统通过几个基本抽象概念（进程、虚拟存储器和文件）来实现两个功能：</p>

<ul>
<li>防止硬件被失控的应用程序滥用；</li>
<li>向应用程序提供简单一致的机制来控制复杂而又大相径庭的低级硬件设备。</li>
</ul>


<p>文件是对I/O设备的抽象表示，虚拟存储器是对主存储器和磁盘I/O设备的抽象表示，进程则是对处理器、主存和I/O设备的抽象表示。</p>

<p>进程是操作系统对一个正在运行的程序的一种抽象。操作系统在多个进程间进行交错执行的机制称为上下文切换；而操作系统保持跟踪进程运行所需要的所有状态信息，这些状态信息便是上下文。</p>

<p>虚拟存储器抽象中，每个进程看到的是一致的存储器，称为虚拟地址空间。对Linux系统来说，地址空间最上面的区域是为操作系统中的代码和数据保留的。地址空间的底部存放的是用户进程的代码和数据。</p>

<p>每个进程看到的虚拟地址空间是由大量准确重复定义的区构成的，每个区有专门的功能。从地址的最下到最上分别是：程序代码和数据区，堆，共享库，栈，内核虚拟存储器。对于所有的进程来说，代码是从同一个固定的地址开始，在程序一开始运行时，程序代码和数据区的大小便是固定的，但是堆和栈的大小是可变的，内核虚拟存储器总是常驻内存中，是操作系统的一部分。</p>

<p>文件就是字节序列，它向应用程序提供了一个统一的视角来看待系统中可能含有的所有的各式各样的I/O设备。</p>

<p>系统是硬件和系统软件互相交织的集合体，它们必须共同协作以达到运行应用程序的最终目的。</p>

<p>并发（concurrency）是一个通用的概念，指一个同时具有多个活动的系统；并行（parallelism）指的是用并发使一个系统运行的更快。并发一共有三个层级：</p>

<ul>
<li>线程即并发；</li>
<li>指令集并发；</li>
<li>单指令、多数据并发。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UTICODE编码记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/11/uticodebian-ma-ji-lu/"/>
    <updated>2012-06-11T11:29:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/11/uticodebian-ma-ji-lu</id>
    <content type="html"><![CDATA[<p>今天查看师兄以前写的笔记，中间看到一个UNICODE和UTF-8编码的内容，于是在网上找了下资料，现在对这点有一点点了解，主要参考了<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">阮老师的这篇文章</a>，先记录下笔记吧。</p>

<h2>UNICODE编码由来</h2>

<p>在20世纪60年代，美国指定了ASCII编码体系，将英语字符与二进制位的关系做了统一的规定，这就是ASCII编码，并且一直沿用到今天。ASCII一共规定了128个字符的编码，只占用了一个字节的后7位，最高位始终为0。</p>

<p>但是不同的国家的字符符号不一样，为了适应这种情况，就出现了UNICODE。<br/>
UNICODE目前可以容纳100多万个符号，每个符号的编码都不一样。</p>

<!--more-->


<h2>UNICODE的问题</h2>

<p>UNCIDOE仅仅是一个符号集，它仅仅规定了符号的二进制代码，并没有规定符号如何存储。这就造成了下面两种结果：</p>

<ul>
<li>出现了UNICODE的多种存储方式；</li>
<li>UNICODE在很长时间无法推广，直到互联网出现。</li>
</ul>


<h2>UTF-8</h2>

<p>目前UTF-8（UCS Transformation Format-8-bit）是互联网使用最广的一种编码，在<a href="http://en.wikipedia.org/wiki/UTF-8" title="WIKI UTF-8">WIKI</a>上其说明UTF-8是为了向后兼容ASCII码，同时也是为了避免在UTF-16和UTF-32中出现的复杂的大端序、小端序和字节符号序列，具统计目前有超过一半的Web网页使用的是UTF-8编码格式。IETF工作组也要求所有的网络协议表明字符集所使用的编码并且要求必须支持UTF-8。</p>

<p>最开始UTF-8的设计图可以在下表中清晰的反应出来：</p>

<table>
<thead>
<tr>
<th></th>
<th align="right">Bits</th>
<th align="left">Last Code Point</th>
<th align="center">Byte 1</th>
<th align="center">Byte 2</th>
<th align="center">Byte 3</th>
<th align="center">Byte 4</th>
<th align="center">Byte 5</th>
<th align="center">Byte 6</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="right">7   </td>
<td align="left">U+007F     </td>
<td align="center">0xxxxxxx</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">11  </td>
<td align="left">U+07FF     </td>
<td align="center">110xxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">16  </td>
<td align="left">U+FFFF     </td>
<td align="center">1110xxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">21  </td>
<td align="left">U+1FFFFF   </td>
<td align="center">11110xxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">25  </td>
<td align="left">U+3FFFFFF  </td>
<td align="center">111110xx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">31  </td>
<td align="left">U+7FFFFFFF </td>
<td align="center">1111110x</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx|</td>
</tr>
</tbody>
</table>


<p>最开始UTF-8的设计如上图所示，但是在<a href="http://tools.ietf.org/html/rfc3629" title="rfc3629">RFC 3629</a>中UTF-8被截短了，目前UTF-8的最大值为U+10FFFF，因此所有的5字节和6字节的编码都被取消掉了。</p>

<p>UTF-8的编码即是将UNICODE对应的编码值以上表的方式编码出来即可。因此所有的ASCII码都是以一个字节的方式编码，其他的字符集会根据对应的UNICODE的编码值进行编码。比如<code>美</code>对应的UNICODE的值为7F8E，在上表中可以查看出其使用3字节编码即可，7F8E的二进制表示为0111 1111 1000 1110因此其UTF-8的编码为E7 BE 8E。就是将UNICODE的二进制值填充到UTF-8中的x上，完成编码。 <br/>
注意，UTF-8仅仅是UNICODE的一种编码方式。</p>

<h2>UTF-8的bomb字符</h2>

<p>在编辑器打开一个文本文件时，其是怎么判断打开文件的编码格式？下面是个人的理解，编辑器应该会对打开的文件进行编码猜测，但是如果文件没有提供对应的编码标志的话，其就会按照自己的猜测文件编码格式将文本文件打开。如果编辑器猜测的编码与文件的实际编码不一致，就会出现乱码现象。但是如果文本文件提供了自身的编码方式，并且编辑器也可以理解即解释这种编码方式的话，应该就可以将文本文件按照正确的形式显现出来。</p>

<p>上面的那段主要是为了引出UTF-8的bomb字符。参考<a href="http://www.i-alive.com/post/8/">这篇博客</a>，可以知道UTF-8的bomb为字符：EF BB BF。按照文中的方式，在VIM中使用16进制的方式<kbd>:%!xxd</kbd>，将文本文件打开，可以看出对应文字的UTF-8编码，在自己的环境下，使用的是UTF-8的编码格式，VIM似乎就已经将该bomb值去掉了。但是通过设置<kbd>:set bomb</kbd>可以将bomb保留，通过<kbd>:set nobomb</kbd>可以将文件的bomb去除。</p>

<p>在这种情形下想到以前从Linux系统向Windows系统下拷贝文本文件时，有时候会出现乱码现象，猜想会不会是由于VIM将文件的bomb去除了，而Windows使用的编码默认不是UTF-8编码，其编辑器猜测编码的格式猜测错了，导致乱码，于是在Linux系统下拷贝了两个简单的带有汉字的文件到Windows系统下，这两个文件分别使用<kbd>:set bomb</kbd>和<kbd>:set nobomb</kbd>的方式将UTF-8的编码信息保留和去除。</p>

<p>在Windows下使用记事本打开这两个文件时，汉字都可以正常的显示，但是由于Linux和Windows的换行方式不一致，会出现一些黑的方框；在写字板中打开文件时，带有bomb编码信息的文本文件可以正常的显示汉字，但是去除了bomb信息的文本文件出现了乱码。</p>

<p>上面的现象应该可以说明Windows下面的记事本猜测编码格式正确，但是写字板猜测错误，可写字板对Linux下的换行符可以正常的显示。如果为了在Windows下正确的打开Linux下带有中文字符的文本文件，同时换行符也正常显示的话，可以在保存文件之前输入<kbd>:set bomb</kbd>将文本文件的编码格式保存下。</p>

<h3>附录</h3>

<p>VIM中使用16进制的方式打开文件 <kbd>:%!xxd</kbd>   <br/>
VIM中在打开16进制的方式中编辑完文件之后保存 <kbd>:%!xxd -r</kbd>  <br/>
VIM保存UTF-8文件的bomb信息 <kbd>:set bomb</kbd>   <br/>
VIM中去除文件的bomb信息 <kbd>:set nobomb</kbd>    <br/>
UTF－8：一个汉字＝3个字节</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS实现之保护模式]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/10/osshi-xian-zhi-bao-hu-mo-shi/"/>
    <updated>2012-06-10T20:57:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/10/osshi-xian-zhi-bao-hu-mo-shi</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nasm摘要]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/10/nasmzhai-yao/"/>
    <updated>2012-06-10T15:22:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/10/nasmzhai-yao</id>
    <content type="html"><![CDATA[<p>还是为了看<a href="http://book.douban.com/subject/3735649/" title="一个操作系统的实现">这本书</a>，又找了下nasm的学习资料，在网上找到了这个<a href="http://www.nasm.us/doc/nasmdoc0.html" title="nasm手册">网址</a>，应该是nasm的官方参考手册，重点打算看下前面三章，做下笔记。</p>

<h2>介绍</h2>

<h3>什么是NASM</h3>

<p>NASM是一种面向80x86和x86-64的新型汇编语言，其出现主要是为了可移植性和可修改性。</p>

<!--more-->


<h2>运行NASM</h2>

<h3>NASM语法</h3>

<p><kbd>nasm -f <format> <filename> [-o <output>]</kbd></p>

<h4><kbd>-o</kbd>选项：指定输出文件名</h4>

<p>NASM会根据文件的名字自动来生成输出文件名，对于WIN32和Unix系列输出的文件名的方式不一样，但是都是会将后缀去掉，NASM不关心后缀究竟是什么，只是按照不同的平台输出对应的后缀名。<br/>
如果指定了<kbd>-o</kbd>选项，将会按照<kbd>-o</kbd>的选项的文件名产生文件，如果<kbd>-o</kbd>指定的文件已经存在则会将已存在的文件覆盖除非指定的输出的文件名为汇编源文件，在这种情况下将会输出警告，同时NASM将会生成一个名为<kbd>nasm.out</kbd>的文件。在<kbd>-o</kbd>选项和输出的文件名之间可以有空格也可以没有。</p>

<h4><kbd>-f</kbd>选项指定输出文件的格式</h4>

<p><kbd>-f</kbd>选项指定输出文件的格式，如果没有指定的话，NASM将会按照其默认格式输出，一般输出的是bin格式。在<code>-f</code>和输出格式之间的空格是可选的，比如<kbd>-f elf</kbd>和<kbd>-felf</kbd>都是合法的。</p>

<h4><kbd>-l</kbd>选项生成文件清单</h4>

<p>如果指定-l选项，将会生成一个汇编生成的文件。在该文件，左侧是地址和产生的代码，右侧是实际的汇编代码。</p>

<h4><kbd>-M</kbd>选项生成Makefile的依赖关系</h4>

<p>如果使用该选项，将会在标准输出上生成Makefile的依赖关系。</p>

<h4><kbd>-MG</kbd>选项生成Makefile的依赖关系</h4>

<p>该选项和上面的选项的区别在与如果存在一个不存在的文件的依赖关系，它将会假定产生了该文件，同时将未加文件前缀的名字输出到标准输出上。</p>

<h4><kbd>-MF</kbd>选项将Makefile的依赖关系输出到文件</h4>

<p>这个选项一般和-M或者-MG同时使用，将依赖关系生成一个文件。<br/>
nams -M -MF myfle.dep myfile.asm</p>

<h4><kbd>-MD</kbd>选项汇编并且生成依赖关系</h4>

<p>-MD选项可以作为-M和-MF的联合体。但是与-M或者-MG不同的是，-MD选项不会禁止汇编器的正常操作。比如：<br/>
nasm -f elf -o myfile.o -MD myfile.dep myfile.asm</p>

<h4><kbd>-MT</kbd>选项：目的文件文件名</h4>

<p>功能与-o一样。</p>

<h4><kbd>-MQ</kbd>选项：指定目的文件文件名</h4>

<p>功能与-MT类似，只是其指定了被引用的字符具有特殊含义。</p>

<h4><kbd>-MP</kbd>选项：省略中间输出</h4>

<p>使用该选项将会省略中间的输出。</p>

<h4><kbd>-F</kbd>选项：选择Debug的格式</h4>

<h4><kbd>-g</kbd>选项：允许调试信息</h4>

<h4><kbd>-x</kbd>选项：选择生成错误报告的格式</h4>

<h4><kbd>-z</kbd>选项：将错误信息输出到文件</h4>

<h4><kbd>-s</kbd>选项：将错误信息输出到标准输出</h4>

<h4><kbd>-i</kbd>选项：在搜索目录中添加搜索路径</h4>

<h3>MASM用户指南</h3>

<p>下文主要介绍NASM与MASM的区别</p>

<h4>NASM区分大小写</h4>

<p>一个最简单的区别就是NASM是区分大小写的。</p>

<h4>NASM对内存的使用需要使用方括号</h4>

<p>与MASM相比较来说，NASM的目的是对所有语句，尽可能的将一条语句与对应的机器码对应起来。对内存地址的引用都需要使用中括号。相对于MASM中的间接寻址等方式，NASM中的所有和内存相关的操作均需要添加中括号。因此在NASM中也就没有<code>offset</code>这样的关键字，比如在MASM中的<code>mov ax, table[bx]</code>在NASM中是非法的，必须转为<code>mov ax, [table+bx]</code>。</p>

<h4>NASM不支持存储变量类型</h4>

<p>在MASM中，对变量的说明的同时还指定了变量的类型，但是NASM中仅仅记录了变量的开始位置，不会记录任何有关变量类型的说明。因此在对变量赋值操作时，需要指定赋值的大小，因此NASM不支持例如<code>LODS, MOVS, STOS, SCAS, CMPS, INS, OUTS</code>等指令，而仅仅支持<code>LODSB, MOVSW, SCASD</code>，这几种支持的操作都明确指定了操作数的大小。</p>

<h4>NASM不使用<kbd>ASSUME</kbd></h4>

<p>作为NASM的一个简化动机，NASM不支持使用<kbd>ASSUME</kbd>，NASM不会跟踪在段寄存器中存放的是什么值，并且不会自动生成段前缀。</p>

<h4>NASM不支持内存模型</h4>

<p>NASM不支持16比特的内存模型，程序员自己负责<code>jmp</code>等指令是否为近转移或是远转移。同时对于<code>RET</code>指令，也是程序员自己负责。NASM将<code>RET</code>作为<code>RETN</code>的一个可选模式。</p>

<h4>浮点数的区别</h4>

<p>NASM使用不同的名字来命名浮点数，在MASM中，对于浮点数将会命名为类似于<code>ST(0)</code>或<code>ST(1)</code>等类似的方式，可在NASM中，将会命名为<code>st0</code>，<code>st1</code>等方式。</p>

<h4>其他区别</h4>

<p>由于历史的原因，NASM使用关键字<kbd>TWORD</kbd>而MASM使用的是<kbd>TBYTE</kbd>。<br/>
除了上述区别之外，宏和指令性的工作在MASM和NASM中也是不同的。</p>

<h2>NASM语言</h2>

<h3>NASM语言的布局</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>NASM语言的布局  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">label:</span>  <span class="nf">instruction</span>     <span class="nv">operands</span>        <span class="c1">;comment</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
NASM语句中空格是可以任意多的。NASM使用\来作为一行的换行符指示后面还是当前行的继续。</p>

<h3>伪指令</h3>

<p>NASM中支持的伪指令包括<kbd>DB,DW,DD,DQ,DT,DO</kbd>和<kbd>DY；RESB，RESW，RESD，RESQ，REST，RESO和RESY</kbd>；以及<kbd>INCBIN，EQU，TIMES</kbd></p>

<h4>DB及同类：声明已初始化数据</h4>

<h4>RESB及同类：声明未初始化数据</h4>

<h4>INCBIN：包含而外的二进制文件</h4>

<h4>EQU：定义常量</h4>

<h4>TIMES：重复指令或数据</h4>

<h3>有效的地址</h3>

<p>语法非常简单，就是在有效地址的变量加上中括号即可。</p>

<h3>常量</h3>

<p>NASM包括四种类型的常量，分别是数字、字符、字符串和浮点数</p>

<h3>表达式</h3>

<p>在NASM中的表达式与C语言中的类似。表达式被当做64位整型数计算然后再被调整到合适的尺寸。NASM在表达式中支持两个特殊的符号，用来计算当前汇编语言的位置，分别是<kbd>$</kbd>和<kbd>$$</kbd>操作符。<br/>
<kbd>$</kbd>操作符用来计算包含该符号的表达式在汇编语言中的起始位置；<kbd>$$</kbd>用来计算当前区域的其实位置。所以可以通过使用<kbd>$-$$</kbd>来计算当前位置与段起始处的距离。</p>

<h4><kbd>|</kbd>按位或</h4>

<h4><kbd><sup></kbd>按位异或</sup></h4>

<h4><kbd>&amp;</kbd>按位与</h4>

<h4><kbd>>></kbd>和<kbd>&lt;&lt;</kbd>移位操作符</h4>

<h4><kbd>+</kbd> <kbd>-</kbd>：加减操作符</h4>

<h4><kbd>*</kbd>,<kbd>/</kbd>,<kbd>//</kbd>,<kbd>%</kbd>, <kbd>%%</kbd>：乘法和除法表达式</h4>

<h4>一元操作符：<kbd>+</kbd>,<kbd>-</kbd>,<kbd>~</kbd>,<kbd>!</kbd>,<kbd>SEG</kbd></h4>
]]></content>
  </entry>
  
</feed>
