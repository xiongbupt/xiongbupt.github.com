<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-11T15:16:50+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress增加分类标签]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/08/octopresszeng-jia-fen-lei-biao-qian/"/>
    <updated>2012-06-08T17:17:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/08/octopresszeng-jia-fen-lei-biao-qian</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress代码高亮]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/08/octopressdai-ma-gao-liang/"/>
    <updated>2012-06-08T08:27:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/08/octopressdai-ma-gao-liang</id>
    <content type="html"><![CDATA[<p>现在博客已经基本搭建完毕，下面对从<code>jekyll bootstrap</code>搬迁到做一个基本介绍。首先是代码高亮部分，下面的文章主要来自于<a href="http://octopress.org/docs/blogging/code/" title="Octopress代码高亮">Octopress关于代码高亮部分</a>。文章主要是对上面的内容进行一个简单的翻译，以及简单介绍从<code>jekyll bootstrap</code>上面的代码移动到<code>Octopress</code>上面做一个简单的介绍。</p>

<h2>共享代码片段</h2>

<p>在博客上共享代码片段应该是简单的，并且代码应该具有简单的高亮功能。Octopress也具有这种功能，在<code>jekyll</code>上，其使用的是<code>pygment</code>来实现代码高亮的功能，Octopress实现的更好。在Octopress上面有下面几种选择：</p>

<ul>
<li>使用<a href="http://ethanschoonover.com/solarized" title="Solarized高亮">Solarized高亮</a>主题来实现（该方法未尝试，实际上不知道怎么弄，只是凭借个人的猜测）。</li>
<li>使用Gist的代码内嵌。</li>
<li>从自己的文件系统中插入代码片段，该代码具有下载链接。</li>
<li>简单的内嵌代码块带有<code>&lt;figure&gt;</code>和<code>&lt;figcaption&gt;</code>和可选的下载链接。</li>
<li>Pygments caching（似乎还是使用Pygnment来实现代码高亮）。</li>
<li>通过javascript脚本使得代码具有行号。</li>
</ul>


<!--more-->


<h3>Solarized高亮</h3>

<p>这部分内容自己没有尝试，待更新。</p>

<h3>反引号的代码块</h3>

<p>同时使用<code>backtick_codelock</code>过滤器，可以使用Github的最适用的代码高亮块。使用三个反引号开始，后面跟着一个空格，接下来是高亮语言，具体语法如下所示：</p>

<pre><code>  ``` [language] [title] [url] [link text]
  code snippet
  ```
</code></pre>

<p>按照上述方式便可以对相应的代码块进行高亮，如下面的例子。</p>

<h4>example1（原文)</h4>

<pre><code> ```
 $sudo give me a hug
 ```
</code></pre>

<p>按照上面的方式在文本中输入之后，产生的效果如下：
<code>
$sudo give me a hug
</code></p>

<h4>example2带有说明和连接</h4>

<pre><code> ``` ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
 class Fixnum
   def prime?
     ('1' * self) !~ /^1?$|^(11+?)\1+$/
   end
 end
 ```
</code></pre>

<p>产生的代码片段如下：
``` ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
class Fixnum
  def prime?</p>

<pre><code>('1' * self) !~ /^1?$|^(11+?)\1+$/
</code></pre>

<p>  end
end
```</p>

<h3>Gist代码内嵌</h3>

<p>当使用这种方式的代码高亮时，仅仅需要的是gist的id，对gist不了解的可以上google搜索下，个人的理解是，gist对每段用户上传的代码段都会有一个对应的id，当用户给出对应的代码的id后，将会从gist上面下载对应的已经高亮的html文件，最终在用户的页面上显示出来。</p>

<h4>语法</h4>

<pre><code> { % gist gist_id [filename] %}
</code></pre>

<h4>example</h4>

<pre><code> { % gist 996818 %}
</code></pre>

<p>上述代码的片段在Octopress中的markdown文件中输入之后，得到的效果如下：</p>

<p>{% gist 996818 %}</p>

<p>如果一个gist的id对应有多个文件，这时需要对想要高亮的文件添加文件名，具体语法如下所示：</p>

<pre><code>  { % gist 1059334 svg_bullets.rb %}
  { % gist 1059334 usage.scss %}
</code></pre>

<p>总体来说，gist代码高亮是很简单的，只是需要将代码上传到<a href="https://gist.github.com/">gist</a>，然后获取相应的id然后按照上面的语法进行设置即可。只是每次在写博客时，都需要对博客文章中的代码拷贝到网址上生成，在没有网时，代码高亮比较麻烦。</p>

<h3>从本地文件中引入代码</h3>

<p>这种方式在Arch上面有个小问题，在Arch上的报错如下所示：<br/>
``` bash Arch error
Building site: source -> public
  File "<string>", line 1</p>

<pre><code>import sys; print sys.executable
                    ^
</code></pre>

<p>SyntaxError: invalid syntax
<code>``
上网搜索之后在[该网址][lab4]发现解决方法。   
这种方式需要使用python2来完成代码高亮的操作，由于Arch的python指向的是python3，而python3无法完成该功能，因此需要在</code>plugin<code>文件夹中再添加一个新文件，指定在</code>Octopress<code>运行时使用的是python2，具体增加的文件内容如下所示，文件的名字为</code>ruby_python_arch_linux_fix.rb`<br/>
{% include_code Set the ruby to run python2.7 ruby/ruby_python_arch_linux_fix.rb %}</p>

<p>在完成该操作之后，仍然报错，得到如下错误：<br/>
<code>bash Error message
LoadError: Could not open library 'lib.so': lib.so: cannot open shared object file: No such file or directory
</code>
参考<a href="https://github.com/tmm1/pygments.rb/issues/10">该网址</a>的由<code>elidos</code>提出的解决方法可以知道是<code>rubypython</code>自身的bug，需要修复，具体修改文件在Arch上面为<code>/usr/lib/ruby/gems/1.9.1/gems/rubypython-0.5.3/lib/rubypython/pythonexec.rb</code>，修改位置大概在126行左右，修改后的内容如下所示：
<code>diff fix the rubypython bug
--126 %x(#{@python} -c "#{command}").chomp if @python
++126 %x("#{@python} -c #{command}").chomp if @python
</code>
完成该修改之后，便可以使用这种包含代码的方式来进行代码高亮。 <br/>
使用这种方式的语法也参见<a href="http://octopress.org/docs/blogging/code/" title="Octopress代码高亮">octopress手册</a>，此处不再进行详细说明，这种方式的代码是单独存放成一个文件保存在本地系统下，当代码长度较长，又不想放在博客的正文中时，使用该方法比较好。<br/>
简单记录下这种方式的语法如下所示：（目前不知道为什么，在octopress中输入{ %的方式都会进行代码解析，所以上面的{ %都进行了添加了<code></code>来取消，在实际文章中输入的时候，将<code></code>取消掉）</p>

<pre><code>{ % include_code [title] [lang:language] path/to/file %}
</code></pre>

<p>其中的中括号的内容是可选的，具体语言便是这种方式，当需要强制高亮时，需要指定<code>lang:</code>这个参数，很好用。</p>

<h3>使用Code Block的方式</h3>

<p>目前自己的博客这种方式用的比较多，前面写的文章目前全部修改成为了这种方式，感觉这种方式和<code>pygnment</code>的方式差不多，之前全部采用的是<code>pygnment</code>的方式，利用正则表达式把所有文章的代码高亮全部改成了使用<code>code block</code>。它的具体语法如下所示：（与<code>pygnment</code>很相似，指定语言即可）</p>

<pre><code>  { % codeblock [title] [lang:language] [url] [link text] %}
  code snippet
  { % endcodeblock %}
</code></pre>

<p>和之前描述的类似，中括号的内容是可选的。</p>

<h4>使用正则表达式替换</h4>

<p>这种方式可以替换博客内容，使得博客中所有文章的代码高亮使用<code>Code Block</code>。自己使用的是<code>sed</code>来完成的操作，似乎都没有用到正则表达式，只是简单的替换，做个简单的记录吧。</p>

<h5>替换方法</h5>

<p>进入到<code>source/_posts</code>目录下，在终端输入如下代码：
<code>bash Sed查看文章代码
sed -n 's/\(\ highlight\ \)/\1/p' *
</code>
上面将会把当前目录下的含有{\% highlight的文件的那行都显示出来，中间会将含有该特殊字符的行都打印出来，中间可以看到自己的博客内容都用到了哪些类型文件的语法高亮，将对应的代码高亮进行替换即可。<br/>
其实这种方式就是简单的搜索替换，应该算不上使用正则表达式了，只是写下来做下笔记了，防止以后再用具体操作如下所示：
<code>bash Sed替换文件内容
sed -i 's/\(\ highlight\ bash %}\)/\ codeblock\ lang:bash\ %}/' *
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加标签]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/07/octopress-add-tag/"/>
    <updated>2012-06-07T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/07/octopress-add-tag</id>
    <content type="html"><![CDATA[<h2>前因</h2>

<p>由于之前参考中文的搜索，结果都不理想，推翻重来，直接使用<a href="http://www.google.com/">google</a>使用<code>octopress tag</code>关键词搜索到的<a href="http://aijazansari.com/2012/01/07/tag-clouds-with-octopress/">第一个返回结果</a>来修改，下面记录如下。</p>

<h3>显示所有的便签列表</h3>

<p>修改<code>source/_layouts/post.html</code>文件，使它们include一个名字为<code>tags.html</code>的新文件。</p>

<!--more-->


<p>创建一个新文件<code>source/_includes/post/tags.html</code>，整个文件的内容如下所示：<br/>
{% codeblock  source/_includes/post/tags.html lang:html %}</p>

<div id="tag_list">
    Tags:
    <ul id="tags_ul">
{% for t in page.tags  %}
        <li><a href="http://xiongbupt.github.com/tags/{{t}}/">{{t}}</a></li>
{% endfor %}
    </ul>
</div>


<p>{% endcodeblock %}</p>

<p>在<code>sass/custom/_styles.css</code>文件中添加如下内容：</p>

<p>{% codeblock sass/custom/_styles.css lang:css %}
div#tag_list {</p>

<pre><code>font-size: 12pt;
</code></pre>

<p>}</p>

<h1>tags_ul {</h1>

<pre><code>display: inline;
</code></pre>

<p>}</p>

<h1>tags_ul li:last-child:after {</h1>

<p>  content: "";
}</p>

<h1>tags_ul li:after {</h1>

<p>  content: ", ";
}</p>

<h1>tags_ul li {</h1>

<pre><code>display: inline;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>创建tag文件和tag云</h3>

<p>使用作者提供的perl脚本文件，由于作者使用<code>Octopress</code>生成的文件是直接在public文件夹下面的，但是默认的<code>Octopress</code>生成的博客内容是在<code>/public/blog</code>文件夹下面的，因此作者的提供的perl文件需要进行一个小的改动，若没有改动将无法生成对应的tags，检查是否成功的办法是查看成功的生成了<code>source/_includes/custom/tag_cloud.html</code>文件，该文件的内容类似于下面的方式：</p>

<p>{% codeblock source/_includes/custom/tag_cloud.html  lang:html %}</p>

<div id='tag_cloud'>
<a href="http://xiongbupt.github.com/blog/tags/6LoWPAN/" title="1 entry" class="tag_1">6LoWPAN</a>
<a href="http://xiongbupt.github.com/blog/tags/Arch/" title="1 entry" class="tag_1">Arch</a>
<a href="http://xiongbupt.github.com/blog/tags/AWK/" title="1 entry" class="tag_1">AWK</a>
</div>


<p>{% endcodeblock %}
文章末尾附上修改后的<code>tagify.pl</code>文件。
在添加了该代码之后，整个生成tag的操作便是下面的步骤
{% codeblock 生成tags操作 lang:bash %}
rake generate
./tagify.pl
rake generate
{% endcodeblock %}
上面的代码只是需要在每次有新的tag加入的时候需要执行，如果新添加的博客文章没有使用新的tag，则不需要执行这个步骤，只需要按照正常的操作即可。<br/>
上面的操作一共干了三件事：</p>

<ul>
<li>生成<code>source/_includes/custom/tag_cloud.html</code>文件，文件内容如上所述。</li>
<li>对于每个tag标签，在对应的目录下生成一个<code>index.markdown</code>文件，如对于<code>Linux</code>这个标签，将会创建<code>source/tags/Linux/index.markdown</code>这样一个文件。</li>
<li>同时创建了一个<code>source/tags/index.markdown</code>的文件，可以在主页面被引用。</li>
</ul>


<h3>显示tag云标签</h3>

<p>为了在右侧显示云标签，需要修改<code>_config.yaml</code>文件，将<code>tag_cloud.html</code>文件添加到<code>default_asides</code>中，目前的博客内容没有显示该分类，若想添加云标签显示可以通过修改<code>_config.yml</code>通过添加该侧边栏完成该功能。<br/>
创建<code>source/_includes/asides/tag_cloud.html</code>文件，该文件包含了<code>soure/_includes/custom/tag_cloud.html</code>文件（该文件是由<code>tagify.pl</code>脚本文件生成的），文件的内容如下所示：
{% include_code source/_includes/asides/tag_cloud.html lang:html html/tag_cloud.html %}</p>

<p>接下来修改<code>sass/custom/_styles.css</code>文件，添加标签的<code>css</code>示例，该文件内容如下所示：</p>

<p>{% codeblock sass/custom/_styles.css lang:css %}
.tag_1 {</p>

<pre><code>font-weight: 200;
font-size: 10pt;
</code></pre>

<p>}
.tag_2 {</p>

<pre><code>font-weight: 200;
font-size: 12pt;
</code></pre>

<p>}
...
.tag_10 {</p>

<pre><code>font-weight: 900;
font-size: 24pt;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>最后在导航控制文件<code>source/_includes/custom/navigation.html</code>中增加<code>Tags</code>标签，具体修改文件如下所示：</p>

<p>{% codeblock source/_includes/custom/navigation.html lang:html %}
<li><a href="http://xiongbupt.github.com/">Home</a></li>
<li><a href="http://xiongbupt.github.com/blog/archives">Archives</a></li>
+<li><a href="http://xiongbupt.github.com/tags/">Tags</a></li>
<li><a href="http://xiongbupt.github.com/about/">About Me</a></li>
{% endcodeblock %}</p>

<h2>总结</h2>

<p>完成上述操作之后，便可以在主页的首部出现一个<code>Tags</code>的导航键，同时可以添加<code>Tags</code>分类标签到页面右侧的侧边栏，目前Tags标签功能似乎不支持中文页面的分类，待测试。</p>

<h3>代码附录</h3>

<p>{% include_code 修改后的tagify.pl lang:perl perl/tagify.pl %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress尝试记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/octopress_use/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/octopress_use</id>
    <content type="html"><![CDATA[<p>本文主要是参考Octopress的<a href="http://octopress.org/" title="OCTOPRESS 手册">官方网址</a>进行操作，之前使用了<a href="http://www.google.com/" title="GOOGLE">google</a>搜索了若干参考，但是操作之后出现了错误，推翻重来之后，写下这篇记录，方便自己以后使用。<br/>
首先介绍下自己的环境Arch，由于之前已经使用了github的个人博客，但是之前使用的是jekyll的方式，自己不会调整那些主题，感觉有些不方便，上网找了下，发现似乎Octopress相对来说比较简单，于是在这种情况下尝试使用Octopress。至于在github上创建个人博客主页，在这里不做说明，在Octopress环境下，自己相当不清楚。</p>

<!--more-->


<p>由于Arch已经安装了ruby，且版本是1.9.3高于octopress要求的1.9.2，使用<code>pacman</code>的方式安装了ruby之后便没有必要再安装ruby了。按照<code>arch wiki</code>中所说的方式安装rvm即可。在这些基本工作完成之后，开始安装Octopress。</p>

<h2>Octopress环境配置</h2>

<p>git clone git://github.com/imathis/octopress.git octopress<br/>
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).<br/>
gem install bundler<br/>
bundle install<br/>
rake install</p>

<h2>Github用户页面设置</h2>

<p>参照Octopress上的将页面部署到github的<a href="http://octopress.org/docs/deploying/github/" title="OCTOPRESS Github介绍">手册</a>。<br/>
Github Pages服务要求用户使用master分支作为Web服务器上的公共目录，当直接输入用户的web网址时，重定向的是master分支的目录。因此，可以创建一个source分支来工作，然后将生成的内容推送到master分支。Octopress可以通过使用下面的命令完成上面的任务：<br/>
<code>rake setup_github_pages</code><br/>
上面的操作将会完成下面的操作：</p>

<ul>
<li>请求用户输入个人的Github可读可写地址，使用ssh的目录，如git@github.com:xiongbupt/xiongbupt.github.com.git这样的地址，在输入上面的命令之后，要求输入地址时输入这样一个地址即可。</li>
<li>将本来octopress分支的远端分支有origin重命名为octopress，相当于工作目录内有两个远端分支。</li>
<li>将个人的Github Pages作为默认的远程origin分支。</li>
<li>将当前分支由master转换为source分支。</li>
<li>根据之前自身输入的地址来配置个人博客的地址。</li>
<li>在_deploy目录下创建一个master分支用于来布置。<br/>
接下来使用<br/>
rake generate<br/>
rake deploy<br/>
这两个操作将会完成下面的任务：生成网页内容，将将生成的网页内容拷贝到<code>_deploy/</code>文件夹内，将这些文件添加到git跟踪目录下，提交然后将这些文件推送到master分支。因此在完成内容编辑之后，简单使用上面的两个命令就将会本地完成的编辑内容推送到远程的服务器端。</li>
</ul>


<p><strong>不要忘记</strong>将源文件推送到自己的远程分支。使用下面的操作即可完成操作：<br/>
git add .
git commit -m '提交说明'
git push origin source</p>

<p><strong>注意：</strong>目前Github网站设置的默认分支是最新提交的分支，因此如果在网页显示有问题时，可以登录到Github网站上查看是否自己的版本库的默认分支是否为master分支，将默认分支调整为master即可在网页上显示内容。</p>

<h2>Github工程页面设置</h2>

<p>Github允许对于已存在的开源工程添加一个网页说明。Github会搜索工程目录下的gh-pages分支，然后将这些内容置于可以访问的类似于<code>http://username.github.com/project</code>。</p>

<p>可以通过下面的方式来公布自己的工程<code>gh-pages</code>。<br/>
rake setup_github_pages</p>

<p>这个操作将会：
* 请求工程目录库的网址url
* 将当前的origin本来指向的远程仓库imathis/octopress重命名为octopress
* 确定博客将被配置为一个子目录
* 在工程下新建_deploy文件夹，在该文件夹下建立gh-pages分支，准备配置该分支</p>

<p>接下来运行：  <br/>
rake generate
rake deploy
这将会生成博客内容，将生成的文件拷贝到<code>_deploy/</code>文件夹内，将它们加入到git同步库中，提交并将这些文件推送到master分支。</p>

<p>现在已经对网站的内容进行了一次提交，但是同样也应该对网站的博客的源代码进行提交。在添加了自己工程的网址作为远端仓库之后，可以进行提交，如下所示：      <br/>
git remote add origin (your repo url)
#set your new origin as the default branch
git config.branch.master.remote origin</p>

<p>在完成上述设置之后便可以使用<code>git push</code>进行推送了。</p>

<h2>自定义域名</h2>

<p>首先需要在<code>source</code>文件夹下创建一个名字为<code>CNAME</code>的文件，然后将自己的域名输入到该文件中，如下所示： <br/>
echo 'your-domain.com' >> source/CNAME</p>

<p>接下来在域名的注册处添加域名记录。具体介绍参考<a href="http://octopress.org/docs/deploying/github/" title="OCTOPRESS Github介绍">octopress</a>的介绍，此处不做详细描述。</p>

<p>sed -n 's/(category:\ )([)(\w<em>)(])/\1\3/p' </em>.md</p>
]]></content>
  </entry>
  
</feed>
