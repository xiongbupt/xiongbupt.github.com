<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-15T05:09:10+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VIM tips中文版]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/14/vim-tipszhong-wen-ban/"/>
    <updated>2012-06-14T10:34:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/14/vim-tipszhong-wen-ban</id>
    <content type="html"><![CDATA[<p>从Vim.cn Google groups上面摘抄的文章，目前似乎没有了只剩下了google快照，把文章转载到这里，给自己以后参考。</p>

<!--more-->


<pre><code>这是篇每个 Vim 用户都应该阅读的文章，原文在这里
http://www.rayninfo.co.uk/vimtips.html

这篇文章很早被翻译过，好像是一个清华的哥们翻译的。我再原来的基础上又整理
和新增了些内容--这是两年前做的，后来没有再更新。有兴趣的人可以继续更新。

__BEGIN__
------------------------------------------------------------------------------
# searching 查找
/joe/e                      : cursor set to End of match
                              把光标定位在匹配单词最后一个字母处
/joe/e+1                    : cursor set to End of match plus 1
                              把光标定位在匹配单词最后一个字母的下一个字母处
/joe/s-2                    : cursor set to Start of match minus 2
                              把光标定位在匹配单词第一个字母往前数两个字母的位置
/^joe.*fred.*bill/          : normal
                              标准的正则表达式
/^[A-J]\+/                  : search for lines beginning with one or more A-J
                              查找以一个或多个 A-J 中的字母开头的行
/begin\_.*end               : search over possible multiple lines
                              查找在 begin 和 end 两个单词之间尽可能多的行
/fred\_s*joe/i              : any whitespace including newline
                              查找在 fred 和 joe 两个单词之间任意多的空格，包括新行
/fred\|joe                  : Search for FRED OR JOE
                              查找 fred 或 joe
/\([^0-9]\|^\)%.*%          : Search for absence of a digit or beginning of line
                              查找
/.*fred\&amp;.*joe              : Search for FRED AND JOE in any ORDER!
                              查找同时包含 FRED 和 JOE 的行，不分前后顺序
/\&lt;fred\&gt;/i              : search for fred but not alfred or frederick
                              查找 fred, 而不是 alfred 或者 frederick，也就是全字匹配
/\&lt;\d\d\d\d\&gt;            : Search for exactly 4 digit numbers
                              查找4个数字的全字匹配
/\D\d\d\d\d\D               : Search for exactly 4 digit numbers
                              查找4个数字的全字匹配
/\&lt;\d\{4}\&gt;              : same thing
                              同上

# finding empty lines 查找空行
/^\n\{3}                    : find 3 empty lines
                              查找 3 行空行
# Specify what you are NOT searching for (vowels)
# 指定不要查找什么
/\c\v([^aeiou]&amp;\a){4}       : search for 4 consecutive consanants

# using rexexp memory in a search
# 在查找中使用正则表达式存储
/\(fred\).*\(joe\).*\2.*\1

# Repeating the Regexp (rather than what the Regexp finds)
# 重复正则表达式
/^\([^,]*,\)\{8}

# visual searching
# 可视模式下的查找
:vmap // y/&lt;C-R&gt;"&lt;CR&gt;       : search for visually highlighted text
                                     查找被高亮显示的文本
:vmap &lt;silent&gt; //    y/&lt;C-R&gt;=escape(@", '\\/.*$^~[]')&lt;CR&gt;&lt;CR&gt; : with spec chars

# searching over multiple lines \_ means including newline
# 查找多行。\_ 表示包括新行
/&lt;!--\_p\{-}--&gt;                : search for multiple line comments
                                     查找多行注释
/fred\_s*joe/i                    : any whitespace including newline
                                     查找在 fred 和 joe 两个单词之间任意多的空
格，包括新行
/bugs\(\_.\)*bunny                : bugs followed by bunny anywhere in file
                                     bugs 后任意位置含有 bunny 单词的多个行
:h \_                             : help
                                     帮助

# search for declaration of subroutine/function under cursor
# 查找光标下子程序/函数的声明
:nmap gx yiw/^\(sub\&lt;bar&gt;function\)\s\+&lt;C-R&gt;"&lt;CR&gt;

# multiple file search
# 在多个文件中查找
:bufdo /searchstr
:argdo /searchstr

# How to search for a URL without backslashing
# 如何不使用反斜线查找 URL
?http://www.vim.org/        : search BACKWARDS!!! clever huh!
----------------------------------------
# substitution
# 替换
:%s/fred/joe/igc            : general substitute command
                               普通替换命令
:%s/\r//g                   : Delete DOS returns ^M
                               删除 DOS 回车符 ^M

# Is your Text File jumbled onto one line? use following
# 你的文本文件是否乱七八糟的排成一行？使用如下命令
:%s/\r/\r/g                 : Turn DOS returns ^M into real returns
                               转换 DOS 回车符 ^M 为真正的回车符
:%s=  *$==                  : delete end of line blanks
                               删除行尾空格
:%s= \+$==                  : Same thing
                               同上
:%s#\s*\r\?$##              : Clean both trailing spaces AND DOS returns
                               删除行尾空格和 DOS 回车符
:%s#\s*\r*$##               : same thing
                               删除行尾空格和 DOS 回车符

# deleting empty lines
# 删除空行
:%s/^\n\{3}//               : delete blocks of 3 empty lines
                               删除三行空行
:%s/^\n\+/\r/               : compressing empty lines
                              压缩多行空行为一行

# IF YOU ONLY WANT TO KNOW ONE THING
# 如果你只想明白一件事情
:'a,'bg/fred/s/dick/joe/igc : VERY USEFUL
                               非常有用

# duplicating columns
# 复制列
:%s= [^ ]\+$=&amp;&amp;=            : duplicate end column
                               复制最后一列
:%s= \f\+$=&amp;&amp;=              : same thing
                               同上
:%s= \S\+$=&amp;&amp;               : usually the same
                               同上
# memory
# 记忆，或叫引用
:s/\(.*\):\(.*\)/\2 : \1/   : reverse fields separated by :
                               反转以 : 分隔的字段
:%s/^\(.*\)\n\1/\1$/        : delete duplicate lines
                               删除重复的行

# non-greedy matching \{-}
# 非贪婪匹配 \{-}
:%s/^.\{-}pdf/new.pdf/      : delete to 1st pdf only
                               只删除到第一个 pdf

# use of optional atom \?
:%s#\&lt;[zy]\?tbl_[a-z_]\+\&gt;#\L&amp;#gc : lowercase with optional leading characters
                                        不懂

# over possibly many lines
# 匹配尽可能多的行
:%s/&lt;!--\_.\{-}--&gt;//        : delete possibly multi-line comments
                                  删除尽可能多的注释
:help /\{-}                 : help non-greedy
                               非贪婪匹配的帮助

# substitute using a register
# 使用寄存器替换
:s/fred/&lt;c-r&gt;a/g         : sub "fred" with contents of register "a"
                               用"a"寄存器里的内容替换"fred"
:s/fred/\=@a/g              : better alternative as register not displayed
                               更好的方法，不用显示寄存器内容

# multiple commands on one line
# 写在一行里的复杂命令
:%s/\f\+\.gif\&gt;/\r&amp;\r/g | v/\.gif$/d | %s/gif/jpg/

# ORing
:%s/suck\|buck/loopy/gc     : ORing (must break pipe)
                               不懂
# Calling a VIM function
# 调用 Vim 函数
:s/__date__/\=strftime("%c")/ : insert datestring
                                插入日期

# Working with Columns sub any str1 in col3
# 处理列，替换所有在第三列中的 str1
:%s:\(\(\w\+\s\+\)\{2}\)str1:\1str2:

# Swapping first &amp; last column (4 columns)
# 交换第一列和最后一列 (共4列)
:%s:\(\w\+\)\(.*\s\+\)\(\w\+\)$:\3\2\1:

# filter all form elements into paste register
# 把所有的form元素（就是html里面的form啦）放到register里
:redir @*|sil exec 'g#&lt;\(input\|select\|textarea\|/\=form\)\&gt;#p'|redir END
:nmap ,z :redir @*&lt;Bar&gt;sil exec
'g@&lt;\(input\&lt;Bar&gt;select\&lt;Bar&gt;textarea\&lt;Bar&gt;/\=form\)\&gt;@p'&lt;Bar&gt;redir END&lt;CR&gt;

# increment numbers by 6 on certain lines only
# 不懂
:g/loc\|function/s/\d/\=submatch(0)+6/

# better
# 更好的方法
:%s#txtdev\zs\d#\=submatch(0)+1#g
:h /\zs

# increment only numbers gg\d\d  by 6 (another way)
# 不懂
:%s/\(gg\)\@&lt;=\d\+/\=submatch(0)+6/
:h zero-width

# find replacement text, put in memory, then use \zs to simplify substitute
# 查找需替换的文本，保存，然后使用 \zs 命令简单替换
:%s/"\([^.]\+\).*\zsxx/\1/

# Pull word under cursor into LHS of a substitute
# 不懂
:nmap &lt;leader&gt;z :%s#\&lt;&lt;c-r&gt;=expand("&lt;cword&gt;")&lt;cr&gt;\&gt;#

# Pull Visually Highlighted text into LHS of a substitute
# 不懂
:vmap &lt;leader&gt;z :&lt;C-U&gt;%s/\&lt;&lt;c-r&gt;*\&gt;/

----------------------------------------

# all following performing similar task, substitute within substitution
# Multiple single character substitution in a portion of line only

:%s,\(all/.*\)\@&lt;=/,_,g     : replace all / with _ AFTER "all/"

# Same thing
:s#all/\zs.*#\=substitute(submatch(0), '/', '_', 'g')#

# Substitute by splitting line, then re-joining
:s#all/#&amp;^M#|s#/#_#g|-j!

# Substitute inside substitute
:%s/.*/\='cp '.submatch(0).' all/'.substitute(submatch(0),'/','_','g')/
----------------------------------------
# global command display (see tip 227)
# 全局命令显示（参见 tip 227)
:g/fred.*joe.*dick/         : display all lines fred,joe &amp; dick
                              显示所有包含fred,joe 和 dick 的行
:g/\&lt;fred\&gt;/             : display all lines fred but not freddy
                               显示所有全字匹配 fred 的行
:g/&lt;pattern&gt;/z#.5        : display with context
                               显示上下文
:g/&lt;pattern&gt;/z#.5|echo "=========="  : display beautifully
                                           显示得很漂亮
:g/^\s*$/d                  : delete all blank lines
                               删除所有的空行
:g!/^dd/d                   : delete lines not containing string
                               删除所有行首不是 dd 的行
:v/^dd/d                    : delete lines not containing string
                              同上
:g/fred/,/joe/d             : not line based (very powerfull)
                               并不基于行(非常强大)
:g/{/ ,/}/- s/\n\+/\r/g     : Delete empty lines but only between {...}
                               删除在 {...} 只见的空行
:v/./.,/./-1join            : compress empty lines
                               压缩空行
:g/^$/,/./-j                : compress empty lines
                               压缩空行
:g/&lt;input\|&lt;form/p    : ORing
                               不懂
:g/^/pu _                   : double space file (pu = put)
                               把文件中空行增加一倍
:g/^/m0                     : Reverse file (m = move)
                               翻转文件
:g/fred/t$                  : copy lines matching fred to EOF
                               把匹配 fred 的行拷贝到文件最后
:g/stage/t'a                : copy lines matching stage to marker a
                               把匹配 stage 的行做标记a
:%norm jdd                  : delete every other line
                               隔一行删除一行

# incrementing numbers (type &lt;c-a&gt; as 5 characters)
:.,$g/^\d/exe "norm! \&lt;c-a&gt;": increment numbers
                                  增加每行行首的数字
:'a,'bg/\d\+/norm! ^A          : increment numbers
                                  增加标记 a 到标记 b 只见每行行首的数字

# storing glob results (note must use APPEND)
# 保存全局命令的结果 (注意必须使用添加模式)
:g/fred/y A                 : append all lines fred to register a
                               添加所有为fred所匹配的行到register a
:'a,'b g/^Error/ . w &gt;&gt; errors.txt

# duplicate every line in a file wrap a print '' around each duplicate
# 复制每一行，然后在复制出来的每一行两侧加上一个 print '复制出来的内容'
:g/./yank|put|-1s/'/"/g|s/.*/Print '&amp;'/

# replace string with contents of a file, -d deletes the "mark"
# 用文件中的内容替换字符串，-d 表示删除“标记”
:g/^MARK$/r tmp.ex | -d

----------------------------------------

# Global combined with substitute (power editing)
# 全局命令和替换命令联姻 (强大的编辑能力)
:'a,'bg/fred/s/joe/susan/gic :  can use memory to extend matching
                                 可以使用反向引用来匹配
:g/fred/,/joe/s/fred/joe/gic :  non-line based (ultra)

----------------------------------------

# Find fred before beginning search for joe
# 先找fred，然后找joe
:/fred/;/joe/-2,/sid/+3s/sally/alley/gIC

----------------------------------------

# Absolutely essential
# 基础

----------------------------------------
* # g* g#           : find word under cursor (&lt;cword&gt;) (forwards/backwards)
                       寻找光标处的狭义单词(&lt;cword&gt;) (前向/后向)
%                   : match brackets {}[]()
                       括号配对寻找 {}[]()
.                   : repeat last modification

matchit.vim         : % now matches tags &lt;tr&gt;&lt;td&gt;&lt;script&gt; &lt;?php etc
                       使得 % 能够配对标记 &lt;tr&gt;&lt;td&gt;&lt;script&gt; &lt;?php 等等
&lt;C-N&gt;&lt;C-P&gt;          : word completion in insert mode
                             插入模式下的单词自动完成
&lt;C-X&gt;&lt;C-L&gt;          : Line complete SUPER USEFUL
                             行自动完成(超级有用)
/&lt;C-R&gt;&lt;C-W&gt;         : Pull &lt;cword&gt; onto search/command line
                             把狭义单词 &lt;cword&gt; 写到 搜索命令行
/&lt;C-R&gt;&lt;C-A&gt;         : Pull &lt;CWORD&gt; onto search/command line
                             把广义单词 &lt;cWORD&gt; 写到 搜索命令行
:set ignorecase     : you nearly always want this
                       搜索时忽略大小写
:syntax on          : colour syntax in Perl,HTML,PHP etc
                       在 Perl,HTML,PHP 等中进行语法着色
:h regexp&lt;C-D&gt;      : type control-D and get a list all help topics containing
                          按下 control-D 键即可得到包含有 regexp 的帮助主题的列表
                       regexp (plus use TAB to Step thru list)
                       (使用TAB可以实现帮助的自动补齐)
----------------------------------------
# MAKE IT EASY TO UPDATE/RELOAD _vimrc
# 使更新 _vimrc 更容易
:nmap ,s :source $VIM/_vimrc
          # 译释：nmap 是绑定一个在normal模式下的快捷键
:nmap ,v :e $VIM/_vimrc
          # 译释：在normal模式下，先后按下 ,s 两个键执行_vimrc，而 ,v 则是编辑_vimrc

----------------------------------------

#VISUAL MODE (easy to add other HTML Tags)
# visual 模式 (例子是：轻松添加其他的 HTML Tags)
:vmap sb "zdi&lt;b&gt;&lt;C-R&gt;z&lt;/b&gt;&lt;ESC&gt;  : wrap &lt;b&gt;&lt;/b&gt; around VISUALLY selected Text
                                                在visual模式下选中的文字前后分别
加上&lt;b&gt;和&lt;/b&gt;
:vmap st "zdi&lt;?= &lt;C-R&gt;z ?&gt;&lt;ESC&gt;  : wrap &lt;?=   ?&gt; around VISUALLY selected Text
                                             在visual模式下选中的文字前后分别加
上&lt;?= 和 ?&gt;

----------------------------------------

# Exploring
# 文件浏览
:Exp(lore)                      : file explorer note capital Ex
                                   开启目录浏览器，注意首字母E是大写的
:Sex(plore)                     : file explorer in split window
                                   在一个分割的窗口中开启目录浏览器
:ls                             : list of buffers
                                   显示当前buffer的情况
:cd ..                          : move to parent directory
                                   进入父目录
:args                           : list of files
                                   显示目前打开的文件
:lcd %:p:h                      : change to directory of current file
                                   更改到当前文件所在的目录
:autocmd BufEnter * lcd %:p:h   : change to directory of current file
automatically (put in _vimrc)
                                   自动更改到当前文件所在的目录 (放到 _vimrc)

----------------------------------------

# Buffer Explorer (Top Ten Vim Script)
# 缓冲区(buffer)浏览器 (第三方的一个最流行的脚本)
# needs bufexplorer.vim  http://www.vim.org/script.php?script_id=42
# 需要下载 bufexplorer.vim
\be                             : buffer explorer list of buffers
                                   在缓冲区浏览器中打开缓冲区列表
\bs                             : buffer explorer (split window)
                                   以分割窗口的形式打开缓冲区浏览器

----------------------------------------

# Changing Case
guu                             : lowercase line
                                   行小写
gUU                             : uppercase line
                                   行大写
Vu                              : lowercase line
                                   行小写
VU                              : uppercase line
                                   行大写
g~~                             : flip case line
                                   行翻转
vEU                             : Upper Case Word
                                   字大写(狭义字)
vE~                             : Flip Case Word
                                   字翻转(狭义字)
ggguG                           : lowercase entire file
                                   把整个文章全部小写

# Titlise Visually Selected Text (map for .vimrc)
vmap ,c :s/\&lt;\(.\)\(\k*\)\&gt;/\u\1\L\2/g&lt;CR&gt;
# Uppercase first letter of sentences
# 大写所有句子的第一个字母
:%s/[.!?]\_s\+\a/\U&amp;\E/g

----------------------------------------

gf                              : open file name under cursor (SUPER)
                                   取当前光标处的广义字作为文件名，然后试图打开它！
ga                              : display hex,ascii value of char under cursor
                                   显示光标处字符的ascii,hex,oct,...
ggVGg?                          : rot13 whole file
                                   用rot13编码整个文件
ggg?G                           : rot13 whole file (quicker for large file)
                                   用rot13编码整个文件(对大文件更快一些)
:8 | normal VGg?                : rot13 from line 8
                                   从第8行开始，用rot13编码后面的文本
:normal 10GVGg?                 : rot13 from line 8
                                   从第8行开始，用rot13编码后面的文本

# 【关于rot13——谁让英文是偶数个字母啊】
# ROT13 是一种简单的编码，它把字母分成前后两组，每组13个，编码和解码
# 的算法相同，仅仅交换字母的这两个部分，即：[a..m] --&gt; [n..z] 和 [n..z]
# --&gt; [a..m] 。 ROT13 用简易的手段使得信件不能直接被识别和阅
# 读，也不会被搜索匹配程序用通常的方法直接找到。经常用于 USENET 中发表一
# 些攻击性或令人不快的言论或有简单保密需要的文章。
# 由于 ROT13 是自逆算法，所以，解码和编码是同一个过程。

&lt;C-A&gt;,&lt;C-X&gt;               : increment,decrement number under cursor
                                   增加,减少 光标处的狭义字所表示的数字
                                   win32 users must remap CNTRL-A
                                   Win32的用户可能需要重新定义一下Ctrl-A
&lt;C-R&gt;=5*5                    : insert 25 into text (mini-calculator)
                                   插入25 (一个迷你计算器)

----------------------------------------

# Makes all other tips superfluous
:h 42            : also http://www.google.com/search?q=42
:h holy-grail
:h!

----------------------------------------

# Markers &amp; moving about
# 标记和移动
'.               : jump to last modification line (SUPER)
                    跳到最后修改的那一行 (超级有用)
`.               : jump to exact spot in last modification line
                    不仅跳到最后修改的那一行，还要定位到修改点
g;               : cycle thru recent changes (oldest first) (new in vim6.3)
                    循环跳转修改点(从最老的修改点开始) (vim6.3中新增)
g,               : reverse direction (new in vim6.3)
                    反向循环跳转修改点 (vim6.3中新增)

:changes
:h changelist    : help for above
&lt;C-O&gt;            : retrace your movements in file (starting from most recent)
                       依次沿着你的跳转记录向回跳 (从最近的一次开始)
&lt;C-I&gt;            : retrace your movements in file (reverse direction)
                       依次沿着你的跳转记录向前跳
:ju(mps)         : list of your movements
                    列出你跳转的足迹
:help jump-motions
:history         : list of all your commands
                    列出历史命令记录
:his c           : commandline history
                    命令行命令历史
:his s           : search history
                    搜索命令历史
q/               : Search history Window
                    搜索命令历史的窗口
q:               : commandline history Window
                    命令行命令历史的窗口
:&lt;C-F&gt;        : history Window
                    历史命令记录的窗口
----------------------------------------
# Abbreviations &amp; maps
# # 缩写和键盘映射
:map   &lt;f7&gt;   :'a,'bw! c:/aaa/x
                  # 译释：map是映射一个normal模式下的键
                  # 这里是把F7键映射成把标记a到标记b中间的内容另存为一个文件/aaa/x
                  # 标记(mark)的方法：把光标移动到需要标记的地方，输入m，然后输
入标记名，例如a
                  # 引用标记的方法：'a ，即：单引号加标记名
:map   &lt;f8&gt;   :r c:/aaa/x
                  # 译释：把F8键映射成在当前位置插入文件/aaa/x的内容
:map   &lt;f11&gt;  :.w! c:/aaa/xr&lt;CR&gt;
                  # 译释：.（点号）表示当前行
                  # 所以F11就是把当前行存为/aaa/xr
                  # 最后的&lt;CR&gt;表示一个回车
:map   &lt;f12&gt;  :r c:/aaa/xr&lt;CR&gt;
:ab php          : list of abbreviations beginning php
                    列出php表示的缩写
                  # 译释：定义一个缩写使用：:iab hm hmisty
                  # 一个有趣的现象是，它列出的会是php和它的前子串开头的缩写
                  # 例如，有这么几个缩写：
                  # h =&gt; hmisty1 , hm =&gt; hmisty2 , hmi =&gt; hmisty3, m =&gt; hmisty4
                  # 那么使用 :ab hm会显示这么几个缩写：hm 和 h
                  # 而不是你想象中的 hm 和 hmi

:map ,           : list of maps beginning ,
                    列出以逗号开始的键盘映射

# allow use of F10 for mapping (win32)
# 允许 F10 的映射用法 (win32)
set wak=no       : :h winaltkeys
                    参见 :h winaltkeys

# For use in Maps
# 在键盘映射中常用的表示
&lt;CR&gt;             : carriage Return for maps
                       回车
&lt;ESC&gt;            : Escape
                       ESC
&lt;LEADER&gt;         : normally \
                       转义符号 \
&lt;BAR&gt;            : | pipe
                       管道符号
&lt;BACKSPACE&gt;      : backspace
                       退格符号

# display RGB colour under the cursor eg #445588
# 显示光标下数值的 RGB 颜色
:nmap &lt;leader&gt;c :hi Normal guibg=#&lt;c-r&gt;=expand("&lt;cword&gt;")&lt;cr&gt;&lt;cr&gt;

----------------------------------------

# Using a register as a map (preload registers in .vimrc)
:let @m=":'a,'bs/"
:let @s=":%!sort -u"

----------------------------------------
# List your Registers
# 列出寄存器(Registers)
:reg             : display contents of all registers
                   显示所有寄存器的内容
:reg a           : display content of individual registers
                    显示 a 寄存器的内容
"1p....          : retrieve numeric registers one by one
:let @y='yy@"'   : pre-loading registers (put in .vimrc)

----------------------------------------

# Useful tricks
# 有用的窍门
"ayy@a           : execute "Vim command" in a text file
                    把当前行作为一个Vim命令来执行
yy@"             : same thing using unnamed register
                    同上，不过是用匿名寄存器
u@.              : execute command JUST typed in
                    只执行键入的命令

----------------------------------------

# Get output from other commands (requires external programs)
# 从其他程序获取输出 (需要外部程序)
:r!ls.exe        : reads in output of ls
                    读取ls的输出到当前位置
!!date           : same thing (but replaces/filters current line)
                    读取date的输出 (但是会替换当前行的内容)
                  # 译释：其实你输入了!!后，vim就自动转换到 :.! 等待你继续输入
# Sorting with external sort
# 使用外部程序sort进行排序(sort是Unix标准命令，ls,date也是)
:%!sort -u       : use an external program to filter content
                    使用sort程序排序整个文件（用结果重写文件）
                  # 译释：%表示整个文件的所有行
                  # !sort表示执行外部命令sort
                  # -u是sort的参数，man sort看看，这个参数的意义是合并相同的行
                  # u就是unique,如果两行内容相同，则结果中只保留一行的说
:'a,'b!sort -u   : use an external program to filter content
                    对mark a 到mark b中间的内容进行排序
!1} sort -u      : sorts paragraph (note normal mode!!)
                    排序当前段落 (只能在normal模式下使用!!)
                  # 译释：!表示使用filter，1}表示filter的对象是从当前行开始向后
数一段
                  # 段落指到空行处结束，不包括空行
                  # 其实你一旦输入 !1}，vim就自动计算当前段落应该到那一行(eg.+
5)，然后生成
                  # :.,.+5! 等待之后输入sort -u，回车，完成操作
                  # .表示当前行，.+5当然就是当前行向后数5行

----------------------------------------

# Multiple Files Management (Essential)
# 多文档操作 (基础)
:bn              : goto next buffer
                    跳转到下一个buffer
:bp              : goto previous buffer
                    跳转到上一个buffer
:wn              : save file and move to next (super)
                    存盘当前文件并跳转到下一个
:wp              : save file and move to previous
                    存盘当前文件并跳转到上一个
:bd              : remove file from buffer list (super)
                    把这个文件从buffer列表中做掉
:bun             : Buffer unload (remove window but not from list)
                    卸掉buffer (关闭这个buffer的窗口但是不把它从列表中做掉)
:badd file.c     : file from buffer list
                    把文件file.c添加到buffer列表
:b 3             : go to buffer 3
                    跳到第3个buffer
:b main          : go to buffer with main in name eg main.c (ultra)
                    跳到一个名字中包含main的buffer,例如main.c
:sav php.html    : Save current file as php.html and "move" to php.html
                    把当前文件存为php.html并打开php.html
:sav! %&lt;.bak  : Save Current file to alternative extension
                    换一个后缀保存
:sav! %:r.cfm    : Save Current file to alternative extension

:e!              : return to unmodified file
                    返回到修改之前的文件(修改之后没有存盘)
:w c:/aaa/%      : save file elsewhere
                    把文件存到一个地儿
:e #             : edit alternative file
                    编辑标记为#的buffer(这个buffer必须含有一个可编辑的文件)
                 # 用ls命令就能看到哪一个buffer有#
                  # %a表示当前正在编辑的buffer
                  # u 表示不能编辑或者已经被做掉的buffer
:rew             : return to beginning of editted files list (:args)
                    回到第一个可编辑的文件
:brew            : buffer rewind
                    回到第一个buffer
:sp fred.txt     : open fred.txt into a split
                    在一个水平分割的窗口中打开文件fred.txt # 译注：vs fred.txt可
以实现垂直分割
:sball,:sb       : Split all buffers (super)
                    把当前所有含有可编辑文件的buffer显示到一个分割窗口中
:scrollbind      : in each split window
:map   &lt;F5&gt; :ls&lt;CR&gt;:e # : Pressing F5 lists all buffer, just type number
                                 在normal模式下按F5键，则会显示所有含有一个
                                 可编辑文件的buffer，然后提示你输入buffer的序号，
                                 输入后回车，则编辑这个buffer
:set hidden      : Allows to change buffer w/o saving current buffer
                    允许不保存buffer而切换buffer (w/o=without)
----------------------------------------
# Quick jumping between splits
# 在分割窗口中快速切换
:map &lt;C-J&gt; &lt;C-W&gt;j&lt;C-W&gt;_
# 这是一个键盘绑定，把Ctrl-J定义成切换到下一个窗口并最大化
:map &lt;C-K&gt; &lt;C-W&gt;k&lt;C-W&gt;_
# 这是一个键盘绑定，把Ctrl-K定义成切换到上一个窗口并最大化

----------------------------------------
# Recording (BEST TIP of ALL)
# 命令录制 (最佳技巧)
qq  # record to q
       录制到q
your complex series of commands  # 输入一系列复杂的指令
q   # end recording
       再次按q停止录制
@q  # to execute
       执行q中存储的指令
@@  # to Repeat
       重复执行
5@@ # to Repeat 5 times
       重复执行5遍

# editing a register/recording
# 编辑寄存器/录制
"qp            :display contents of register q (normal mode)
                 显示寄存器 q 的内容 (普通模式)
&lt;ctrl-R&gt;q   :display contents of register q (insert mode)
                显示寄存器 q 的内容 (插入模式)

# you can now see recording contents, edit as required
# 你现在可以看到记录内容，随便编辑
"qdd           :put changed contacts back into q
@q             :execute recording/register q
                 执行记录/寄存器 q

# Operating a Recording on a Visual BLOCK
# 在可视块中运行记录
1) define recording/register
1) 定义记录/寄存器
qq:s/ to/ from/g^Mq
2) Define Visual BLOCK
2) 定义可视块
V}
3) hit : and the following appears
3) 键入 : 将显示下面信息
:'&lt;,'&gt;
4)Complete as follows
4) 完成如下操作
:'&lt;,'&gt;norm @q
----------------------------------------
# Visual is the newest and usually the BEST editting mode
# 可视模式是最新也通常是最好的编辑模式
# Visual basics
# 可视模式基础
v              : enter visual mode
                  进入可视模式
V              : visual mode whole line
                  整行的可视模式
&lt;C-V&gt;       : enter VISUAL BLOCK mode
                  进入可视块模式
gv             : reselect last visual area
                  重新选取最新的可视区域
o              : navigate visual area
                  浏览可视区域
"*y            : yank visual area into paste buffer
                  复制可视区域到剪贴板
V%             : visualise what you match
                  ???
V}J            : Join Visual block (great)
                  连接可视块

----------------------------------------

# Delete first 2 characters of 10 successive lines
# 删除连续10行中每行的头2个字符
0&lt;c-v&gt;10j2ld

----------------------------------------

# how to copy a set of columns using VISUAL BLOCK
# 如何用可视块拷贝几列
# visual block (AKA columnwise selection) (NOT BY ordinary v command)
# 可视块(并非通常的 v 命令)
&lt;C-V&gt; then select "column(s)" with motion commands (win32 &lt;C-Q&gt;)
&lt;C-V&gt;，然后通过移动命令选择列 (win32 &lt;C-Q&gt;)
then c,d,y,r etc
然后执行 c,d,y,r 等命令

----------------------------------------
# _vimrc essentials
# _vimrc基础
:set incsearch : jumps to search word as you type (annoying but excellent)
                  实时匹配你输入的内容
:set wildignore=*.o,*.obj,*.bak,*.exe : tab complete now ignores these
                                         tab键的自动完成现在会忽略这些
:set shiftwidth=3                     : for shift/tabbing
                                         自动缩进设为4个字符
                                       # 译注：一个tab位通常是8个字符
                                       # 所以，我们还要设定 :set tabstop=4，这
样，所有的缩进都是4字符了
:set vb t_vb=".                       : set silent (no beep)
                                         沉默方式(不要叫beep！)
:set browsedir=buffer                 : Maki GUI File Open use current directory
                                         设置 GUI 版本文件打开时，使用当前路径
----------------------------------------
# launching Win IE
# 加载 IE 浏览器
:nmap ,f :update&lt;CR&gt;:silent !start c:\progra~1\intern~1\iexplore.exe file://%:p&lt;CR&gt;
:nmap ,i :update&lt;CR&gt;: !start c:\progra~1\intern~1\iexplore.exe &lt;cWORD&gt;&lt;CR&gt;
# 译释：nmap是做一个normal模式下的键盘绑定
# 这里绑定了一个逗号命令 ,f
# :update是写这个文件，与:w不同，它只有当文件被修改了的时候才写
# :silent别让弹出窗口报告执行结果
# !...后面就是执行windows命令了。呵呵，去问bill gates什么意思吧。

----------------------------------------

# FTPing from VIM
# 用 VIM 通过 ftp 编辑文件
:cmap ,r  :Nread ftp://209.51.134.122/public_html/index.html
:cmap ,w  :Nwrite ftp://209.51.134.122/public_html/index.html
gvim ftp://209.51.134.122/public_html/index.html
# 译注：cmap是命令(command)模式绑定

----------------------------------------

# appending to registers (use CAPITAL)
# 附加到一个register (用大写的register名字)
"a5yy   #复制5行到a中
10j     #下移10行
"A5yy   #再添加5行到a中

----------------------------------------

[I     : show lines matching word under cursor &lt;cword&gt; (super)
          显示光标处的狭义字可以匹配的行(高级指令)
        # 译注：# 可以全文查找与光标处的狭义字相匹配的字，
        # 这在查找函数原型和实现，或者变量使用的时候很有用

----------------------------------------

# Conventional Shifting/Indenting
# 常规缩进
:'a,'b&gt;&gt;   # 把mark a到mark b之间的内容缩进两次

# visual shifting (builtin-repeat)
# 在visual模式下缩进 (无限可重复)
:vnoremap &lt; &lt;gv
# 译释：:vnoremap 重定义了visual模式下 &lt; 符号的含义
# 把它定义成 &lt;gv
# 即：先&lt;向外缩进，然后gv重新选择上一次选择了的区域
# 这样在visual模式下就可以实现连续按&lt;而连续缩进了
:vnoremap &gt; &gt;gv
# 同里，内缩

# Block shifting (magic)
# 块缩进
 &gt;i{
 &gt;a{
# also
 &gt;% and &lt;%
----------------------------------------
# Redirection &amp; Paste register *
# 重定向到剪贴板和从剪贴板粘贴
:redir @*                    : redirect commands to paste buffer
                                重定向命令的输出结果（最下方命令行上的结果）
:redir END                   : end redirect
                                结束重定向
:redir &gt;&gt; out.txt            : redirect to a file
                                重定向到一个文件
# Working with Paste buffer
# 操作剪贴板
"*yy                         : yank to paste
                                复制到剪贴板中
"*p                          : insert from paste buffer
                                从剪贴板中粘贴
# yank to paste buffer (ex mode)
# 拷贝到剪贴板 (ex 模式)
:'a,'by*                     : Yank range into paste
                                把标记a到标记b见的内容拷贝到剪贴板
:%y*                         : Yank whole buffer into paste
                                把整个文件拷贝到剪贴板
# filter non-printable characters from the paste buffer
# 从剪贴板上过滤非可打印字符
# useful when pasting from some gui application
# 当从一些 GUI 程序粘贴时会有用处
:nmap &lt;leader&gt;p :let @* = substitute(@*,'[^[:print:]]','','g')&lt;cr&gt;"*p
----------------------------------------
# Re-Formatting text
# 重新格式化文本
gq}                          : Format a paragraph
                                格式化一个段落
ggVGgq                       : Reformat entire file
                                重新格式化整个文件
Vgq                          : current line
                                格式化当前行
# break lines at 70 chars, if possible after a ;
# 在70列的时候换行
:s/.\{,69\};\s*\|.\{,69\}\s\+/&amp;\r/g
----------------------------------------
# Operate command over multiple files
# 对多个文档实施命令
:argdo %s/foo/bar/e          : operate on all files in :args
                                对所有:args列表中的文档执行命令
:bufdo %s/foo/bar/e
:windo %s/foo/bar/e
:argdo exe '%!sort'|w!       : include an external command
                                使用外部命令
:bufdo /foo/
----------------------------------------
# Command line tricks
# 命令行上的技巧
gvim -h                    : help
                              启动帮助
ls | gvim -                : edit a stream!!
                              编辑一个数据流
cat xx | gvim - -c "v/^\d\d\|^[3-9]/d " : filter a stream
gvim -o file1 file2        : open into a split
                              以分割窗口打开两个文件

# execute one command after opening file
# 指出打开之后执行的命令
gvim.exe -c "/main" joe.c  : Open joe.c &amp; jump to "main"

# execute multiple command on a single file
# 对一个文件执行多个命令
vim -c "%s/ABC/DEF/ge | update" file1.c

# execute multiple command on a group of files
# 对一组文件执行多个命令
vim -c "argdo %s/ABC/DEF/ge | update" *.c

# remove blocks of text from a series of files
# 从一组文件中删除文本块
vim -c "argdo /begin/+1,/end/-1g/^/d | update" *.c

# Automate editting of a file (Ex commands in convert.vim)
# 自动编辑文件 (编辑命令序列Ex commands已经包含在convert.vim中了)
vim -s "convert.vim" file.c

#load VIM without .vimrc and plugins (clean VIM)
# 不要加载.vimrc和任何plugins (启动一个干净的VIM)
gvim -u NONE -U NONE -N

# Access paste buffer contents (put in a script/batch file)
# 读取剪贴板内容 (放到脚本或批处理文件中)
gvim -c 'normal ggdG"*p' c:/aaa/xp

# print paste contents to default printer
# 把剪贴板内容打印到默认打印机
gvim -c 's/^/\=@*/|hardcopy!|q!'
----------------------------------------
# GVIM Difference Function (Brilliant)
gvim -d file1 file2        : vimdiff (compare differences)
                              vimdiff (比较不同)
dp                         : "put" difference under cursor to other file
                              把光标处的不同放到另一个文件
do                         : "get" difference under cursor from other file
                              在光标处从另一个文件取得不同
----------------------------------------
# Vim traps
# Vim陷阱
In regular expressions you must backslash + (match 1 or more)
In regular expressions you must backslash | (or)
In regular expressions you must backslash ( (group)
In regular expressions you must backslash { (count)
# 在vim的正则表达式中， + | ( { 前都必须加转义符 \
/fred\+/                   : matches fred/freddy but not free
                              匹配fred或freddy但是不匹配free
/\(fred\)\{2,3}/           : note what you have to break
                              ???
----------------------------------------
# \v or very magic (usually) reduces backslashing
# \v ，或叫做very magic (通常都是这么叫)可以取消转义符
/codes\(\n\|\s\)*where  : normal regexp
                           普通的正则表达式
/\vcodes(\n|\s)*where   : very magic
----------------------------------------
# pulling objects onto command/search line (SUPER)
# 把东西送到命令行/搜索行 (SUPER)
&lt;C-R&gt;&lt;C-W&gt; : pull word under the cursor into a command line or search
                    送一个狭义词
&lt;C-R&gt;&lt;C-A&gt; : pull WORD under the cursor into a command line or search
                    送一个广义词
&lt;C-R&gt;-                  : pull small register (also insert mode)
                             送一个小型寄存器 (插入模式下也有效)
&lt;C-R&gt;[0-9a-z]           : pull named registers (also insert mode)
                              送一个命名寄存器 (插入模式下也有效)
&lt;C-R&gt;%                  : pull file name (also #) (also insert mode)
                              送文件名过去 (#也行) (插入模式下也有效)
----------------------------------------
# manipulating registers
# 操作寄存器
:let @a=@_              : clear register a
                           清空寄存器a
:let @a=""              : clear register a
                           同上
:let @*=@a              : copy register a to paste buffer
                           拷贝寄存器 a 的内容到剪贴板
map   &lt;f11&gt; "qyy:let @q=@q."zzz"

----------------------------------------

# help for help
# 关于帮助的帮助
:h quickref             : VIM Quick Reference Sheet (ultra)
                           VIM 快速参考手册 (ultra)
:h tips                 : Vim's own Tips Help
                           Vim自己的tips
:h visual&lt;C-D&gt;&lt;tab&gt;     : obtain  list of all visual help topics
                                得到一个关于visual关键字的帮助列表
                         : Then use tab to step thru them
                        : 然后用tab键去选择
:h ctrl&lt;C-D&gt;         : list help of all control keys
                           显示所有关于Ctrl的帮助
:helpg uganda           : Help grep
                           显示 grep 帮助
:h :r                   : help for :ex command
                           :ex冒号命令
:h CTRL-R               : normal mode
                           普通模式命令
:h /\r                  : what's \r in a regexp (matches a &lt;CR&gt;)
                           \r在正则表达式中是什么意思呢？
:h \\zs                 : double up backslash to find \zs in help
:h i_CTRL-R             : help for say &lt;C-R&gt; in insert mode
                           insert模式下的Ctrl-R
:h c_CTRL-R             : help for say &lt;C-R&gt; in command mode
                           命令行(command-line)模式下的Ctrl-R
:h v_CTRL-V             : visual mode
                           visual模式下的Ctrl-V
:h tutor                : VIM Tutor
                           VIM 指南
&lt;C-[&gt;, &lt;C-T&gt;      : Move back &amp; Forth in HELP History
                           在帮助历史中，向前/后移动
gvim -h                 : VIM Command Line Help
                           关于 VIM 命令的帮助
----------------------------------------
# where was an option set
# 选项设置在哪里？
:scriptnames            : list all plugins, _vimrcs loaded (super)
                           列出所有加载的 plugins, _vimrcs
:verbose set history?   : reveals value of history and where set
                           显示history的值并指出设置文件的位置
:function               : list functions
                           列出所有函数
:func SearchCompl       : List particular function
                          列出指定的函数

----------------------------------------

# making your own VIM help
# 制作你自己的VIM帮助
:helptags /vim/vim63/doc  : rebuild all *.txt help files in /doc
                             重建 /doc 中所有的 *.txt 帮助文件
:help add-local-help

----------------------------------------
# running file thru an external program (eg php)
# 用外部程序来运行程序 (例如 php)
map   &lt;f9&gt;   :w&lt;CR&gt;:!c:/php/php.exe %&lt;CR&gt;
map   &lt;f2&gt;   :w&lt;CR&gt;:!perl -c %&lt;CR&gt;
----------------------------------------
# capturing output of current script in a separate buffer
# 在另一个buffer中，捕捉当前脚本的输出
:new | r!perl #                   : opens new buffer,read other buffer
                                     新建一个buffer，从另一个buffer中读入结果
:new! x.out | r!perl #            : same with named file
                                    同上，并指定一个新文件名

----------------------------------------

# Inserting DOS Carriage Returns
# 插入DOS换行符
:%s/nubian/&lt;C-V&gt;&lt;C-M&gt;&amp;/g          :  that's what you type
:%s/nubian/&lt;C-Q&gt;&lt;C-M&gt;&amp;/g          :  for Win32
                                            对于Win32应该这样
dn_t...@yahoo.ca
:%s/nubian/^M&amp;/g                  :  what you'll see where ^M is ONE character
                                      你看到的^M是一个字符
:%s/nubian/\r&amp;/g                  :  better
                                      更好的形式

----------------------------------------

# automatically delete trailing Dos-returns,whitespace
# 自动删除行尾 Dos回车符和空格
autocmd BufRead * silent! %s/[\r \t]\+$//
autocmd BufEnter *.php :%s/[ \t\r]\+$//e
----------------------------------------
# perform an action on a particular file or file type
# 对指定文件或文件类型执行某个动作
autocmd VimEnter c:/intranet/note011.txt normal! ggVGg?
autocmd FileType *.pl exec('set fileformats=unix')
----------------------------------------
# Retrieving last command line command for copy &amp; pasting into text
# 把最后一个命令贴到当前位置
i&lt;c-r&gt;:
# Retrieving last Search Command for copy &amp; pasting into text
# 把最后一个搜索指令贴到当前位置
i&lt;c-r&gt;/
# 译释：i是进入insert模式，
# Ctrl-r是开启插入模式下register的引用
# :和/分别引用了两个register的内容
----------------------------------------
# more completions
# 更多的完成功能
&lt;C-X&gt;&lt;C-F&gt;     :insert name of a file in current directory
                      插入当前目录下的一个文件名到当前位置
# 在insert模式下使用
# 然后用 Ctrl-P/Ctrl-N 翻页

----------------------------------------

# Substituting a Visual area
# 替换一个visual区域
# select visual area as usual (:h visual) then type :s/Emacs/Vim/ etc
# 选择一个区域，然后输入 :s/Emacs/Vim/ 等等，vim会自动进入:模式
:'&lt;,'&gt;s/Emacs/Vim/g               : REMEMBER you dont type the '&lt;.'&gt;
                                        前面的'&lt;,'&gt;是vim自动添加的
gv                                : Re-select the previous visual area (ULTRA)
                                     重新选择前一个可视区域 (ULTRA)
----------------------------------------
# inserting line number into file
# 在文件中插入行号
:g/^/exec "s/^/".strpart(line(".")."    ", 0, 4)
:%s/^/\=strpart(line(".")."     ", 0, 5)
:%s/^/\=line('.'). ' '
----------------------------------------
#numbering lines VIM way
# 用VIM的方式来编号行
:set number                       : show line numbers
                                     显示行号
:map &lt;F12&gt; :set number!&lt;CR&gt;       : Show linenumbers flip-flop
:%s/^/\=strpart(line('.')."        ",0,&amp;ts)

#numbering lines (need Perl on PC) starting from arbitrary number
#从任意行开始编号(需要perl)
:'a,'b!perl -pne 'BEGIN{$a=223} substr($_,2,0)=$a++'

# Produce a list of numbers
# 产生数字列表
#Type in number on line say 223 in an empty file
qqmnYP`n^Aq                       : in recording q repeat with @q
# increment existing numbers to end of file (type &lt;c-a&gt; as 5 characters)
# 递增已存在数字到文件末
:.,$g/^\d/exe "normal! \&lt;c-a&gt;"
# advanced incrementing
# 高级递增，参见：
http://vim.sourceforge.net/tip_view.php?tip_id=150
----------------------------------------
# advanced incrementing (really useful)
# 高级递增 (真的很有用)
" put following in _vimrc
" 把下面几句放到 _vimrc #vimrc脚本用 " 做行注释符
let g:I=0
function! INC(increment)
let g:I =g:I + a:increment
return g:I
endfunction
" eg create list starting from 223 incrementing by 5 between markers a,b
" 例如从mark a 到mark b 递增，从223开始，步长为5
:let I=223
:'a,'bs/^/\=INC(5)/
" create a map for INC
cab viminc :let I=223 \| 'a,'bs/$/\=INC(5)/
----------------------------------------
# editing/moving within current insert (Really useful)
# 在当前插入模式下编辑/移动 (真得很有用)
&lt;C-U&gt;                             : delete all entered
                                        删除全部
&lt;C-W&gt;                             : delete last word
                                        删除最后一个单词
&lt;HOME&gt;&lt;END&gt;                       : beginning/end of line
                                           移动到行首/行尾
&lt;C-LEFTARROW&gt;&lt;C-RIGHTARROW&gt;       : jump one word backwards/forwards
                                           向前/后移动一个单词
&lt;C-X&gt;&lt;C-E&gt;,&lt;C-X&gt;&lt;C-Y&gt;             : scroll while staying put in insert
----------------------------------------
#encryption (use with care: DON'T FORGET your KEY)
# 加密(小心使用，不要忘了密码)
:X                                : you will be prompted for a key
                                     vim会提示你输入密码
:h :X
----------------------------------------
# modeline (make a file readonly etc) must be in first/last 5 lines
# 模式行 (使文件只读等)，必须在前/后 5行内
// vim:noai:ts=2:sw=4:readonly:
# vim:ft=html:                    : says use HTML Syntax highlighting
                                     使用 HTML 语法高亮
:h modeline
----------------------------------------
# Creating your own GUI Toolbar entry
# 建立你自己的菜单项
amenu  Modeline.Insert\ a\ VIM\ modeline &lt;Esc&gt;&lt;Esc&gt;ggOvim:ff=unix ts=4
ss=4&lt;CR&gt;vim60:fdm=marker&lt;esc&gt;gg

----------------------------------------

# A function to save word under cursor to a file
# 一个保存当前光标下的狭义字到一个文件的函数
function! SaveWord()
    normal yiw
    exe ':!echo '.@0.' &gt;&gt; word.txt'
endfunction
map ,p :call SaveWord()

----------------------------------------

# function to delete duplicate lines
# 删除重复行的函数
function! Del()
  if getline(".") == getline(line(".") - 1)
    norm dd
  endif
endfunction

:g/^/ call Del()  #使用该函数的一个例子

----------------------------------------

# Digraphs (non alpha-numerics)
# 双字节编码 (non alpha-numerics)
:digraphs                         : display table
                                     显示编码表
:h dig                            : help
                                     帮助
i&lt;C-K&gt;e'                          : enters
                                        输入 é
i&lt;C-V&gt;233                         : enters (Unix)
                                       输入 é (Unix)
i&lt;C-Q&gt;233                         : enters (Win32)
                                        输入 é (Win32)
ga                                : View hex value of any character
                                     查看字符的hex值

# Deleting non-ascii characters (some invisible)
# 删除非 ascii 字符
:%s/[&lt;C-V&gt;128-&lt;C-V&gt;255]//gi       : where you have to type the Control-V
:%s/[€- ]//gi                     : Should see a black square &amp; a dotted y
:%s/[&lt;C-V&gt;128-&lt;C-V&gt;255&lt;C-V&gt;01-&lt;C-V&gt;31]//gi : All pesky non-asciis
:exec "norm /[\x00-\x1f\x80-\xff]/"        : same thing
#Pull a non-ascii character onto search bar
yl/&lt;C-R&gt;"                         :
----------------------------------------
# All file completions grouped (for example main_c.c)
# 文件名自动完成 (例如 main_c.c)
:e main_&lt;tab&gt;                     : tab completes
                                        tab 键完成
gf                                : open file under cursor  (normal)
                                     打开光标处广义字命名的文件 (normal模式)
main_&lt;C-X&gt;&lt;C-F&gt;                   : include NAME of file in text (insert mode)
                                           文件名自动完成(insert模式)
----------------------------------------
# Complex Vim
# Vim复杂使用
# swap two words
# 交换两个单词
:%s/\&lt;\(on\|off\)\&gt;/\=strpart("offon", 3 * ("off" == submatch(0)), 3)/g
# swap two words
# 交换两个单词
:vnoremap &lt;C-X&gt; &lt;Esc&gt;`.``gvP``P
----------------------------------------
# Convert Text File to HTML
# 把text文件转换成html文件(oh,ft)
:runtime! syntax/2html.vim        : convert txt to html
                                    转换 txt 成 html
:h 2html
----------------------------------------
# VIM has internal grep
# VIM 有一个内部自带的 grep 命令
:grep some_keyword *.c            : get list of all c-files containing keyword
                                     得到一个包含some_keyword的c文件名列表
:cn                               : go to next occurrence
                                     去下一个出现的位置
----------------------------------------
# Force Syntax coloring for a file that has no extension .pl
# 强制无扩展名的文件的语法着色方式
:set syntax=perl
# Remove syntax coloring (useful for all sorts of reasons)
# 取消语法着色 (很有用)
:set syntax off
# change coloring scheme (any file in ~vim/vim??/colors)
# 改变色彩主题 (在~vim/vim??/colors中的任何文件)
:colorscheme blue
# Force HTML Syntax highlighting by using a modeline
# 通过使用模式行强迫使用 HTML 语法高亮
# vim:ft=html:
----------------------------------------
:set noma (non modifiable)        : Prevents modifications
                                     防止修改
:set ro (Read Only)               : Protect a file from unintentional writes
                                     只读保护
----------------------------------------
# Sessions (Open a set of files)
# 对话 (打开一堆文件)
gvim file1.c file2.c lib/lib.h lib/lib2.h : load files for "session"
                                            在"对话"中加载这些文件
:mksession                        : Make a Session file (default Session.vim)
                                     生成一个Session文件 (默认是Session.vim)
:q
gvim -S Session.vim               : Reload all files
                                     重新加载所有文件
----------------------------------------
# tags (jumping to subroutines/functions)
# 标记(tags) (跳转到子程序/函数)
taglist.vim                       : popular plugin
                                     很流行的插件
:Tlist                            : display Tags (list of functions)
                                     显示标记 (函数列表)
&lt;C-]&gt;                             : jump to function under cursor
                                        跳转到光标处的函数
----------------------------------------
# columnise a csv file for display only as may crop wide columns
:let width = 20
:let fill=' ' | while strlen(fill) &lt; width | let fill=fill.fill | endwhile
:%s/\([^;]*\);\=/\=strpart(submatch(1).fill, 0, width)/ge
:%s/\s\+$//ge
# Highlight a particular csv column (put in .vimrc)
function! CSVH(x)
     execute 'match Keyword /^\([^,]*,\)\{'.a:x.'}\zs[^,]*/'
     execute 'normal ^'.a:x.'f,'
endfunction
command! -nargs=1 Csv :call CSVH(&lt;args&gt;)
# call with
:Csv 5                             : highlight fith column
----------------------------------------
# folding : hide sections to allow easier comparisons
# 折叠：隐藏某些片断，是查看更容易
zf}                               : fold paragraph using motion
                                     使用动作命令折叠一个段落
v}zf                              : fold paragraph using visual
                                     使用可视模式折叠一个段落
zf'a                              : fold to mark
                                     折叠到一个标记上
zo                                : open fold
                                     打开折叠
zc                                : re-close fold
                                     重新关闭折叠
----------------------------------------
# displaying "invisible characters"
# 显示"不可见字符"
:set list
:h listchars
----------------------------------------
# How to paste "normal commands" w/o entering insert mode
# 如何在不进入插入模式的情况下粘贴"普通模式的命令"
:norm qqy$jq
----------------------------------------
# manipulating file names
# 处理文件名
:h filename-modifiers             : help
                                     帮助
:w %                              : write to current file name
                                     写入当前文件
:w %:r.cfm                        : change file extention to .cfm
                                     改变文件扩展名为 .cfm
:!echo %:p                        : full path &amp; file name
                                     显示完整路径和文件名
:!echo %:p:h                      : full path only
                                     只显示完整路径
&lt;C-R&gt;%                            : insert filename (insert mode)
                                        插入文件名 (插入模式)
"%p                               : insert filename (normal mode)
                                    插入文件名 (普通模式)
/&lt;C-R&gt;%                           : Search for file name in text
                                        在文本中查找文件名
----------------------------------------
# delete without destroying default buffer contents
# 删除，但不破坏 buffer 内容
"_d                               : what you've ALWAYS wanted
                                     你一直想要的东西
"_dw                              : eg delete word (use blackhole)
                                     例如：删除一个单词 (使用黑洞???)
----------------------------------------
# pull full path name into paste buffer for attachment to email etc
# 送完整的路径名到剪贴板，用于邮件附件等
nnoremap &lt;F2&gt; :let @*=expand("%:p")&lt;cr&gt; :unix
nnoremap &lt;F2&gt; :let @*=substitute(expand("%:p"), "/", "\\", "g")&lt;cr&gt; :win32
----------------------------------------
# Simple Shell script to rename files w/o leaving vim
# 不用离开 Vim 就能修改文件名的简单 shell 脚本
$ vim
:r! ls *.c
:%s/\(.*\).c/mv &amp; \1.bla
:w !sh
:q!
----------------------------------------
# count words in a text file
# 在一个文本里计算单词数
g&lt;C-G&gt;
----------------------------------------
# example of setting your own highlighting
# 你自己设置高亮显示的例子
:syn match DoubleSpace "  "
:hi def DoubleSpace guibg=#e0e0e0
----------------------------------------
# Programming keys depending on file type
# 根据文件类型映射快捷键
:autocmd bufenter *.tex map &lt;F1&gt; :!latex %&lt;CR&gt;
:autocmd bufenter *.tex map &lt;F2&gt; :!xdvi -hush %&lt;.dvi&amp;&lt;CR&gt;
----------------------------------------
# reading Ms-Word documents, requires antiword
# 读取 MS-Word 文档，需要 antiword
:autocmd BufReadPre *.doc set ro
:autocmd BufReadPre *.doc set hlsearch!
:autocmd BufReadPost *.doc %!antiword "%"
----------------------------------------
# Just Another Vim Hacker JAVH
vim -c ":%s%s*%Cyrnfr)fcbafbe[Oenz(Zbbyranne%|:%s)[[()])-)Ig|norm Vg?"
# 译释：呵呵，谁来解释一下吧！
# 其实不过是在启动vim的时候执行了一个命令
# 先写入了 Just Another Vim Hacker 的rot13编码
# 然后再解码
----------------------------------------
__END__ 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch指定DNS服务器]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/14/archzhi-ding-dnsfu-wu-qi/"/>
    <updated>2012-06-14T07:55:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/14/archzhi-ding-dnsfu-wu-qi</id>
    <content type="html"><![CDATA[<p>学校里提供了IPv6的接入，但是之前使用的一直是学校提供的DNS服务器，使用的是IPv4的方式。在google上的<a href="https://code.google.com/p/ipv6-hosts/" title="IPv6 Hosts">IPv6的hosts文档</a>上知道有IPv6的DNS服务器的地址，于是上网找了在Arch上设置DNS服务器的地址，简单记录如下。</p>

<h2>修改/etc/resolv.conf的可修改性</h2>

<p>由于学校使用的是DHCP的方式获取IP地址，Arch上使用的DHCP的客户端是dhcpcd，在默认情况下该服务器将会将获取的DNS服务器的地址填入到/etc/resolv.conf文件中。因此如果指定DNS服务器的方式，可以将该文件的文件设置为不可写。通过使用<kbd>chattr +i /etc/resolv.conf</kbd>的方式可以将该文件设置为不可修改的。<br/>
如果在网络的环境不变的情况下，使用该种方式便可以解决，但是由于在宿舍和在实验室的环境，这两个网络环境下学校指定的DNS服务器是不一样的，在使用校内提供的服务器时，还是用学校的DNS服务器便可以了，因此这种方法对自己而言还不是很合适。于是出现下面的方法。</p>

<!--more-->


<h2>增加/etc/resolv.conf.head文件</h2>

<p>最想的还是根据适当的情况，将一个不变的DNS服务器增加到/etc/resolv.conf文件中，在打开/etc/resolv.conf文件时，可以看到这样一行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /etc/resolv.conf.head can replace this line</span></code></pre></td></tr></table></div></figure>


<p>于是上网找了下这个文件的说明，似乎看到的是在/etc目录下新建一个名为resolv.conf.head的，dhcpcd客户端在将DNS服务器地址写入到resolv.conf文件时将会把resolv.conf.head文件的内容添加进入到resolv.conf文件中。因此可以通过在resolv.conf.head文件中添加内容来完成这个功能。</p>

<p>目前在电脑上使用的是第二种方法，完成了指定DNS服务器的方式，目前首选的是Google的IPv6服务器。</p>

<h3>附录：目前可用IPv6的DNS服务器地址</h3>

<p>根据Google上面提供的IPv6 DNS服务器的地址，目前摘抄如下：</p>

<ul>
<li>ordns.he.net （最优）

<pre><code>  2001:470:20::2
  74.82.42.42 
</code></pre></li>
<li>google-public-dns-a.google.com （推荐）

<pre><code>  2001:4860:4860::8888
  8.8.8.8（不返回 Google 系列的 AAAA 记录）    
</code></pre></li>
<li>google-public-dns-b.google.com （推荐）

<pre><code>  2001:4860:4860::8844
  8.8.4.4（不返回 Google 系列的 AAAA 记录） 
</code></pre></li>
<li>ns.ipv6.uni-leipzig.de （西欧地区适用）

<pre><code>  2001:638:902:1::10
  139.18.25.34 
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM使用pathogen]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/13/vimshi-yong-pathogen/"/>
    <updated>2012-06-13T18:56:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/13/vimshi-yong-pathogen</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM undo记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/12/vim-undoji-lu/"/>
    <updated>2012-06-12T21:31:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/12/vim-undoji-lu</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解计算机系统-笔记 Ch2]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji-2/"/>
    <updated>2012-06-12T03:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji-2</id>
    <content type="html"><![CDATA[<p>计算机的表示法是用有限数量的位来完成对一个数字的编码，因此当结果太大时，将会溢出（overflow），整数运算具有结合性但是浮点数的运算是不可结合的。附录中有演示了书中提到的溢出和浮点数结合的c源代码。</p>

<p>gcc编译选项指定c语言的版本：</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">c版本      </th>
<th align="center">GCC命令行选项  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">GNU89      </td>
<td align="center">无， -std=gnu89</td>
</tr>
<tr>
<td></td>
<td align="center">ANSI, ISO C90</td>
<td align="center"> -ansi, -std=c89</td>
</tr>
<tr>
<td></td>
<td align="center">ISO C99    </td>
<td align="center">-std=c99</td>
</tr>
<tr>
<td></td>
<td align="center">GNU 99     </td>
<td align="center">-std=gnu99</td>
</tr>
</tbody>
</table>


<!--more-->


<h2>信息存储</h2>

<h2>附录</h2>

<p>c代码</p>

<figure class='code'><figcaption><span>overflow溢出代码  (overflow.c)</span> <a href='http://xiongbupt.github.com/downloads/code/c/overflow.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include   &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="mi">200</span> <span class="o">*</span> <span class="mi">300</span> <span class="o">*</span> <span class="mi">400</span> <span class="o">*</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mf">3.14</span> <span class="o">+</span> <span class="mf">1e20</span><span class="p">)</span> <span class="o">-</span> <span class="mf">1e20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;the b is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">b</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;the a is %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="mf">3.14</span> <span class="o">+</span> <span class="p">(</span><span class="mf">1e20</span> <span class="o">-</span> <span class="mf">1e20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span> <span class="p">(</span> <span class="s">&quot;the c is %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">c</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>              <span class="cm">/* ----------  end of function main  ---------- */</span>
</span></code></pre></td></tr></table></div></figure>


<p>perl代码</p>

<figure class='code'><figcaption><span>perl 10进制转16进制脚本  (d2h)</span> <a href='http://xiongbupt.github.com/downloads/code/perl/d2h'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@ARGV</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">printf</span><span class="p">(</span><span class="s">&quot;%d\t = 0x%x\n&quot;</span><span class="p">,</span> <span class="nv">$ARGV</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="nv">$ARGV</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>perl 16进制转10进制脚本  (h2d)</span> <a href='http://xiongbupt.github.com/downloads/code/perl/h2d'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@ARGV</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$val</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="nv">$ARGV</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>    <span class="nb">printf</span><span class="p">(</span><span class="s">&quot;0x%x\t = %d\n&quot;</span><span class="p">,</span> <span class="nv">$val</span><span class="p">,</span> <span class="nv">$val</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解计算机系统-笔记 Ch1]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji/"/>
    <updated>2012-06-12T03:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/12/shen-ru-li-jie-ji-suan-ji-xi-tong-bi-ji</id>
    <content type="html"><![CDATA[<h2>计算机系统漫游</h2>

<p>信息就是<code>位</code>加<code>上下文</code>。<br/>
由gcc处理的程序包括四个步骤，这四个步骤的处理程序分别是：预处理器、编译器、汇编器、链接器，对应的四个阶段分别是：预处理阶段（将头文件、预处理指令插入到源代码中），编译阶段（将c文件生成为汇编语言文件），汇编阶段（将汇编语言翻译成为机器文件），链接阶段（将各个目标代码合并生成一个可执行程序）。</p>

<p>了解编译系统的工作流程的好处：</p>

<ul>
<li>优化程序性能；</li>
<li>理解链接时出现的错误；</li>
<li>避免安全漏洞。</li>
</ul>


<!--more-->


<p>寄存器文件是一个小的存储设备，由一些字长为1的寄存器组成，每个寄存器有唯一的名字。</p>

<p>指令集结构与微体系结构的区别：指令集结构描述的是每条机器代码指令的效果；而微体系结构描述的是处理器实际上是如何实现的。</p>

<p>操作系统通过几个基本抽象概念（进程、虚拟存储器和文件）来实现两个功能：</p>

<ul>
<li>防止硬件被失控的应用程序滥用；</li>
<li>向应用程序提供简单一致的机制来控制复杂而又大相径庭的低级硬件设备。</li>
</ul>


<p>文件是对I/O设备的抽象表示，虚拟存储器是对主存储器和磁盘I/O设备的抽象表示，进程则是对处理器、主存和I/O设备的抽象表示。</p>

<p>进程是操作系统对一个正在运行的程序的一种抽象。操作系统在多个进程间进行交错执行的机制称为上下文切换；而操作系统保持跟踪进程运行所需要的所有状态信息，这些状态信息便是上下文。</p>

<p>虚拟存储器抽象中，每个进程看到的是一致的存储器，称为虚拟地址空间。对Linux系统来说，地址空间最上面的区域是为操作系统中的代码和数据保留的。地址空间的底部存放的是用户进程的代码和数据。</p>

<p>每个进程看到的虚拟地址空间是由大量准确重复定义的区构成的，每个区有专门的功能。从地址的最下到最上分别是：程序代码和数据区，堆，共享库，栈，内核虚拟存储器。对于所有的进程来说，代码是从同一个固定的地址开始，在程序一开始运行时，程序代码和数据区的大小便是固定的，但是堆和栈的大小是可变的，内核虚拟存储器总是常驻内存中，是操作系统的一部分。</p>

<p>文件就是字节序列，它向应用程序提供了一个统一的视角来看待系统中可能含有的所有的各式各样的I/O设备。</p>

<p>系统是硬件和系统软件互相交织的集合体，它们必须共同协作以达到运行应用程序的最终目的。</p>

<p>并发（concurrency）是一个通用的概念，指一个同时具有多个活动的系统；并行（parallelism）指的是用并发使一个系统运行的更快。并发一共有三个层级：</p>

<ul>
<li>线程即并发；</li>
<li>指令集并发；</li>
<li>单指令、多数据并发。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UTICODE编码记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/11/uticodebian-ma-ji-lu/"/>
    <updated>2012-06-11T11:29:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/11/uticodebian-ma-ji-lu</id>
    <content type="html"><![CDATA[<p>今天查看师兄以前写的笔记，中间看到一个UNICODE和UTF-8编码的内容，于是在网上找了下资料，现在对这点有一点点了解，主要参考了<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">阮老师的这篇文章</a>，先记录下笔记吧。</p>

<h2>UNICODE编码由来</h2>

<p>在20世纪60年代，美国指定了ASCII编码体系，将英语字符与二进制位的关系做了统一的规定，这就是ASCII编码，并且一直沿用到今天。ASCII一共规定了128个字符的编码，只占用了一个字节的后7位，最高位始终为0。</p>

<p>但是不同的国家的字符符号不一样，为了适应这种情况，就出现了UNICODE。<br/>
UNICODE目前可以容纳100多万个符号，每个符号的编码都不一样。</p>

<!--more-->


<h2>UNICODE的问题</h2>

<p>UNCIDOE仅仅是一个符号集，它仅仅规定了符号的二进制代码，并没有规定符号如何存储。这就造成了下面两种结果：</p>

<ul>
<li>出现了UNICODE的多种存储方式；</li>
<li>UNICODE在很长时间无法推广，直到互联网出现。</li>
</ul>


<h2>UTF-8</h2>

<p>目前UTF-8（UCS Transformation Format-8-bit）是互联网使用最广的一种编码，在<a href="http://en.wikipedia.org/wiki/UTF-8" title="WIKI UTF-8">WIKI</a>上其说明UTF-8是为了向后兼容ASCII码，同时也是为了避免在UTF-16和UTF-32中出现的复杂的大端序、小端序和字节符号序列，具统计目前有超过一半的Web网页使用的是UTF-8编码格式。IETF工作组也要求所有的网络协议表明字符集所使用的编码并且要求必须支持UTF-8。</p>

<p>最开始UTF-8的设计图可以在下表中清晰的反应出来：</p>

<table>
<thead>
<tr>
<th></th>
<th align="right">Bits</th>
<th align="left">Last Code Point</th>
<th align="center">Byte 1</th>
<th align="center">Byte 2</th>
<th align="center">Byte 3</th>
<th align="center">Byte 4</th>
<th align="center">Byte 5</th>
<th align="center">Byte 6</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="right">7   </td>
<td align="left">U+007F     </td>
<td align="center">0xxxxxxx</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">11  </td>
<td align="left">U+07FF     </td>
<td align="center">110xxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">16  </td>
<td align="left">U+FFFF     </td>
<td align="center">1110xxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">21  </td>
<td align="left">U+1FFFFF   </td>
<td align="center">11110xxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">25  </td>
<td align="left">U+3FFFFFF  </td>
<td align="center">111110xx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td></td>
</tr>
<tr>
<td></td>
<td align="right">31  </td>
<td align="left">U+7FFFFFFF </td>
<td align="center">1111110x</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx|</td>
</tr>
</tbody>
</table>


<p>最开始UTF-8的设计如上图所示，但是在<a href="http://tools.ietf.org/html/rfc3629" title="rfc3629">RFC 3629</a>中UTF-8被截短了，目前UTF-8的最大值为U+10FFFF，因此所有的5字节和6字节的编码都被取消掉了。</p>

<p>UTF-8的编码即是将UNICODE对应的编码值以上表的方式编码出来即可。因此所有的ASCII码都是以一个字节的方式编码，其他的字符集会根据对应的UNICODE的编码值进行编码。比如<code>美</code>对应的UNICODE的值为7F8E，在上表中可以查看出其使用3字节编码即可，7F8E的二进制表示为0111 1111 1000 1110因此其UTF-8的编码为E7 BE 8E。就是将UNICODE的二进制值填充到UTF-8中的x上，完成编码。 <br/>
注意，UTF-8仅仅是UNICODE的一种编码方式。</p>

<h2>UTF-8的bomb字符</h2>

<p>在编辑器打开一个文本文件时，其是怎么判断打开文件的编码格式？下面是个人的理解，编辑器应该会对打开的文件进行编码猜测，但是如果文件没有提供对应的编码标志的话，其就会按照自己的猜测文件编码格式将文本文件打开。如果编辑器猜测的编码与文件的实际编码不一致，就会出现乱码现象。但是如果文本文件提供了自身的编码方式，并且编辑器也可以理解即解释这种编码方式的话，应该就可以将文本文件按照正确的形式显现出来。</p>

<p>上面的那段主要是为了引出UTF-8的bomb字符。参考<a href="http://www.i-alive.com/post/8/">这篇博客</a>，可以知道UTF-8的bomb为字符：EF BB BF。按照文中的方式，在VIM中使用16进制的方式<kbd>:%!xxd</kbd>，将文本文件打开，可以看出对应文字的UTF-8编码，在自己的环境下，使用的是UTF-8的编码格式，VIM似乎就已经将该bomb值去掉了。但是通过设置<kbd>:set bomb</kbd>可以将bomb保留，通过<kbd>:set nobomb</kbd>可以将文件的bomb去除。</p>

<p>在这种情形下想到以前从Linux系统向Windows系统下拷贝文本文件时，有时候会出现乱码现象，猜想会不会是由于VIM将文件的bomb去除了，而Windows使用的编码默认不是UTF-8编码，其编辑器猜测编码的格式猜测错了，导致乱码，于是在Linux系统下拷贝了两个简单的带有汉字的文件到Windows系统下，这两个文件分别使用<kbd>:set bomb</kbd>和<kbd>:set nobomb</kbd>的方式将UTF-8的编码信息保留和去除。</p>

<p>在Windows下使用记事本打开这两个文件时，汉字都可以正常的显示，但是由于Linux和Windows的换行方式不一致，会出现一些黑的方框；在写字板中打开文件时，带有bomb编码信息的文本文件可以正常的显示汉字，但是去除了bomb信息的文本文件出现了乱码。</p>

<p>上面的现象应该可以说明Windows下面的记事本猜测编码格式正确，但是写字板猜测错误，可写字板对Linux下的换行符可以正常的显示。如果为了在Windows下正确的打开Linux下带有中文字符的文本文件，同时换行符也正常显示的话，可以在保存文件之前输入<kbd>:set bomb</kbd>将文本文件的编码格式保存下。</p>

<h3>附录</h3>

<p>VIM中使用16进制的方式打开文件 <kbd>:%!xxd</kbd>   <br/>
VIM中在打开16进制的方式中编辑完文件之后保存 <kbd>:%!xxd -r</kbd>  <br/>
VIM保存UTF-8文件的bomb信息 <kbd>:set bomb</kbd>   <br/>
VIM中去除文件的bomb信息 <kbd>:set nobomb</kbd>    <br/>
UTF－8：一个汉字＝3个字节</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS实现之保护模式]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/10/osshi-xian-zhi-bao-hu-mo-shi/"/>
    <updated>2012-06-10T20:57:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/10/osshi-xian-zhi-bao-hu-mo-shi</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nasm摘要]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/10/nasmzhai-yao/"/>
    <updated>2012-06-10T15:22:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/10/nasmzhai-yao</id>
    <content type="html"><![CDATA[<p>还是为了看<a href="http://book.douban.com/subject/3735649/" title="一个操作系统的实现">这本书</a>，又找了下nasm的学习资料，在网上找到了这个<a href="http://www.nasm.us/doc/nasmdoc0.html" title="nasm手册">网址</a>，应该是nasm的官方参考手册，重点打算看下前面三章，做下笔记。</p>

<h2>介绍</h2>

<h3>什么是NASM</h3>

<p>NASM是一种面向80x86和x86-64的新型汇编语言，其出现主要是为了可移植性和可修改性。</p>

<!--more-->


<h2>运行NASM</h2>

<h3>NASM语法</h3>

<p><kbd>nasm -f <format> <filename> [-o <output>]</kbd></p>

<h4><kbd>-o</kbd>选项：指定输出文件名</h4>

<p>NASM会根据文件的名字自动来生成输出文件名，对于WIN32和Unix系列输出的文件名的方式不一样，但是都是会将后缀去掉，NASM不关心后缀究竟是什么，只是按照不同的平台输出对应的后缀名。<br/>
如果指定了<kbd>-o</kbd>选项，将会按照<kbd>-o</kbd>的选项的文件名产生文件，如果<kbd>-o</kbd>指定的文件已经存在则会将已存在的文件覆盖除非指定的输出的文件名为汇编源文件，在这种情况下将会输出警告，同时NASM将会生成一个名为<kbd>nasm.out</kbd>的文件。在<kbd>-o</kbd>选项和输出的文件名之间可以有空格也可以没有。</p>

<h4><kbd>-f</kbd>选项指定输出文件的格式</h4>

<p><kbd>-f</kbd>选项指定输出文件的格式，如果没有指定的话，NASM将会按照其默认格式输出，一般输出的是bin格式。在<code>-f</code>和输出格式之间的空格是可选的，比如<kbd>-f elf</kbd>和<kbd>-felf</kbd>都是合法的。</p>

<h4><kbd>-l</kbd>选项生成文件清单</h4>

<p>如果指定-l选项，将会生成一个汇编生成的文件。在该文件，左侧是地址和产生的代码，右侧是实际的汇编代码。</p>

<h4><kbd>-M</kbd>选项生成Makefile的依赖关系</h4>

<p>如果使用该选项，将会在标准输出上生成Makefile的依赖关系。</p>

<h4><kbd>-MG</kbd>选项生成Makefile的依赖关系</h4>

<p>该选项和上面的选项的区别在与如果存在一个不存在的文件的依赖关系，它将会假定产生了该文件，同时将未加文件前缀的名字输出到标准输出上。</p>

<h4><kbd>-MF</kbd>选项将Makefile的依赖关系输出到文件</h4>

<p>这个选项一般和-M或者-MG同时使用，将依赖关系生成一个文件。<br/>
nams -M -MF myfle.dep myfile.asm</p>

<h4><kbd>-MD</kbd>选项汇编并且生成依赖关系</h4>

<p>-MD选项可以作为-M和-MF的联合体。但是与-M或者-MG不同的是，-MD选项不会禁止汇编器的正常操作。比如：<br/>
nasm -f elf -o myfile.o -MD myfile.dep myfile.asm</p>

<h4><kbd>-MT</kbd>选项：目的文件文件名</h4>

<p>功能与-o一样。</p>

<h4><kbd>-MQ</kbd>选项：指定目的文件文件名</h4>

<p>功能与-MT类似，只是其指定了被引用的字符具有特殊含义。</p>

<h4><kbd>-MP</kbd>选项：省略中间输出</h4>

<p>使用该选项将会省略中间的输出。</p>

<h4><kbd>-F</kbd>选项：选择Debug的格式</h4>

<h4><kbd>-g</kbd>选项：允许调试信息</h4>

<h4><kbd>-x</kbd>选项：选择生成错误报告的格式</h4>

<h4><kbd>-z</kbd>选项：将错误信息输出到文件</h4>

<h4><kbd>-s</kbd>选项：将错误信息输出到标准输出</h4>

<h4><kbd>-i</kbd>选项：在搜索目录中添加搜索路径</h4>

<h3>MASM用户指南</h3>

<p>下文主要介绍NASM与MASM的区别</p>

<h4>NASM区分大小写</h4>

<p>一个最简单的区别就是NASM是区分大小写的。</p>

<h4>NASM对内存的使用需要使用方括号</h4>

<p>与MASM相比较来说，NASM的目的是对所有语句，尽可能的将一条语句与对应的机器码对应起来。对内存地址的引用都需要使用中括号。相对于MASM中的间接寻址等方式，NASM中的所有和内存相关的操作均需要添加中括号。因此在NASM中也就没有<code>offset</code>这样的关键字，比如在MASM中的<code>mov ax, table[bx]</code>在NASM中是非法的，必须转为<code>mov ax, [table+bx]</code>。</p>

<h4>NASM不支持存储变量类型</h4>

<p>在MASM中，对变量的说明的同时还指定了变量的类型，但是NASM中仅仅记录了变量的开始位置，不会记录任何有关变量类型的说明。因此在对变量赋值操作时，需要指定赋值的大小，因此NASM不支持例如<code>LODS, MOVS, STOS, SCAS, CMPS, INS, OUTS</code>等指令，而仅仅支持<code>LODSB, MOVSW, SCASD</code>，这几种支持的操作都明确指定了操作数的大小。</p>

<h4>NASM不使用<kbd>ASSUME</kbd></h4>

<p>作为NASM的一个简化动机，NASM不支持使用<kbd>ASSUME</kbd>，NASM不会跟踪在段寄存器中存放的是什么值，并且不会自动生成段前缀。</p>

<h4>NASM不支持内存模型</h4>

<p>NASM不支持16比特的内存模型，程序员自己负责<code>jmp</code>等指令是否为近转移或是远转移。同时对于<code>RET</code>指令，也是程序员自己负责。NASM将<code>RET</code>作为<code>RETN</code>的一个可选模式。</p>

<h4>浮点数的区别</h4>

<p>NASM使用不同的名字来命名浮点数，在MASM中，对于浮点数将会命名为类似于<code>ST(0)</code>或<code>ST(1)</code>等类似的方式，可在NASM中，将会命名为<code>st0</code>，<code>st1</code>等方式。</p>

<h4>其他区别</h4>

<p>由于历史的原因，NASM使用关键字<kbd>TWORD</kbd>而MASM使用的是<kbd>TBYTE</kbd>。<br/>
除了上述区别之外，宏和指令性的工作在MASM和NASM中也是不同的。</p>

<h2>NASM语言</h2>

<h3>NASM语言的布局</h3>

<figure class='code'><figcaption><span>NASM语言的布局  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">label:</span>  <span class="nf">instruction</span>     <span class="nv">operands</span>        <span class="c1">;comment</span>
</span></code></pre></td></tr></table></div></figure>


<p>NASM语句中空格是可以任意多的。NASM使用\来作为一行的换行符指示后面还是当前行的继续。</p>

<h3>伪指令</h3>

<p>NASM中支持的伪指令包括<kbd>DB,DW,DD,DQ,DT,DO</kbd>和<kbd>DY；RESB，RESW，RESD，RESQ，REST，RESO和RESY</kbd>；以及<kbd>INCBIN，EQU，TIMES</kbd></p>

<h4>DB及同类：声明已初始化数据</h4>

<h4>RESB及同类：声明未初始化数据</h4>

<h4>INCBIN：包含而外的二进制文件</h4>

<h4>EQU：定义常量</h4>

<h4>TIMES：重复指令或数据</h4>

<h3>有效的地址</h3>

<p>语法非常简单，就是在有效地址的变量加上中括号即可。</p>

<h3>常量</h3>

<p>NASM包括四种类型的常量，分别是数字、字符、字符串和浮点数</p>

<h3>表达式</h3>

<p>在NASM中的表达式与C语言中的类似。表达式被当做64位整型数计算然后再被调整到合适的尺寸。NASM在表达式中支持两个特殊的符号，用来计算当前汇编语言的位置，分别是<kbd>$</kbd>和<kbd>$$</kbd>操作符。<br/>
<kbd>$</kbd>操作符用来计算包含该符号的表达式在汇编语言中的起始位置；<kbd>$$</kbd>用来计算当前区域的其实位置。所以可以通过使用<kbd>$-$$</kbd>来计算当前位置与段起始处的距离。</p>

<h4><kbd>|</kbd>按位或</h4>

<h4><kbd><sup></kbd>按位异或</sup></h4>

<h4><kbd>&amp;</kbd>按位与</h4>

<h4><kbd>>></kbd>和<kbd>&lt;&lt;</kbd>移位操作符</h4>

<h4><kbd>+</kbd> <kbd>-</kbd>：加减操作符</h4>

<h4><kbd>*</kbd>,<kbd>/</kbd>,<kbd>//</kbd>,<kbd>%</kbd>, <kbd>%%</kbd>：乘法和除法表达式</h4>

<h4>一元操作符：<kbd>+</kbd>,<kbd>-</kbd>,<kbd>~</kbd>,<kbd>!</kbd>,<kbd>SEG</kbd></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress增加分类标签]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/08/octopresszeng-jia-fen-lei-biao-qian/"/>
    <updated>2012-06-08T17:17:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/08/octopresszeng-jia-fen-lei-biao-qian</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress代码高亮]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/08/octopressdai-ma-gao-liang/"/>
    <updated>2012-06-08T08:27:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/08/octopressdai-ma-gao-liang</id>
    <content type="html"><![CDATA[<p>现在博客已经基本搭建完毕，下面对从<code>jekyll bootstrap</code>搬迁到做一个基本介绍。首先是代码高亮部分，下面的文章主要来自于<a href="http://octopress.org/docs/blogging/code/" title="Octopress代码高亮">Octopress关于代码高亮部分</a>。文章主要是对上面的内容进行一个简单的翻译，以及简单介绍从<code>jekyll bootstrap</code>上面的代码移动到<code>Octopress</code>上面做一个简单的介绍。</p>

<h2>共享代码片段</h2>

<p>在博客上共享代码片段应该是简单的，并且代码应该具有简单的高亮功能。Octopress也具有这种功能，在<code>jekyll</code>上，其使用的是<code>pygment</code>来实现代码高亮的功能，Octopress实现的更好。在Octopress上面有下面几种选择：</p>

<ul>
<li>使用<a href="http://ethanschoonover.com/solarized" title="Solarized高亮">Solarized高亮</a>主题来实现（该方法未尝试，实际上不知道怎么弄，只是凭借个人的猜测）。</li>
<li>使用Gist的代码内嵌。</li>
<li>从自己的文件系统中插入代码片段，该代码具有下载链接。</li>
<li>简单的内嵌代码块带有<code>&lt;div class='bogus-wrapper'&gt;&lt;notextile&gt;&lt;figure&gt;</code>和<code>&lt;figcaption&gt;</code>和可选的下载链接。</li>
<li>Pygments caching（似乎还是使用Pygnment来实现代码高亮）。</li>
<li>通过javascript脚本使得代码具有行号。</li>
</ul>


<!--more-->


<h3>Solarized高亮</h3>

<p>这部分内容自己没有尝试，待更新。</p>

<h3>反引号的代码块</h3>

<p>同时使用<code>backtick_codelock</code>过滤器，可以使用Github的最适用的代码高亮块。使用三个反引号开始，后面跟着一个空格，接下来是高亮语言，具体语法如下所示：</p>

<pre><code>  ``` [language] [title] [url] [link text]
  code snippet
  ```
</code></pre>

<p>按照上述方式便可以对相应的代码块进行高亮，如下面的例子。</p>

<h4>example1（原文)</h4>

<pre><code> ```
 $sudo give me a hug
 ```
</code></pre>

<p>按照上面的方式在文本中输入之后，产生的效果如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo give me a hug</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>example2带有说明和连接</h4>

<pre><code> ``` ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
 class Fixnum
   def prime?
     ('1' * self) !~ /^1?$|^(11+?)\1+$/
   end
 end
 ```
</code></pre>

<p>产生的代码片段如下：</p>

<figure class='code'><figcaption><span>Discover if a number is prime </span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Gist代码内嵌</h3>

<p>当使用这种方式的代码高亮时，仅仅需要的是gist的id，对gist不了解的可以上google搜索下，个人的理解是，gist对每段用户上传的代码段都会有一个对应的id，当用户给出对应的代码的id后，将会从gist上面下载对应的已经高亮的html文件，最终在用户的页面上显示出来。</p>

<h4>语法</h4>

<pre><code> { % gist gist_id [filename] %}
</code></pre>

<h4>example</h4>

<pre><code> { % gist 996818 %}
</code></pre>

<p>上述代码的片段在Octopress中的markdown文件中输入之后，得到的效果如下：</p>

<div><script src='https://gist.github.com/996818.js?file='></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>


<p>如果一个gist的id对应有多个文件，这时需要对想要高亮的文件添加文件名，具体语法如下所示：</p>

<pre><code>  { % gist 1059334 svg_bullets.rb %}
  { % gist 1059334 usage.scss %}
</code></pre>

<p>总体来说，gist代码高亮是很简单的，只是需要将代码上传到<a href="https://gist.github.com/">gist</a>，然后获取相应的id然后按照上面的语法进行设置即可。只是每次在写博客时，都需要对博客文章中的代码拷贝到网址上生成，在没有网时，代码高亮比较麻烦。</p>

<h3>从本地文件中引入代码</h3>

<p>这种方式在Arch上面有个小问题，在Arch上的报错如下所示：</p>

<figure class='code'><figcaption><span>Arch error</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Building site: <span class="nb">source</span> -&gt; public
</span><span class='line'>  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1
</span><span class='line'>    import sys; print sys.executable
</span><span class='line'>                        ^
</span><span class='line'>SyntaxError: invalid syntax
</span></code></pre></td></tr></table></div></figure>


<p>上网搜索之后在<a href="http://blog.gonzih.org/blog/2011/09/21/fix-octopress-pygments-error-on-arch-linux/">该网址</a>发现解决方法。 <br/>
这种方式需要使用python2来完成代码高亮的操作，由于Arch的python指向的是python3，而python3无法完成该功能，因此需要在<code>plugin</code>文件夹中再添加一个新文件，指定在<code>Octopress</code>运行时使用的是python2，具体增加的文件内容如下所示，文件的名字为<code>ruby_python_arch_linux_fix.rb</code></p>

<figure class='code'><figcaption><span>Set the ruby to run python2.7 (ruby_python_arch_linux_fix.rb)</span> <a href='http://xiongbupt.github.com/downloads/code/ruby/ruby_python_arch_linux_fix.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubypython&#39;</span>
</span><span class='line'>    <span class="no">RubyPython</span><span class="o">.</span><span class="n">configure</span> <span class="ss">:python_exe</span> <span class="o">=&gt;</span> <span class="s1">&#39;python2.7&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在完成该操作之后，仍然报错，得到如下错误：</p>

<figure class='code'><figcaption><span>Error message</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>LoadError: Could not open library <span class="s1">&#39;lib.so&#39;</span>: lib.so: cannot open shared object file: No such file or directory
</span></code></pre></td></tr></table></div></figure>


<p>参考<a href="https://github.com/tmm1/pygments.rb/issues/10">该网址</a>的由<code>elidos</code>提出的解决方法可以知道是<code>rubypython</code>自身的bug，需要修复，具体修改文件在Arch上面为<code>/usr/lib/ruby/gems/1.9.1/gems/rubypython-0.5.3/lib/rubypython/pythonexec.rb</code>，修改位置大概在126行左右，修改后的内容如下所示：</p>

<figure class='code'><figcaption><span>fix the rubypython bug</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--126 %x(#{@python} -c &quot;#{command}&quot;).chomp if @python</span>
</span><span class='line'><span class="gi">++126 %x(&quot;#{@python} -c #{command}&quot;).chomp if @python</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成该修改之后，便可以使用这种包含代码的方式来进行代码高亮。 <br/>
使用这种方式的语法也参见<a href="http://octopress.org/docs/blogging/code/" title="Octopress代码高亮">octopress手册</a>，此处不再进行详细说明，这种方式的代码是单独存放成一个文件保存在本地系统下，当代码长度较长，又不想放在博客的正文中时，使用该方法比较好。<br/>
简单记录下这种方式的语法如下所示：（目前不知道为什么，在octopress中输入{ %的方式都会进行代码解析，所以上面的{ %都进行了添加了<code></code>来取消，在实际文章中输入的时候，将<code></code>取消掉）</p>

<pre><code>{ % include_code [title] [lang:language] path/to/file %}
</code></pre>

<p>其中的中括号的内容是可选的，具体语言便是这种方式，当需要强制高亮时，需要指定<code>lang:</code>这个参数，很好用。</p>

<h3>使用Code Block的方式</h3>

<p>目前自己的博客这种方式用的比较多，前面写的文章目前全部修改成为了这种方式，感觉这种方式和<code>pygnment</code>的方式差不多，之前全部采用的是<code>pygnment</code>的方式，利用正则表达式把所有文章的代码高亮全部改成了使用<code>code block</code>。它的具体语法如下所示：（与<code>pygnment</code>很相似，指定语言即可）</p>

<pre><code>  { % codeblock [title] [lang:language] [url] [link text] %}
  code snippet
  { % endcodeblock %}
</code></pre>

<p>和之前描述的类似，中括号的内容是可选的。</p>

<h4>使用正则表达式替换</h4>

<p>这种方式可以替换博客内容，使得博客中所有文章的代码高亮使用<code>Code Block</code>。自己使用的是<code>sed</code>来完成的操作，似乎都没有用到正则表达式，只是简单的替换，做个简单的记录吧。</p>

<h5>替换方法</h5>

<p>进入到<code>source/_posts</code>目录下，在终端输入如下代码：</p>

<figure class='code'><figcaption><span>Sed查看文章代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -n <span class="s1">&#39;s/\(\ highlight\ \)/\1/p&#39;</span> *
</span></code></pre></td></tr></table></div></figure>


<p>上面将会把当前目录下的含有{\% highlight的文件的那行都显示出来，中间会将含有该特殊字符的行都打印出来，中间可以看到自己的博客内容都用到了哪些类型文件的语法高亮，将对应的代码高亮进行替换即可。<br/>
其实这种方式就是简单的搜索替换，应该算不上使用正则表达式了，只是写下来做下笔记了，防止以后再用具体操作如下所示：</p>

<figure class='code'><figcaption><span>Sed替换文件内容</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -i <span class="s1">&#39;s/\(\ highlight\ bash %}\)/\ codeblock\ lang:bash\ %}/&#39;</span> *
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加标签]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/07/octopress-add-tag/"/>
    <updated>2012-06-07T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/07/octopress-add-tag</id>
    <content type="html"><![CDATA[<h2>前因</h2>

<p>由于之前参考中文的搜索，结果都不理想，推翻重来，直接使用<a href="http://www.google.com/">google</a>使用<code>octopress tag</code>关键词搜索到的<a href="http://aijazansari.com/2012/01/07/tag-clouds-with-octopress/">第一个返回结果</a>来修改，下面记录如下。</p>

<h3>显示所有的便签列表</h3>

<p>修改<code>source/_layouts/post.html</code>文件，使它们include一个名字为<code>tags.html</code>的新文件。</p>

<!--more-->


<p>创建一个新文件<code>source/_includes/post/tags.html</code>，整个文件的内容如下所示：</p>

<figure class='code'><figcaption><span>source/_includes/post/tags.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tag_list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Tags:
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;tags_ul&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/tags/Octopress/&quot;</span><span class="nt">&gt;</span>Octopress<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/tags/Learning/&quot;</span><span class="nt">&gt;</span>Learning<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/tags/Github/&quot;</span><span class="nt">&gt;</span>Github<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>sass/custom/_styles.css</code>文件中添加如下内容：</p>

<figure class='code'><figcaption><span>sass/custom/_styles.css  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="nf">#tag_list</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">12pt</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#tags_ul</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#tags_ul</span> <span class="nt">li</span><span class="nd">:last-child:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#tags_ul</span> <span class="nt">li</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#tags_ul</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建tag文件和tag云</h3>

<p>使用作者提供的perl脚本文件，由于作者使用<code>Octopress</code>生成的文件是直接在public文件夹下面的，但是默认的<code>Octopress</code>生成的博客内容是在<code>/public/blog</code>文件夹下面的，因此作者的提供的perl文件需要进行一个小的改动，若没有改动将无法生成对应的tags，检查是否成功的办法是查看成功的生成了<code>source/_includes/custom/tag_cloud.html</code>文件，该文件的内容类似于下面的方式：</p>

<figure class='code'><figcaption><span>source/_includes/custom/tag_cloud.html   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;tag_cloud&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/tags/6LoWPAN/&quot;</span> <span class="na">title=</span><span class="s">&quot;1 entry&quot;</span> <span class="na">class=</span><span class="s">&quot;tag_1&quot;</span><span class="nt">&gt;</span>6LoWPAN<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/tags/Arch/&quot;</span> <span class="na">title=</span><span class="s">&quot;1 entry&quot;</span> <span class="na">class=</span><span class="s">&quot;tag_1&quot;</span><span class="nt">&gt;</span>Arch<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/tags/AWK/&quot;</span> <span class="na">title=</span><span class="s">&quot;1 entry&quot;</span> <span class="na">class=</span><span class="s">&quot;tag_1&quot;</span><span class="nt">&gt;</span>AWK<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>文章末尾附上修改后的<code>tagify.pl</code>文件。
在添加了该代码之后，整个生成tag的操作便是下面的步骤</p>

<figure class='code'><figcaption><span>生成tags操作  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>./tagify.pl
</span><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码只是需要在每次有新的tag加入的时候需要执行，如果新添加的博客文章没有使用新的tag，则不需要执行这个步骤，只需要按照正常的操作即可。<br/>
上面的操作一共干了三件事：</p>

<ul>
<li>生成<code>source/_includes/custom/tag_cloud.html</code>文件，文件内容如上所述。</li>
<li>对于每个tag标签，在对应的目录下生成一个<code>index.markdown</code>文件，如对于<code>Linux</code>这个标签，将会创建<code>source/tags/Linux/index.markdown</code>这样一个文件。</li>
<li>同时创建了一个<code>source/tags/index.markdown</code>的文件，可以在主页面被引用。</li>
</ul>


<h3>显示tag云标签</h3>

<p>为了在右侧显示云标签，需要修改<code>_config.yaml</code>文件，将<code>tag_cloud.html</code>文件添加到<code>default_asides</code>中，目前的博客内容没有显示该分类，若想添加云标签显示可以通过修改<code>_config.yml</code>通过添加该侧边栏完成该功能。<br/>
创建<code>source/_includes/asides/tag_cloud.html</code>文件，该文件包含了<code>soure/_includes/custom/tag_cloud.html</code>文件（该文件是由<code>tagify.pl</code>脚本文件生成的），文件的内容如下所示：</p>

<figure class='code'><figcaption><span>source/_includes/asides/tag_cloud.html  (tag_cloud.html)</span> <a href='http://xiongbupt.github.com/downloads/code/html/tag_cloud.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Tags<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tag_cloud&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     {% include custom/tag_cloud.html %}
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来修改<code>sass/custom/_styles.css</code>文件，添加标签的<code>css</code>示例，该文件内容如下所示：</p>

<figure class='code'><figcaption><span>sass/custom/_styles.css  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.tag_1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-weight</span><span class="o">:</span> <span class="m">200</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">10pt</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.tag_2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-weight</span><span class="o">:</span> <span class="m">200</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">12pt</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="nc">.tag_10</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-weight</span><span class="o">:</span> <span class="m">900</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">24pt</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后在导航控制文件<code>source/_includes/custom/navigation.html</code>中增加<code>Tags</code>标签，具体修改文件如下所示：</p>

<figure class='code'><figcaption><span>source/_includes/custom/navigation.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>+<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/tags/&quot;</span><span class="nt">&gt;</span>Tags<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about/&quot;</span><span class="nt">&gt;</span>About Me<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>完成上述操作之后，便可以在主页的首部出现一个<code>Tags</code>的导航键，同时可以添加<code>Tags</code>分类标签到页面右侧的侧边栏，目前Tags标签功能似乎不支持中文页面的分类，待测试。</p>

<h3>代码附录</h3>

<figure class='code'><figcaption><span>修改后的tagify.pl  (tagify.pl)</span> <a href='http://xiongbupt.github.com/downloads/code/perl/tagify.pl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">File::</span><span class="n">Find</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">HTML::</span><span class="n">TreeBuilder</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$octopress_root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$options_read</span> <span class="o">=</span> <span class="n">GetOptions</span><span class="p">(</span><span class="s">&quot;dir=s&quot;</span><span class="p">,</span> <span class="o">\</span><span class="nv">$octopress_root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">############################################################</span>
</span><span class='line'><span class="k">unless</span> <span class="p">(</span><span class="nv">$options_read</span> <span class="o">&amp;&amp;</span> <span class="nv">$octopress_root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;usage: tagify.pl --dir d\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;where d is the root octopress directory\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;   - the parent of source, public, etc.\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The tag cloud HTML gets saved into this file.</span>
</span><span class='line'><span class="c1"># This file is included by two others: </span>
</span><span class='line'><span class="c1">#  a) The file used for the sidebar aside</span>
</span><span class='line'><span class="c1">#  b) The page used to display all tags </span>
</span><span class='line'><span class="c1">#     (accessible as /tags/index.html)</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$custom_file</span> <span class="o">=</span> <span class="s">&quot;$octopress_root/source/_includes&quot;</span><span class="o">.</span>
</span><span class='line'>                  <span class="s">&quot;/custom/tag_cloud.html&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This is the data structure that contains all the tag </span>
</span><span class='line'><span class="c1"># data parsed by the HTML files.</span>
</span><span class='line'><span class="c1"># It&#39;s key is the tag name (not case-normalized).</span>
</span><span class='line'><span class="c1"># The value is another hash.  That hash has 2 keys:</span>
</span><span class='line'><span class="c1">#  count - number of pages with that tag</span>
</span><span class='line'><span class="c1">#  range_num - a number from 1 - 10 indicating </span>
</span><span class='line'><span class="c1">#              popularity (see below)</span>
</span><span class='line'><span class="c1">#  pages - an array of hashes</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#  Each hash in the pages array has 3 keys: </span>
</span><span class='line'><span class="c1">#  title - the HTML title of the post</span>
</span><span class='line'><span class="c1">#  file  - the full file name of the HTML file</span>
</span><span class='line'><span class="c1">#  categories - yet another hash</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#  The categories hash has two keys: </span>
</span><span class='line'><span class="c1">#  href - the url to the category page (as determined</span>
</span><span class='line'><span class="c1">#         by OctoPress)</span>
</span><span class='line'><span class="c1">#  text - the name of the category (as displayed by </span>
</span><span class='line'><span class="c1">#         Octopress)</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$tag_data</span>      <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This function populates the tag_data data structure</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="o">\&amp;</span><span class="n">getTags</span><span class="p">,</span> <span class="s">&quot;$octopress_root/public/blog&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Find the number of times the most popular tag is used</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$max</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1"># start with 1, not 0 to prevent a </span>
</span><span class='line'>              <span class="c1"># divide-by-zero error later</span>
</span><span class='line'>              <span class="c1"># if none of the posts have tags</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$tag</span> <span class="p">(</span><span class="nb">keys</span> <span class="nv">%$tag_data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">count</span><span class="p">}</span> <span class="o">=</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pages</span><span class="p">}});</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">count</span><span class="p">}</span> <span class="o">&gt;</span> <span class="nv">$max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$max</span> <span class="o">=</span> <span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">count</span><span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Assign each tag a range number from 1 - 10</span>
</span><span class='line'><span class="c1"># based on popularity.  This range number will</span>
</span><span class='line'><span class="c1"># be used along with CSS to print tags with</span>
</span><span class='line'><span class="c1"># the appropriate size.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$tag</span> <span class="p">(</span><span class="nb">keys</span> <span class="nv">%$tag_data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">range_num</span><span class="p">}</span> <span class="o">=</span>
</span><span class='line'>      <span class="nb">int</span><span class="p">((</span><span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">count</span><span class="p">}</span> <span class="o">/</span> <span class="nv">$max</span><span class="p">)</span>
</span><span class='line'>          <span class="o">*</span> <span class="mi">10</span>
</span><span class='line'>          <span class="o">+</span> <span class="mf">0.5</span><span class="p">);</span> <span class="c1"># nearest whole number</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">range_num</span><span class="p">}</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">range_num</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="c1"># we want 1-10, not 0-10</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write the tag cloud file</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="nb">open</span> <span class="p">(</span><span class="n">O</span><span class="p">,</span> <span class="s">&quot;&gt;$custom_file&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="nb">die</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">O</span> <span class="s">&quot;&lt;div id=&#39;tag_cloud&#39;&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># sort by tag name, case insensitive</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$tag</span> <span class="p">(</span><span class="nb">sort</span> <span class="p">{</span> <span class="nb">lc</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span> <span class="ow">cmp</span> <span class="nb">lc</span><span class="p">(</span><span class="nv">$b</span><span class="p">)}</span>
</span><span class='line'>                      <span class="nb">keys</span> <span class="nv">%$tag_data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># give each tag anchor a title, </span>
</span><span class='line'>    <span class="c1"># for screen readers and the like</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$plural</span> <span class="o">=</span> <span class="s">&quot;y&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">count</span><span class="p">}</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$plural</span> <span class="o">=</span> <span class="s">&#39;ies&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[&lt;a href=&quot;/blog/tags/$tag/&quot; ]</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[title=&quot;$tag_data-&gt;{$tag}-&gt;{count} entr$plural&quot; ]</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[class=&quot;tag_$tag_data-&gt;{$tag}-&gt;{range_num}&quot;&gt;]</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[$tag]</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[&lt;/a&gt;\n]</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">print</span> <span class="n">O</span> <span class="s">&quot;&lt;/div&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">close</span> <span class="n">O</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now save the individual tag files</span>
</span><span class='line'><span class="c1"># First, clear out the directory because we&#39;re gonna </span>
</span><span class='line'><span class="c1"># regenerate all the files.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$tag_dir</span> <span class="o">=</span> <span class="s">&quot;$octopress_root/source/blog/tags&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># If source/tags exists but is a file</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="nb">die</span> <span class="s">&quot;source/blog/tags is a file&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="n">f</span> <span class="nv">$tag_dir</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Create the directory if it doesn&#39;t exist</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!-</span><span class="n">d</span> <span class="nv">$tag_dir</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">mkdir</span> <span class="nv">$tag_dir</span><span class="p">;</span>
</span><span class='line'>    <span class="n">createTagsIndexMarkdown</span><span class="p">(</span><span class="nv">$tag_dir</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># Delete all directories under source/tags.</span>
</span><span class='line'>    <span class="c1"># We don&#39;t want to delete everything because we </span>
</span><span class='line'>    <span class="c1"># need to preserve tags/index.markdown in case </span>
</span><span class='line'>    <span class="c1"># something was modified there.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$dirs</span> <span class="o">=</span> <span class="sb">`find $tag_dir/* -type d`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@dirs</span> <span class="o">=</span> <span class="nb">split</span><span class="p">(</span><span class="sr">/[\r\n]+/</span><span class="p">,</span> <span class="nv">$dirs</span><span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$dir</span> <span class="p">(</span><span class="nv">@dirs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="sb">`/bin/rm -rf $dir`</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Make a file for each tag.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$tag</span> <span class="p">(</span><span class="nb">keys</span> <span class="nv">%$tag_data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">makeTagFile</span><span class="p">(</span><span class="nv">$tag</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">##  ####################################################</span>
</span><span class='line'><span class="c1">##  Functions</span>
</span><span class='line'><span class="c1">##  ####################################################</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">makeTagFile</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$tag</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">mkdir</span> <span class="s">&quot;source/blog/tags/$tag&quot;</span>
</span><span class='line'>      <span class="o">||</span>
</span><span class='line'>      <span class="nb">die</span> <span class="s">&quot;Couldn&#39;t make directory source/blog/tags/$tag&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">open</span> <span class="p">(</span><span class="n">O</span><span class="p">,</span> <span class="s">&quot;&gt; source/blog/tags/$tag/index.markdown&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">||</span>
</span><span class='line'>      <span class="nb">die</span> <span class="s">&quot;Can&#39;t open source/blog/tags/$tag/index.markdown&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="sx">qq^---</span>
</span><span class='line'><span class="sx">layout: page</span>
</span><span class='line'><span class="sx">title: Tag&amp;#58; $tag</span>
</span><span class='line'><span class="sx">footer: false</span>
</span><span class='line'><span class="sx">---</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;div id=&quot;blog-archives&quot; class=&quot;category&quot;&gt;</span>
</span><span class='line'><span class="sx">^</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$year</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Sort by file name descending</span>
</span><span class='line'>    <span class="c1"># This is the same as sorting by date descending</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$file</span> <span class="p">(</span>
</span><span class='line'>               <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">file</span><span class="p">}</span> <span class="ow">cmp</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">file</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>                    <span class="nv">@</span><span class="p">{</span><span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pages</span><span class="p">}})</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Get the year month and date</span>
</span><span class='line'>        <span class="c1">#</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$yyyy</span><span class="p">,</span> <span class="nv">$mm</span><span class="p">,</span> <span class="nv">$dd</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">file</span><span class="p">}</span> <span class="o">=~</span>
</span><span class='line'>            <span class="sr">m!(\d\d\d\d)/(\d\d)/(\d\d)/!</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># The HTML and associated logic here mimics</span>
</span><span class='line'>        <span class="c1"># the HTML of the category pages - print </span>
</span><span class='line'>        <span class="c1"># a H2 for every new year</span>
</span><span class='line'>        <span class="c1">#</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$yyyy</span> <span class="o">!=</span> <span class="nv">$year</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$year</span> <span class="o">=</span> <span class="nv">$yyyy</span><span class="p">;</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">O</span> <span class="s">&quot;&lt;h2&gt;$year&lt;/h2&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># Construct the URL &amp; date string</span>
</span><span class='line'>        <span class="c1">#</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">file</span><span class="p">};</span>
</span><span class='line'>        <span class="nv">$url</span> <span class="o">=~</span> <span class="sr">s/^$octopress_root\/public//</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$title</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">title</span><span class="p">};</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">@months</span> <span class="o">=</span> <span class="sx">qw ( </span><span class="n">x</span> <span class="n">Jan</span> <span class="n">Feb</span> <span class="n">Mar</span> <span class="n">Apr</span> <span class="n">May</span> <span class="n">Jun</span>
</span><span class='line'>                          <span class="n">Jul</span> <span class="n">Aug</span> <span class="n">Sep</span> <span class="n">Oct</span> <span class="n">Nov</span> <span class="n">Dec</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$mon</span> <span class="o">=</span> <span class="nv">$months</span><span class="p">[</span><span class="nv">$mm</span> <span class="o">*</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[</span>
</span><span class='line'><span class="sx">&lt;article&gt;</span>
</span><span class='line'><span class="sx">&lt;h1&gt;&lt;a href=&quot;$url&quot;&gt;$title&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="sx">&lt;time datetime=&quot;$yyyy-$mm-${dd}T00:00:00-06:00&quot; pubdate&gt;&lt;span class=&#39;month&#39;&gt;$mon&lt;/span&gt; &lt;span class=&#39;day&#39;&gt;$dd&lt;/span&gt; &lt;span class=&#39;year&#39;&gt;$yyyy&lt;/span&gt;&lt;/time&gt;</span>
</span><span class='line'><span class="sx">&lt;footer&gt;</span>
</span><span class='line'><span class="sx">&lt;span class=&quot;categories&quot;&gt;posted in </span>
</span><span class='line'><span class="sx">]</span><span class="p">;</span>
</span><span class='line'>        <span class="c1"># Print each category, separated by commas</span>
</span><span class='line'>        <span class="c1">#</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">O</span> <span class="nb">join</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nb">map</span> <span class="p">{</span> <span class="s">&quot;&lt;a href=&#39;$_-&gt;{href}&#39;&gt;$_-&gt;{text}&lt;/a&gt;&quot;</span> <span class="p">}</span>
</span><span class='line'>                <span class="nv">@</span><span class="p">{</span><span class="nv">$file</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">categories</span><span class="p">}}</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[&lt;/span&gt;</span>
</span><span class='line'><span class="sx">&lt;/footer&gt;</span>
</span><span class='line'><span class="sx">&lt;/article&gt;</span>
</span><span class='line'><span class="sx">]</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="s">&quot;&lt;/div&gt;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">close</span> <span class="n">O</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">getTags</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$</span><span class="nn">File::Find::</span><span class="nv">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Only parse files that look like posts</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="nv">$file</span> <span class="o">=~</span><span class="sr"> /\.html$/</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="nv">$file</span> <span class="o">=~</span><span class="sr"> </span>
</span><span class='line'><span class="sr">          /^$octopress_root\/public\/blog\/\d{4}\/\d{2}\/\d{2}\//</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Read the contents of the HTML file</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="nb">open</span> <span class="p">(</span><span class="n">HTML</span><span class="p">,</span> <span class="nv">$_</span><span class="p">)</span> <span class="o">||</span> <span class="nb">die</span> <span class="s">&quot;Can&#39;t open $file&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="sr">&lt;HTML&gt;</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">close</span> <span class="n">HTML</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$tree</span> <span class="o">=</span> <span class="nn">HTML::</span><span class="n">TreeBuilder</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="n">parse</span><span class="p">(</span><span class="nv">$contents</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Get the title</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$title</span> <span class="o">=</span> <span class="nv">$tree</span><span class="o">-&gt;</span><span class="n">look_down</span><span class="p">(</span><span class="n">_tag</span>  <span class="o">=&gt;</span> <span class="s">&quot;h1&quot;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">class</span> <span class="o">=&gt;</span> <span class="s">&quot;entry-title&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$title</span> <span class="o">=</span> <span class="nv">$title</span><span class="o">-&gt;</span><span class="n">as_trimmed_text</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Get the categories</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$category_ent</span> <span class="o">=</span> <span class="nv">$tree</span><span class="o">-&gt;</span><span class="n">look_down</span><span class="p">(</span><span class="n">_tag</span>  <span class="o">=&gt;</span> <span class="s">&quot;span&quot;</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">class</span> <span class="o">=&gt;</span> <span class="s">&quot;categories&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@as</span> <span class="o">=</span> <span class="nv">$category_ent</span><span class="o">-&gt;</span><span class="n">look_down</span><span class="p">(</span><span class="n">_tag</span>  <span class="o">=&gt;</span> <span class="s">&quot;a&quot;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">class</span> <span class="o">=&gt;</span> <span class="s">&quot;category&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@categories</span> <span class="o">=</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$a</span> <span class="p">(</span><span class="nv">@as</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">push</span><span class="p">(</span><span class="nv">@categories</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span> <span class="n">href</span> <span class="o">=&gt;</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="n">attr</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">),</span>
</span><span class='line'>              <span class="n">text</span> <span class="o">=&gt;</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="n">as_trimmed_text</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Get the tags</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$ul</span> <span class="o">=</span> <span class="nv">$tree</span><span class="o">-&gt;</span><span class="n">look_down</span><span class="p">(</span><span class="s">&quot;_tag&quot;</span><span class="p">,</span> <span class="s">&quot;ul&quot;</span><span class="p">,</span>
</span><span class='line'>                              <span class="s">&quot;id&quot;</span>  <span class="p">,</span> <span class="s">&quot;tags_ul&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$ul</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">my</span> <span class="nv">@items</span> <span class="o">=</span> <span class="nv">$ul</span><span class="o">-&gt;</span><span class="n">look_down</span><span class="p">(</span><span class="s">&quot;_tag&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;li&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$item</span> <span class="p">(</span><span class="nv">@items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$tag</span> <span class="o">=</span> <span class="nv">$item</span><span class="o">-&gt;</span><span class="n">as_trimmed_text</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1"># Finally, populate the data structure</span>
</span><span class='line'>            <span class="c1">#</span>
</span><span class='line'>            <span class="nb">push</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$tag_data</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$tag</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">pages</span><span class="p">}},</span>
</span><span class='line'>                <span class="p">{</span> <span class="n">title</span>      <span class="o">=&gt;</span> <span class="nv">$title</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">file</span>       <span class="o">=&gt;</span> <span class="nv">$file</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">categories</span> <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">@categories</span>
</span><span class='line'>          <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># no tags in this document</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nb">delete</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This function creates a default </span>
</span><span class='line'><span class="c1"># source/tags/index.markdown</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">sub </span><span class="nf">createTagsIndexMarkdown</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$tag_dir</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">open</span> <span class="p">(</span><span class="n">O</span><span class="p">,</span> <span class="s">&quot;&gt;$tag_dir/index.markdown&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">O</span> <span class="sx">qq[---</span>
</span><span class='line'><span class="sx">layout: page</span>
</span><span class='line'><span class="sx">title: Tags</span>
</span><span class='line'><span class="sx">footer: false</span>
</span><span class='line'><span class="sx">---</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;div class=&quot;tag_page&quot;&gt;</span>
</span><span class='line'><span class="sx"> {% include custom/tag_cloud.html %}</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span><span class='line'><span class="sx">]</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">close</span> <span class="n">O</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM用户手册27笔记]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/vim_help_read/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/vim_help_read</id>
    <content type="html"><![CDATA[<p>VIM的查找命令与模式，这章节和正则表达式相关，可以重点查阅下。</p>

<h2>大小写忽略</h2>

<p>ignorecase  忽视大小写<br/>
smartcase   若只有小写，可匹配大小写；若含有大写，则严格匹配  <br/>
特定模式中的大小写可以使用\C来严格匹配，\c可以用来通用匹配，不区分大小写</p>

<h2>无折返查找</h2>

<p><code>:set nowrapscan</code>简单的说就是在查找到文件结束处后不再返回文件开始处重新查找。</p>

<!--more-->


<h2>查找偏移</h2>

<p><code>/pattern/2</code>，这个查找将会在单词pattern的后两行。</p>

<ul>
<li>匹配一个可选项，使用<code>\=</code>，比如

<blockquote><p>/folders\=</p></blockquote></li>
</ul>


<p>匹配的是&#8221;folder&#8221;和&#8221;folders&#8221;</p>

<ul>
<li>指定重复次数时，使用<code>\{n,m}</code>这样的形式。匹配n到m次，包括n和m，相当于一个闭区间。</li>
<li>匹配尽可能少的字符使用&#8217;{-n,m}`。与上面的作用类似，区别在于尽可能少的匹配。</li>
</ul>


<h2>多选一</h2>

<p>或的运算符是<code>\|</code>。</p>

<h2>字符范围</h2>

<table>
<thead>
<tr>
<th></th>
<th align="left">项    </th>
<th align="left">匹配         </th>
<th align="center">相当于 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">\d </td>
<td align="left">数位         </td>
<td align="center">[0-9]</td>
</tr>
<tr>
<td></td>
<td align="left">\D </td>
<td align="left">非数位          </td>
<td align="center">[<code>^</code>0-9]</td>
</tr>
<tr>
<td></td>
<td align="left">\x </td>
<td align="left">十六进制数位 </td>
<td align="center">[0-9a-fA-F]</td>
</tr>
<tr>
<td></td>
<td align="left">\X </td>
<td align="left">非十六进制数位  </td>
<td align="center">[<code>^</code>0-9a-fA-F]</td>
</tr>
<tr>
<td></td>
<td align="left">\s </td>
<td align="left">空白字符       </td>
<td align="center">[  ]     (<code>&lt;Tab&gt;</code> 和 <code>&lt;Space&gt;</code>)</td>
</tr>
<tr>
<td></td>
<td align="left">\S </td>
<td align="left">非空白字符        </td>
<td align="center">[<code>^</code>  ]     (非 <code>&lt;Tab&gt;</code> 和 <code>&lt;Space&gt;</code>)</td>
</tr>
<tr>
<td></td>
<td align="left">\l </td>
<td align="left">小写字母       </td>
<td align="center">[a-z]</td>
</tr>
<tr>
<td></td>
<td align="left">\L </td>
<td align="left">非小写字母        </td>
<td align="center">[<code>^</code>a-z]</td>
</tr>
<tr>
<td></td>
<td align="left">\u </td>
<td align="left">大写字母       </td>
<td align="center">[A-Z]</td>
</tr>
<tr>
<td></td>
<td align="left">\U </td>
<td align="left">非大写字母        </td>
<td align="center">[<code>^</code>A-Z]</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress尝试记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/octopress_use/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/octopress_use</id>
    <content type="html"><![CDATA[<p>本文主要是参考Octopress的<a href="http://octopress.org/" title="OCTOPRESS 手册">官方网址</a>进行操作，之前使用了<a href="http://www.google.com/" title="GOOGLE">google</a>搜索了若干参考，但是操作之后出现了错误，推翻重来之后，写下这篇记录，方便自己以后使用。<br/>
首先介绍下自己的环境Arch，由于之前已经使用了github的个人博客，但是之前使用的是jekyll的方式，自己不会调整那些主题，感觉有些不方便，上网找了下，发现似乎Octopress相对来说比较简单，于是在这种情况下尝试使用Octopress。至于在github上创建个人博客主页，在这里不做说明，在Octopress环境下，自己相当不清楚。</p>

<!--more-->


<p>由于Arch已经安装了ruby，且版本是1.9.3高于octopress要求的1.9.2，使用<code>pacman</code>的方式安装了ruby之后便没有必要再安装ruby了。按照<code>arch wiki</code>中所说的方式安装rvm即可。在这些基本工作完成之后，开始安装Octopress。</p>

<h2>Octopress环境配置</h2>

<p>git clone git://github.com/imathis/octopress.git octopress<br/>
cd octopress    # If you use RVM, You&#8217;ll be asked if you trust the .rvmrc file (say yes).<br/>
gem install bundler<br/>
bundle install<br/>
rake install</p>

<h2>Github用户页面设置</h2>

<p>参照Octopress上的将页面部署到github的<a href="http://octopress.org/docs/deploying/github/" title="OCTOPRESS Github介绍">手册</a>。<br/>
Github Pages服务要求用户使用master分支作为Web服务器上的公共目录，当直接输入用户的web网址时，重定向的是master分支的目录。因此，可以创建一个source分支来工作，然后将生成的内容推送到master分支。Octopress可以通过使用下面的命令完成上面的任务：<br/>
<code>rake setup_github_pages</code><br/>
上面的操作将会完成下面的操作：</p>

<ul>
<li>请求用户输入个人的Github可读可写地址，使用ssh的目录，如git@github.com:xiongbupt/xiongbupt.github.com.git这样的地址，在输入上面的命令之后，要求输入地址时输入这样一个地址即可。</li>
<li>将本来octopress分支的远端分支有origin重命名为octopress，相当于工作目录内有两个远端分支。</li>
<li>将个人的Github Pages作为默认的远程origin分支。</li>
<li>将当前分支由master转换为source分支。</li>
<li>根据之前自身输入的地址来配置个人博客的地址。</li>
<li>在_deploy目录下创建一个master分支用于来布置。<br/>
接下来使用<br/>
rake generate<br/>
rake deploy<br/>
这两个操作将会完成下面的任务：生成网页内容，将将生成的网页内容拷贝到<code>_deploy/</code>文件夹内，将这些文件添加到git跟踪目录下，提交然后将这些文件推送到master分支。因此在完成内容编辑之后，简单使用上面的两个命令就将会本地完成的编辑内容推送到远程的服务器端。</li>
</ul>


<p><strong>不要忘记</strong>将源文件推送到自己的远程分支。使用下面的操作即可完成操作：<br/>
git add .
git commit -m &#8216;提交说明&#8217;
git push origin source</p>

<p><strong>注意：</strong>目前Github网站设置的默认分支是最新提交的分支，因此如果在网页显示有问题时，可以登录到Github网站上查看是否自己的版本库的默认分支是否为master分支，将默认分支调整为master即可在网页上显示内容。</p>

<h2>Github工程页面设置</h2>

<p>Github允许对于已存在的开源工程添加一个网页说明。Github会搜索工程目录下的gh-pages分支，然后将这些内容置于可以访问的类似于<code>http://username.github.com/project</code>。</p>

<p>可以通过下面的方式来公布自己的工程<code>gh-pages</code>。<br/>
rake setup_github_pages</p>

<p>这个操作将会：
* 请求工程目录库的网址url
* 将当前的origin本来指向的远程仓库imathis/octopress重命名为octopress
* 确定博客将被配置为一个子目录
* 在工程下新建_deploy文件夹，在该文件夹下建立gh-pages分支，准备配置该分支</p>

<p>接下来运行：  <br/>
rake generate
rake deploy
这将会生成博客内容，将生成的文件拷贝到<code>_deploy/</code>文件夹内，将它们加入到git同步库中，提交并将这些文件推送到master分支。</p>

<p>现在已经对网站的内容进行了一次提交，但是同样也应该对网站的博客的源代码进行提交。在添加了自己工程的网址作为远端仓库之后，可以进行提交，如下所示：      <br/>
git remote add origin (your repo url)
#set your new origin as the default branch
git config.branch.master.remote origin</p>

<p>在完成上述设置之后便可以使用<code>git push</code>进行推送了。</p>

<h2>自定义域名</h2>

<p>首先需要在<code>source</code>文件夹下创建一个名字为<code>CNAME</code>的文件，然后将自己的域名输入到该文件中，如下所示： <br/>
echo &#8216;your-domain.com&#8217; >> source/CNAME</p>

<p>接下来在域名的注册处添加域名记录。具体介绍参考<a href="http://octopress.org/docs/deploying/github/" title="OCTOPRESS Github介绍">octopress</a>的介绍，此处不做详细描述。</p>

<p>sed -n &#8216;s/(category:\ )([)(\w<em>)(])/\1\3/p&#8217; </em>.md</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汇编语言学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/assemble_language_learn/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/assemble_language_learn</id>
    <content type="html"><![CDATA[<p>本书主要记录的在学习王爽编著的<a href="http://book.douban.com/subject/3037562/" title="汇编语言">《汇编语言》</a>中的一些记录。</p>

<h2>第二章 寄存器（CPU原理）</h2>

<p>8086中内存地址的访问是由基地址加上偏移地址组成的物理地址，而这个基地址主要是由段寄存器提供的，在8086中有4个段寄存器，分别是CS，DS，SS和ES。<br/>
<kbd>CS</kbd>为代码段寄存器，<kbd>IP</kbd>为指令指针寄存器，在8086机中，任意时刻，CPU将CS：IP指向的内容当做指令执行。<br/>
8086CPU的工作过程如下所示：</p>

<ol>
<li>从CS：IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</li>
<li>IP=IP+所读取的指令长度，从而指向下一条指令；</li>
<li>执行指令，转到步骤1，重复这个过程。</li>
</ol>


<!--more-->


<p>在8086CPU加电启动或复位后，<kbd>CS</kbd>和<kbd>IP</kbd>被设置为<code>CS=F000H，IP=FFFFH</code>。<br/>
CPU只认定由<code>CS：IP</code>指向内存单元中的内容为指令。</p>

<h2>第三章 寄存器（内存访问）</h2>

<p>当CPU要读写一个内存单元时，必须指定内存单元的段地址与偏移地址。在8086CPU中，使用的是<code>DS</code>来指定段地址，当将段地址传送进入<code>DS</code>寄存器时，必须再依靠另外一个寄存器来将该数值传送进入到<code>DS</code>中，不支持直接将数据传送到<code>DS</code>寄存器中。比如想要从内存单元10000H中读取数据到<code>al</code>中，可以采用如下操作：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">mov</span> <span class="nb">bx</span><span class="p">,</span> <span class="mh">1000H</span>
</span><span class='line'><span class="nf">mov</span> <span class="nb">ds</span><span class="p">,</span> <span class="nb">bx</span>
</span><span class='line'><span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意上面代码中<code>[0]</code>这个部分是不可缺少的，表示的是一个内存偏移单元而不是一个数。<br/>
8086CPU的入栈和出栈操作都是以字为单位的。在任意时刻，SS：SP指向栈顶元素，栈的段地址寄存器为<code>SS</code>，偏移地址寄存器为<code>SP</code>。</p>

<h2>第四章 第一个程序</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">assume</span> <span class="nb">cs</span><span class="p">:</span><span class="nv">codesg</span>
</span><span class='line'><span class="nf">codesg</span> <span class="ow">seg</span><span class="nv">ment</span>
</span><span class='line'><span class="nl">start:</span>  <span class="nf">mov</span> <span class="nb">ax</span><span class="p">,</span> <span class="mh">0123H</span>
</span><span class='line'>        <span class="nf">mov</span> <span class="nb">bx</span><span class="p">,</span> <span class="mh">0456H</span>
</span><span class='line'>        <span class="nf">add</span> <span class="nb">ax</span><span class="p">,</span> <span class="nb">bx</span>
</span><span class='line'>        <span class="nf">add</span> <span class="nb">ax</span><span class="p">,</span> <span class="nb">ax</span>
</span><span class='line'>
</span><span class='line'>        <span class="nf">mov</span> <span class="nb">ax</span><span class="p">,</span> <span class="mh">4c00H</span>
</span><span class='line'>        <span class="nf">int</span> <span class="mh">21H</span>
</span><span class='line'>
</span><span class='line'><span class="nf">codesg</span> <span class="nv">ends</span>
</span><span class='line'><span class="nf">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>汇编语言中有两种类型的指令，分别为<code>伪指令</code>和<code>汇编指令</code>。<code>segment和ends</code>是一对成对使用的<code>伪指令</code>，用来定义一个段。一个有意义的汇编程序至少有一个段，这个段用来存储程序。<code>end</code>是指定程序结束的标记。<code>assume</code>用于假设某个寄存器与<code>segment ends</code>指定的名称相关联。</p>

<h2>第五章 [bx]和loop指令</h2>

<p>寄存器中的内容也可作为偏移指令，在使用<code>loop</code>时，每次执行完一次之后，寄存器<code>CX</code>的值都将会减1，因此可以将循环次数放入到<code>CX</code>寄存器中，然后再使用<code>loop</code>来实现循环操作。</p>

<h2>第六章 包含多个段的程序</h2>

<p>这章节主要介绍程序中可以有多个段，比如代码段、数据段和栈等，整个代码的架构可以使用下面的方式</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">assume</span> <span class="nb">cs</span><span class="p">:</span><span class="nv">code</span><span class="p">,</span> <span class="nb">ds</span><span class="p">:</span><span class="nv">date</span><span class="p">,</span> <span class="nb">ss</span><span class="p">:</span><span class="nv">stack</span>
</span><span class='line'><span class="nf">date</span> <span class="ow">seg</span><span class="nv">ment</span>
</span><span class='line'>    <span class="kd">dw</span> <span class="mh">0123H</span><span class="p">,</span> <span class="mh">0234H</span><span class="p">,</span> <span class="mh">0123H</span>
</span><span class='line'><span class="nf">date</span> <span class="nv">ends</span>
</span><span class='line'><span class="nf">stack</span> <span class="ow">seg</span><span class="nv">ment</span>
</span><span class='line'>    <span class="kd">dw</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'><span class="nf">stack</span> <span class="nv">ends</span>
</span><span class='line'><span class="nf">code</span> <span class="ow">seg</span><span class="nv">ment</span>
</span><span class='line'><span class="nl">start:</span>  <span class="nf">code</span> <span class="nv">here</span>
</span><span class='line'>        <span class="err">&quot;</span>
</span><span class='line'>        <span class="err">&quot;</span>
</span><span class='line'>        <span class="err">&quot;</span>
</span><span class='line'><span class="nf">code</span> <span class="nv">ends</span>
</span><span class='line'><span class="nf">end</span> <span class="nv">start</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第七章 更灵活的定位内存地址的方法</h2>

<p>这章节主要介绍的是内存寻址的方式，增加了<code>bx</code>寄存器寻址的方式内容，同时引入了<code>SI</code>和<code>DI</code>这两个寄存器的寻址方式，其中<code>SI</code>和<code>DI</code>这两个提供的方式和<code>bx</code>相似，但是这两个寄存器不能分成两个8位寄存器。<br/>
总共的寻址方式可以总结为如下几种：</p>

<ol>
<li>[idata]用一个常量表示地址用于直接定位一个内存单元；</li>
<li>[bx]用一个变量表示内存地址，用于间接定位一个内存单元；</li>
<li>[bx+idata]用一个变量和常量定义一个内存单元；</li>
<li>[bx+si]用两个变量；</li>
<li>[bx+di+idata]用两个变量和一个常量定义。</li>
</ol>


<h2>第八章 数据处理的两个基本问题</h2>

<p>这两个基本问题是：</p>

<ul>
<li>处理的数据在什么地方？</li>
<li>要处理的数据有多长？</li>
</ul>


<p>对于数据存储在什么地方这个问题，根据书上的例子，摘抄如下：</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">机器码     </th>
<th align="left">汇编指令           </th>
<th align="left">指令执行前数据的位置</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">8E1E0000   </td>
<td align="left">mov bx, [0]        </td>
<td align="left">内存，ds:0单元</td>
</tr>
<tr>
<td></td>
<td align="left">89C3       </td>
<td align="left">mov bx, ax         </td>
<td align="left">CPU内部，ax寄存器</td>
</tr>
<tr>
<td></td>
<td align="left">BB0100     </td>
<td align="left">mov bx, 1          </td>
<td align="left">CPU内部，指令缓冲器</td>
</tr>
</tbody>
</table>


<p>对于数据的长度，可以有下面三种方法：</p>

<ul>
<li>通过寄存器名指定要处理的数据的尺寸；</li>
<li>在没有寄存器名存在的情况下，用操作符<code>X ptr</code>指明内存单元的长度，其中<code>X</code>在汇编指令中可以为<code>word</code>或<code>byte</code></li>
<li>使用其他方法</li>
</ul>


<p>这章节还介绍了几个其他指令，分别为<code>div 除法指令</code>，<code>dd双字节伪指令</code>，<code>dup操作符重复指令</code>。</p>

<h2>第九章 转移指令的原理</h2>

<p>可以修改<kbd>IP</kbd>，或同时修改<kbd>CS</kbd>和<kbd>IP</kbd>的指令统称为转移指令。<br/>
操作符<kbd>offset</kbd>在汇编语言中是由编译器处理的符号，它的功能是取得编号的偏移地址。<br/>
<kbd>jmp</kbd>为无条件转义指令，可以只修改<kbd>IP</kbd>，也可以同时修改<kbd>CS和IP</kbd>。</p>

<h2>第十章 call和ret指令</h2>

<p><kbd>call</kbd>和<kbd>ret</kbd>指令都是转移指令，它们都修改<kbd>IP</kbd>，或同时修改<kbd>CS</kbd>和<kbd>IP</kbd>。</p>

<h2>第十一章 标志寄存器</h2>

<p>这章节主要介绍的是CPU进行操作之后，在标识寄存器中各标志位的含义，其主要作用如下所示：</p>

<ol>
<li>用来存储相关指令的某些执行结果；</li>
<li>用来为CPU执行相关指令提供行为依据；</li>
<li>用来控制CPU的相关工作方式。</li>
</ol>


<p>标志寄存器共有16位，其中有意义的为0、2、4、6、7、8、9、10、11这几位，其余的位均没有意义。</p>

<h2>第十二章 内中断</h2>

<p>中断分为内中断和外中断，其中产生内中断的方式主要有下面几种：</p>

<ul>
<li>除法错误，比如在<kbd>div指令</kbd>产生除法溢出，中断类型码为：0</li>
<li>单步执行，中断类型码为：1；</li>
<li>执行<kbd>int0指令</kbd>中断类型码为：4;</li>
<li>执行<kbd>int指令</kbd>中断类型码为对应的整形数。</li>
</ul>


<h2>第十三章 int指令</h2>

<p>CPU执行<kbd>int n</kbd>指令，相当于引发一个n号中断的中断过程，执行过程如下：</p>

<ul>
<li>取中断类型码n；</li>
<li>标志寄存器入栈，IF=0，TF=0；</li>
<li>CS，IP入栈；</li>
<li>IP=(n<em>4)，(CS)=(n</em>4+2)</li>
</ul>


<p>BIOS主要包含的内容：</p>

<ul>
<li>硬件系统的检测和初始化程序；</li>
<li>外部中断和内部中断例程；</li>
<li>用于对硬件设备进行I/O操作的中断例程；</li>
<li>其他和硬件系统相关的中断例程。</li>
</ul>


<h2>第十四章 端口</h2>

<p>对端口的操作使用的是<kbd>in</kbd>，<kbd>out</kbd>指令。</p>

<h2>第十五章 外中断</h2>

<p>CPU通过端口和外部设备进行联系。<br/>
一共有两类中断，<kbd>可屏蔽中断</kbd>和<kbd>不可屏蔽中断</kbd>。不可屏蔽中断用的中断号固定为2。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM正则表达式学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/vim_regex_learning/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/vim_regex_learning</id>
    <content type="html"><![CDATA[<h2>VIM正则表达式</h2>

<p>之前粗略的看了正则表达式的一些内容，但是在VIM中一直用的很少，刚才无意间看到了使用VIM对词进行大小写转换，中间出现了一些正则表达式的内容，从网上找了些内容，觉得可以留下来做个笔记，供以后自己参考。<br/>
文章的主要内容参考<a href="http://qianjigui.iteye.com/blog/368449" title="VIM中的正则表达式">该博客</a>。</p>

<!--more-->


<h3>量词</h3>

<p>VIM中的量词与perl相比</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">VIM    </th>
<th align="center">Perl   </th>
<th align="center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">*      </td>
<td align="center">*      </td>
<td align="center">0个或多个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">+     </td>
<td align="center">+      </td>
<td align="center">1个或多个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">\?或\= </td>
<td align="center">?     </td>
<td align="center">0个或1个(匹配优先)，\?不能在 ? 命令（逆向查找）中使用</td>
</tr>
<tr>
<td></td>
<td align="center">{n,m} </td>
<td align="center">{n,m}  </td>
<td align="center">n个到m个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{n,}  </td>
<td align="center">{n,}   </td>
<td align="center">最少n个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{,m}  </td>
<td align="center">{,m}   </td>
<td align="center">最多m个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{n}   </td>
<td align="center">{n}    </td>
<td align="center">恰好n个</td>
</tr>
<tr>
<td></td>
<td align="center">{-n,m}</td>
<td align="center">{n,m}? </td>
<td align="center">n个到m个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-}   </td>
<td align="center">*?     </td>
<td align="center">0个或多个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-1,} </td>
<td align="center">+?     </td>
<td align="center">1个或多个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-,1} </td>
<td align="center">??     </td>
<td align="center">0个或1个(忽略优先)</td>
</tr>
</tbody>
</table>


<h3>环视和固化分组</h3>

<p>这个内容之前没有接触过，只是简单的摘抄下来，后面再进行研究了。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">vim        </th>
<th align="center">Perl   </th>
<th align="center">意义           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\@=        </td>
<td align="center">(?=    </td>
<td align="center">顺序环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@!        </td>
<td align="center">(?!    </td>
<td align="center">顺序否定环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@&lt;=       </td>
<td align="center">(?&lt;=   </td>
<td align="center">逆序环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@&lt;!       </td>
<td align="center">(?&lt;!   </td>
<td align="center">逆序否定环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@>        </td>
<td align="center">(?>    </td>
<td align="center">固化分组</td>
</tr>
<tr>
<td></td>
<td align="center">\%(atom)  </td>
<td align="center">(?:    </td>
<td align="center">非捕获型括号</td>
</tr>
</tbody>
</table>


<p>和perl稍有不同的是，vim中的环视和固化分组的模式的位置与perl不同。例如，查找紧跟在 foo 之后的 bar，perl将模式写在环视的括号内，而vim将模式写在环视的元字符之前。
Perl的写法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">/(?&lt;=foo)bar/</span>
</span></code></pre></td></tr></table></div></figure>


<p>vim的写法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/<span class="se">\(</span>foo<span class="se">\)\@</span>&lt;<span class="o">=</span>bar
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM使用正则表达式改变大小写]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/vim_regex_case/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/vim_regex_case</id>
    <content type="html"><![CDATA[<h2>VIM使用正则表达式改变字符大小写</h2>

<p>转载自<a href="http://vim.wikia.com/wiki/Changing_case_with_regular_expressions" title="VIM中使用正则表达式">vim_wiki</a><br/>
在VIM中使用正则表达式来改变单词的大小写是已经很简单的事情。<br/>
只需要简单的将\U或者\L放在想要更改的回溯引用的前面，将\E放置在回溯引用的后面，VIM就会将回溯应用中的大小写进行相应的转换。使用\u和\l（这时不需要在最后使用\E）将会仅仅改变回溯引用中的第一个字符。</p>

<pre><code>回溯引用是正则表达式中的一部分，用来表明匹配前面的一个部分。最常用的回溯表达式有&amp;,\1,\2,\3,...,\9。  
</code></pre>

<!--more-->


<h2>示例</h2>

<ul>
<li>将整篇文档内容全部小写</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:%s/.*/<span class="se">\L</span>&amp;/g
</span></code></pre></td></tr></table></div></figure>


<pre><code>&amp;是一个用来表明匹配前面全部的回溯引用的记录符号。
</code></pre>

<ul>
<li>将紧跟着&lt;后面的字符全部大写，比如在HTML标签中使用。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:%s/&lt;<span class="se">\(\w</span>*<span class="se">\)</span>/&lt;<span class="se">\U\1</span>/g
</span></code></pre></td></tr></table></div></figure>


<h2>注释</h2>

<p>注意使用<code>gu</code>和<code>gU</code>命令加上移动操作也可以实现大小写的转换。<br/>
比如<code>ggguG</code>可以实现将全文全部小写，其中，<code>gg</code>代表到达文章的首部，<code>gu</code>代表将文字转换为小写，<code>G</code>代表到达文章末尾（EOF）。</p>

<p>使用\0作为参考引用，而不是使用每个单独命名，比如（\1，\2等），下面的例子演示了\0的使用。</p>

<blockquote><p>This regex upper cases an explicit set of words to uppercase in a file.</p></blockquote>

<pre><code>`:%s/\(select\)\|\(order)\|\(by\)\|\(from\)\|\(where\)/\U\0/g`
</code></pre>

<blockquote><p>Not rocket science, but otherwise you&#8217;d have to do this:</p></blockquote>

<pre><code>`:%s/\(select\)\|\(order)\|\(by\)\|\(from\)\|\(where\)/\U\1\U\2\U\3\U\4\U\5/g`
</code></pre>

<blockquote><p>[edit:  Much easier to just use this, where either 0 or 1 will work:]</p></blockquote>

<pre><code>`:%s/\(select\|order\|by\|from\|where\)/\U\1/g`
</code></pre>

<p>上面的三个操作均是将一文中的几个关键词转换为大写操作，显然方法2显得很不合适，方法1和方法3要高明许多。</p>

<p>将HTML标签全部大写</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>:%s/<span class="err">&lt;</span>\/\=\(\w\+\)\&gt;/\U<span class="err">&amp;</span>/g
</span></code></pre></td></tr></table></div></figure>


<p>将HTML标签全部小写</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>%s/<span class="err">&lt;</span>\/\=\(\w\+\)\&gt;/\L<span class="err">&amp;</span>/g
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子中的<code>\=</code>可以替换成为<code>\?</code>，两个符号的意思都是匹配0个或者1个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个操作系统的实现笔记]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/os_impletion/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/os_impletion</id>
    <content type="html"><![CDATA[<p>下面的主要介绍的是Arch下面，对<a href="http://book.douban.com/subject/3735649/" title="一个操作系统的实现">Orange&#8217;S一个操作系统的实现</a>，这本书的笔记。</p>

<h2>Arch下工具安装</h2>

<p>文章介绍的汇编器为nasm，在arch下安装相当简单</p>

<blockquote><p>pacman -S nasm</p></blockquote>

<!--more-->


<p>上面这条命令即可完成nasm汇编器的安装。对于虚拟机，使用的是bochs，在Arch下如果使用<code>pacman</code>安装的话，没有调试功能，对于后期的调试不方便。但是在Arch的AUR包中，已经有了bochs的调试版本，仅仅需要使用<code>yaourt -S bochs-with-debugger</code>即可将具有调试功能的bochs虚拟机安装上。</p>

<p>在完成上述操作后，该书介绍的基本工具便已经完备了，接下来便是对bochs进行配置了。</p>

<h2>bochs配置</h2>

<p>bochs的示例配置文件位于<code>/usr/share/doc/bochs/bochsrc-sample.txt</code>，将该配置文件拷贝出来，位于自己工作目录下，并重新命名为bochsrc。这样在每次启动bochs时，便没有必要使用<code>-f</code>来指定使用的配置文件名。</p>

<p>按照书中的推荐配置，bochsrc-sample.txt文件很大，上面有很多不需要的配置选项，按照书中的指示，将bochsrc文件中配置精简为如下所示：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>megs:   32
</span><span class='line'>floppya: <span class="nv">1_44</span><span class="o">=</span>a.img, <span class="nv">status</span><span class="o">=</span>inserted
</span><span class='line'>romimage: <span class="nv">file</span><span class="o">=</span>/usr/share/bochs/BIOS-bochs-latest
</span><span class='line'>vgaromimage: <span class="nv">file</span><span class="o">=</span>/usr/share/bochs/VGABIOS-lgpl-latest
</span><span class='line'>boot: floppy
</span><span class='line'>log: bochsout.txt
</span><span class='line'>mouse: <span class="nv">enabled</span><span class="o">=</span>0
</span><span class='line'>keyboard_mapping: <span class="nv">enabled</span><span class="o">=</span>1, <span class="nv">map</span><span class="o">=</span>/usr/share/bochs/keymaps/x11-pc-us.map
</span></code></pre></td></tr></table></div></figure>


<h2>汇编文件编译及制作启动软盘</h2>

<p>按照书中第一章节中的介绍，将启动软盘的代码敲入，然后使用nasm编译，使用bximage生成一个虚拟的软盘，接着使用dd工具将对应的编译生成的文件拷贝到相应的软盘工具中。接下来的工作按照书中介绍的内容继续即可。</p>

<h2>附录：汇编代码</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'>    <span class="k">org</span>     <span class="mh">07c00h</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="nb">cs</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">ds</span><span class="p">,</span> <span class="nb">ax</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">es</span><span class="p">,</span> <span class="nb">ax</span>
</span><span class='line'>    <span class="nf">call</span>    <span class="nb">Disp</span><span class="nv">Str</span>
</span><span class='line'>    <span class="nf">jmp</span>     <span class="kc">$</span>       <span class="c1">;jump to this line, be a dead loop</span>
</span><span class='line'><span class="nl">DispStr:</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="nv">BootMessage</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">bp</span><span class="p">,</span> <span class="nb">ax</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">cx</span><span class="p">,</span> <span class="mi">16</span>      <span class="c1">;the length of string</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="mh">01301h</span>  <span class="c1">;make the font on the screen</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">bx</span><span class="p">,</span> <span class="mh">000ch</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nb">dl</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nf">int</span>     <span class="mh">10h</span>
</span><span class='line'>    <span class="nf">ret</span>
</span><span class='line'><span class="nl">BootMessage:</span>        <span class="kd">db</span>      <span class="s">&quot;Hello, Os world!&quot;</span>
</span><span class='line'><span class="kd">times</span>   <span class="mi">510</span><span class="o">-</span><span class="p">(</span><span class="kc">$</span><span class="o">-</span><span class="kc">$$</span><span class="p">)</span>  <span class="nv">db</span>  <span class="mi">0</span>
</span><span class='line'><span class="kd">dw</span>      <span class="mh">0xaa55</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git小项目基本操作]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/01/git-lab-use/"/>
    <updated>2012-06-01T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/01/git-lab-use</id>
    <content type="html"><![CDATA[<h2>Git个人电脑操作</h2>

<p>Git版本控制有三个区域，分别是工作目录、暂存区和git目录。
<img src="http://xiongbupt.github.com/images/fig0101-tn.png" title="Git 本地操作" alt="Git的本地操作" /></p>

<p>平时的工作都在工作目录中完成，在修改完代码之后，需要将修改的代码加入到暂存区，这个通过<code>git add</code>操作完成。当需要将暂存区域里的代码提交进入git工作目录时，需要使用<code>git commit</code>来完成。</p>

<p>上面描述的两个命令<code>git add</code>和<code>git commit</code>是在本地目录工作中用到的主要命令。当需要删除文件时，使用的是<code>git rm</code>命令。</p>

<p>在使用<code>git commit</code>将本地工作的内容提交到git工作目录之后，本地代码的修改工作便已经完成。</p>

<!--more-->


<h2>Git获取服务器端代码</h2>

<p>使用git从服务器端下载最新的代码，目前服务器端的ip地址为10.117.6.138。使用</p>

<pre><code>git clone git@10.117.6.138:/home/git/path_to_work
</code></pre>

<p>下载源代码之后，接下来便可以对代码进行修改了。每次修改之后，均使用<code>git add</code>和<code>git commit</code>在本地完成提交操作。这些操作与前面提到的在个人电脑上的操作类似。</p>

<h2>在个人电脑上创建新分支</h2>

<p>git创建分支的操作非常简单，而且代价也很小。</p>

<pre><code>`git branch new_branch_name`
</code></pre>

<p>通过这样一条指令便可以创建一个名字为<code>new_branch_name</code>的分支。接下来，便可以切换到该分支上进行开发了，具体操作如下：</p>

<pre><code>git checkout new_branch_name
</code></pre>

<p>完成上述操作之后，便已经将当前的代码分支移动到了<code>new_branch_name</code>这个分支。使用<code>git branch</code>指令可以查看当前一共有多少分支，以及当前处于哪个分支。<br/>
上面的两条指令可以用一条指令代替</p>

<pre><code>git checkout -b new_branch_name
</code></pre>

<p>这条命令即相当于连续执行了</p>

<pre><code>git branch new_branch_name
git checkout new_branch_name
</code></pre>

<h2>查看服务器端的分支</h2>

<p>如果想要查看服务器端都有什么分支，可以使用如下：</p>

<pre><code>git remote show origin
</code></pre>

<p>上面这条指令将会输出远端服务器端的分支，以及个人的电脑是否已经和这些分支同步。</p>

<h2>推送代码至Git服务器端</h2>

<p>当自己需要将代码推送到Git服务器端时，需要确保服务器端的代码与自己下载的代码是一致的，因此推荐每次在向服务器端推送代码之前，先使用<code>git pull</code>操作将服务器端的代码与本地的代码进行合并，完成合并之后再进行提交。若未进行此操作，将代码推送至服务器端将会失败，服务器端将会给出提示。<br/>
从Git服务器端下载代码有两种方式，一种是<code>git pull</code>，另外一种是<code>git fetch</code>。其中<code>git pull</code>操作不仅仅执行了<code>git fetch</code>，同时，它还将远端仓库的版本与当前的版本进行了合并即<code>merge</code>操作。如果可以直接合并，将不需要在本地端手工合并，Git将会自动合并。<br/>
因此，在需要将代码提交至远端的Git服务器之前，需要先将服务器端的最新代码下载下来，然后在本地合并之后，再提交到服务器端。<br/>
具体操作如下：</p>

<pre><code>git pull
git mergetool
git push origin branch_name
</code></pre>

<p>上面这三个操作是整个向服务器端推送的大致操作。其中最后一步<code>git push origin branch_name</code>将会把本地分支<code>branch_name</code>推送到服务器端，并且服务器端的分支的名字也为<code>branch_name</code>。若想在服务器端命名为不同的名字，则可以使用下面的指令</p>

<pre><code>git push origin local_branch:remote_branch
</code></pre>

<p>其中<code>local_branch</code>是本地分支的名字，而<code>remote_branch</code>则为远端服务器的分支名字。</p>

<h2>切换到远端Git服务器上分支</h2>

<p>从服务器上使用<code>git fetch</code>下载代码之后，个人PC上的代码库便和服务端的代码库的版本是一致的。此时，如果个人PC希望切换到远端服务器的某个分支，必须在自己的代码库中再创建一个分支，建议将该分支的名字命名为与远端服务器的分支名字相同，这样在推送到服务器端时可以较为方便，防止再在远端服务器上创建一个新的分支。具体操作可以如下所示：</p>

<pre><code>git pull
git remote show origin
git checkout -b branch_name origin/branch_name
</code></pre>

<p>上面的操作即在本地创建了一个分支名为branch_name，该分支与服务器端的分支是一样的名字。如果在该分支上进行修改之后，接下来使用推送命令将修改的分支推送到远端服务器即可。</p>

<pre><code>git push origin branch_name
</code></pre>

<h2>开发流程简介</h2>

<p>在创建项目之前，需要在服务器端创建一个版本库。这个操作需要有远端服务器的登录权限，可以在相应的目录下创建目录及文件，目前对服务器的登录为ssh的远程登录方式。在登录到服务器端后，使用<em><code>git init --bare</code></em> 创建一个空的仓库即可。也可以在本地创建仓库之后，使用如下命令将仓库拷贝到远端服务器。</p>

<pre><code>scp -r local_folder name@remote_server:/path/to/work
</code></pre>

<p>这一步可以由管理人员完成。当将git的项目在远端服务器端生成之后接下来便是<code>git</code>的发挥作用了。</p>

<p>假设现在项目组有三个人分别为A，B，C。他们共同从服务器下载了一份代码，并且开始开发。B下载代码之后，觉得自己有个新想法，于是使用</p>

<pre><code>git branch branch_B_1
</code></pre>

<p>创建了一个新的分支，分支名为branch_B_1。然后B使用</p>

<pre><code>git checkout branch_B_1
</code></pre>

<p>在这个分支上进行开发。同样，A也进行了类似的操作，不过他创建的分支版本为branch_A_1。在完成各自的想法之后，他们需要将自己的工作推送到服务器端。</p>

<blockquote><p>在推送到服务器端时，需要记住git的一个原则，除非指定需要提交的本地分支，否则，git是不会将本地生成的分支提交到远端的服务器端的。因此，在创建分支进行开发后，当需要提交分支时，需要按照上面提到的<strong>推送代码到Git服务器端</strong>的说明将代码推送到服务器端。</p></blockquote>

<p>现在，A和B都完成了各自的修改，需要按照下面的步骤将修改后的分支推送到服务器端。假设A先推送，其首先使用</p>

<pre><code>git pull
</code></pre>

<p>的方式从服务器端下载最新的代码，然后按照</p>

<pre><code>git push origin branch_A_1
</code></pre>

<p>的方式将分支代码提交到了Git服务器端。接下来，B也想提交自身修改的分支代码，于是B也首先使用<code>git pull</code>的方式从服务器端下载最新的代码，然后使用</p>

<pre><code>git push origin branch_B_1
</code></pre>

<p>的方式提交分支代码。注意在B使用<code>git pull</code>的方式下载代码时，其将会下载服务器端由A提交的分支branch_A_1。如果B此时想查看A究竟做了什么工作时，可以使用</p>

<pre><code>git checkout -b branch_A_1 origin/branch_A_1
</code></pre>

<p>的方式，先在本地创建一个同样名字为branch_A_1的分支，然后再切换到该分支进行查看。</p>

<blockquote><p>git从服务器端下载的分支代码无法直接查看，必须在本地创建一个对应的分支，然后才可以查看该分支的代码。至于本地分支的名字则没有影响，但是为了与远端分支的一致性，推荐使用相同的分支名。</p></blockquote>

<p>C使用<code>git pull</code>之后，在切换分支查看了A和B的想法之后，觉得A和B的想法都可以采纳，C想将A和B的想法合并到一起，于是便开始合并这两个分支。<br/>
首先，C新创建了一个分支，名字为branch_C_1，接下来，C切换到该分支，然后使用</p>

<pre><code>git merge branch_A_1
</code></pre>

<p>将分支branch_A_1与自己创建的分支合并，接着使用</p>

<pre><code>git merge branch_B_1
</code></pre>

<p>将分支branch_B_1与自己创建的分支合并。这时，C创建的分支已经同时包含了A和B的想法。如果在合并的工程中出现了冲突，可以使用</p>

<pre><code>git mergetool
</code></pre>

<p>这个工具将会打开这些冲突，选择解决这些问题。</p>

<p>总之，git的提交分支的方式便是按照上面的一个简单的说明进行开发。</p>

<h3>git版本回退</h3>

<p>如果在开发过程中，发现出现了错误，想要将git的版本回退到某个时期，可以使用</p>

<pre><code>git checkout hash_number
</code></pre>

<p>的方式回退到hash_number所代表的版本。在这上面再创建分支</p>

<pre><code>git chekcout -b branch_test hash_number
</code></pre>

<p>这样可以以这个hash_number代表的历史版本。</p>

<h3>git版本合并</h3>

<p>从服务器端下载代码之后，如果出现了冲突，需要使用</p>

<pre><code>git mergetool
</code></pre>

<p>来对代码进行合并。<br/>
在本地分支下，使用</p>

<pre><code>git pull
</code></pre>

<p>git将会尝试自动合并，如果合并失败，使用</p>

<pre><code>git mergetool
</code></pre>

<p>再来尝试手动合并即可。</p>

<h2>git基本命令介绍</h2>

<p>从服务器端下载代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone username@remote_server:/path/to/work
</span></code></pre></td></tr></table></div></figure>


<p>添加文件到暂存区</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add filename
</span></code></pre></td></tr></table></div></figure>


<p>将已经在版本库中但是在工作目录下修改的文件添加到暂存区</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add -u
</span></code></pre></td></tr></table></div></figure>


<p>从版本库中删除文件</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rm filename
</span></code></pre></td></tr></table></div></figure>


<p>将文件重命名</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git mv oldname newname
</span></code></pre></td></tr></table></div></figure>


<p>将暂存区文件存储到版本库中</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit
</span></code></pre></td></tr></table></div></figure>


<p>直接添加注释，不再进入界面编辑提交日志</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit -m <span class="s1">&#39;Description of the commit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从已经克隆的版本库中下载服务器端的代码到本地版本库中</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git fetch
</span></code></pre></td></tr></table></div></figure>


<p>从已经克隆的版本库中下载服务器端的代码并合并分支</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<p>在本地创建一个名字为branch_name的分支</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch branch_name
</span></code></pre></td></tr></table></div></figure>


<p>切换到本地名字为branch_name的分支</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout branch_name
</span></code></pre></td></tr></table></div></figure>


<p>在本地创建一个分支名为branch_name的分支并切换到该分支</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git chekcout -b branch_name
</span></code></pre></td></tr></table></div></figure>


<p>将本地名字为branch_name的分支推送到服务器端，并且在服务器端的名字为branch_name</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push origin branch_name
</span></code></pre></td></tr></table></div></figure>


<p>将本地名字为branch_name的分支推送到服务器端，并且在服务器端的名字为branch_server</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push origin branch_name:branch_server
</span></code></pre></td></tr></table></div></figure>


<p>查看服务器端的分支状态</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote show origin
</span></code></pre></td></tr></table></div></figure>


<p>查看本地分支状态</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch
</span></code></pre></td></tr></table></div></figure>


<p>删除本地分支</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch -d branch_name
</span></code></pre></td></tr></table></div></figure>


<p>合并分支</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git merge
</span></code></pre></td></tr></table></div></figure>


<p>合并冲突解决</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git mergetool
</span></code></pre></td></tr></table></div></figure>


<p>查看简明历史</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log
</span></code></pre></td></tr></table></div></figure>


<p>查看每次提交具体修改</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log -p
</span></code></pre></td></tr></table></div></figure>


<p>查看提交某个文件的修改历史</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log -p filename
</span></code></pre></td></tr></table></div></figure>


<p>显示文件的增减行数</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log --stat
</span></code></pre></td></tr></table></div></figure>


<p>git个人邮件配置</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global user.email username@web.com
</span></code></pre></td></tr></table></div></figure>


<p>git个人名字配置</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global user.name username
</span></code></pre></td></tr></table></div></figure>


<p>git简称配置，如chekcout简称为co，commit为ci，branch为br，status为st</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global alias.co checkout
</span><span class='line'>git config --global alias.ci commit
</span><span class='line'>git config --global alias.br branch
</span><span class='line'>git config --global alias.st status
</span></code></pre></td></tr></table></div></figure>


<p>git格式化与空格</p>

<blockquote><p>由于linux系统和windows系统对行尾结束符处理方式不一致，windows下使用回车和换行两个字符来结束一行，而Linux系统仅仅使用一个换行字符，当跨平台在linux系统和windows系统下开发时，会出现较麻烦的现象。Git可以在提交时自动将结束符CRLF转换成LF，而在签出代码时将LF转换成为CRLF。在windows系统下，将autocrlf选项设置为true，这样在签出代码时，LF将会被换成CRLF；在Linux系统下，将autocrlf设置为input仅仅在签入代码时将CRLF转换为LF，在签出代码时，不进行转换，LF还是LF。此选项对跨平台开发具有较大作用，推荐使用。</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global core.autocrlf <span class="nb">true</span>*（windows下使用）*
</span><span class='line'>git config --global core.autocrlf input*<span class="o">(</span>Linux下使用）*
</span></code></pre></td></tr></table></div></figure>


<h1>注意事项</h1>

<ul>
<li>Git的每次提交到服务器端的操作必须先从服务器端下载最新的提交代码，在本地完成合并冲突之后才可以完成提交。</li>
<li>Git对于文件的合并有自动合并的功能，当已修改的版本与未修改的版本只是删减操作时，Git将会自动合并。</li>
<li>Git在本地的提交操作不需要连接到服务器端。</li>
<li>为了防止服务器版本库的差异过大，在每次完成一个完整的功能块时，建议将代码push推送到服务器端，不要多次未推送提交，一次改动过大。</li>
<li>使用<code>git checkout filename</code>操作时，将会从暂存区中获取文件，替代本地文件。注意这种情况下，本地的所有修改都会丢失。因此，在使用此命令之前，需要确认本地的修改已经无用或者已经保存。</li>
<li>尽量多使用<code>git status</code>查看当前状态，在这个命令的输出中可以获取很多帮助信息以及可以采取什么操作来实现哪些功能。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git基本使用]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/31/git-basic/"/>
    <updated>2012-05-31T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/31/git-basic</id>
    <content type="html"><![CDATA[<p><code>git log branch_a..branch_b</code><br/>
显示branch_b有而branch_a没有的历史。<br/>
<code>git log branch_b..branch_a</code><br/>
显示branch_a有而branch_b没有的历史。</p>

<p><code>git log origin/master..HEAD</code><br/>
查看将会把什么推送到远端的master分支</p>

<p><code>git show HEAD</code> <br/>
<code>git show HEAD^</code><br/>
<code>git show HEAD~</code><br/>
^符号显示的是祖先，<sup>2显示的是第二父提交</sup></p>

<p>~显示的是父提交，~2显示的是父提交的父提交</p>

<p><code>git log reA..reB</code><br/>
<code>git log ^reA reB</code><br/>
<code>git log reB --not reA</code><br/>
上述三个命令等价，均是指包含reB而不包含reA</p>

<!--more-->


<p><code>git log refA refB ^refC</code><br/>
<code>git log refA refB --not refC</code><br/>
<code>...</code>三点描述符，显示的是并集减去交集<br/>
<code>git log --left-right master...experiment</code></p>

<h3>交互式暂存</h3>

<p><code>git add -i</code>进入交互界面，输入数字进行选择</p>

<h3>存储</h3>

<p><code>git statsh</code>
当想切换分支，但是又不想将当前的工作提交到暂存区时，可以使用该指令。该指令将会把当前的工作状态暂存起来，采用堆栈的形式存储起来。当需要恢复暂存区的工作内容时，可以使用<code>git stash list</code>查看当前堆栈里面的暂存态。使用<code>git stash apply stash@{2}</code>将会恢复<code>git stash list</code>显示的第二个暂存。如果没有指明名字，直接使用<code>git stash apply</code>将会默认恢复最近的那次暂存。<br/>
<code>git stash apply</code>只是会应用存储，而不会将存储删除，如果需要删除存储，需要使用<code>git stash drop stash@{2}</code>来将相应的存储进行删除。<br/>
注意，<code>git stash apply</code>这个命令的使用不需要工作分支与当时使用<code>git stash</code>存储的分支在一个目录下，也就是说可以在分支a上存储，然后在分支b上使用<code>git stash apply</code>将在分支a上存储的内容应用到分支b上。git将会采用自动融合的机制，如果出现冲突，会要求解决冲突之后才能应用存储。</p>

<h2>重写历史</h2>

<h3>改变最近一次提交</h3>

<p>修改最后一次的声明，输入下面的命令即可</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$git</span> commit --amend
</span></code></pre></td></tr></table></div></figure>


<p>如果在依次提交之后，发现还有文件没有增加进来，可以使用git add。发现文件需要删除，使用git rm。在完成这些操作之后，使用git commit &#8211;amend操作来进行修正。这样，便会将这次更新合并到上次的更新上去。注意不要在推送之后再使用这个方法。</p>

<h3>修改多次提交说明</h3>

<h2>自定义GIT</h2>

<pre><code>git config --global core.autocrlf true
</code></pre>

<p>根据不同平台，将换行符进行替换。
开启该选项后，git可以在代码提交时，自动将行结束符CRLF替换为LF，而在签出代码时将LF替换为CRLF。该选项在windows平台和Linux平台的共同使用时使用。</p>

<pre><code>git config --global core.autocrlf input
</code></pre>

<p>该选项将把git设置为在输入时将crlf转换为lf，而在输出时不转换。</p>

<p>如果都在windows下开发，且仅仅在windows下运行，可以设置为false取消此功能，把回车符记录在库中。</p>

<pre><code>git config --global core.autocrlf false
</code></pre>
]]></content>
  </entry>
  
</feed>
