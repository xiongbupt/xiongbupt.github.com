<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-08T17:35:00+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debian安装记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/04/01/debian/"/>
    <updated>2012-04-01T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/04/01/debian</id>
    <content type="html"><![CDATA[<h2>添加用户至sudo用户组并去除密码</h2>

<p>visudo修改为不需要密码，将</p>

<blockquote><p>%sudo ALL=(ALL):ALL<br/>
修改为
%sudo ALL=(ALL) NOPASSWD: ALL<br/>
将用户user_name添加至sudo用户组<br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adduser user_name sudo
</span></code></pre></td></tr></table></div></figure></notextile></div>
重新登录后，user_name用户即已经位于sudo用户组中。</p></blockquote>

<!--more-->


<h2>安装基本的软件</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo dpkg -i wireless-crda-1.14_i386.deb
</span><span class='line'>sudo dpkg -i linux-headers-2.6.30-02063010_2.6.30-02063010_all.deb
</span><span class='line'>sudo dpkg -i linux-headers-2.6.30-02063010-generic_2.6.30-02063010_all.deb
</span><span class='line'>sudo dpkg -i linux-image-2.6.30-***.deb
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>参照<a href="http://bbs.byr.cn/#!article/Linux/82799">北邮人论坛的linux版块</a>，设置debian的源
之后使用<code>sudo apt-get install</code>安装了
* vim
* ctags
* cscope
* vim-gtk
* ibus
* vim-doc
* vim-scripts
* gcc
* locales
* nautilus-open-terminal
* make
* build-essential</p>

<h2>将默认编辑器由gedit转换为gvim</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp /etc/gnome/defaults.list /etc/gnome/defaults.list.backup
</span><span class='line'>sduo vim /etc/gnome/defaults.list
</span></code></pre></td></tr></table></div></figure></notextile></div>
将该文件中的<code>gedit.desktop</code>全部替换为<code>gvim.desktop</code></p>

<h2>添加ifconfig等命令到普通用户</h2>

<p>修改<code>/etc/profile</code>，将第7行的PATH中添加<code>/sbin</code></p>

<h2>安装中文字体</h2>

<ul>
<li>tty-wqy-zenhei</li>
<li>tty-wqy-microhei</li>
<li>xfonts-intl-chinese</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux定时器]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/03/26/linux_timer/"/>
    <updated>2012-03-26T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/03/26/linux_timer</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">mod_timer</span><span class="p">(</span><span class="k">struct</span> <span class="n">timer_list</span> <span class="o">*</span><span class="n">timer</span><span class="err">，</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">expires</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
该函数负责修改内核定时器timer的超时字段expires。该函数可以修改激活和没有激活的内核定时器的超时时间，并把它们都设置为激活状态；返回值为0表示修改的内核定时器在修改之前处于未激活状态，返回值为1表示修改的内核定时器在修改之前处于已激活状态。</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">del_timer</span><span class="p">(</span><span class="n">sturct</span> <span class="n">timer_list</span> <span class="o">*</span><span class="n">timer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
返回值为0表示修删的内核定时器在删除之前处于未激活状态，返回值为1表示删除的内核定时器在删除之前处于已激活状态。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核活动]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/03/07/linux_kernel_activity/"/>
    <updated>2012-03-07T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/03/07/linux_kernel_activity</id>
    <content type="html"><![CDATA[<h3>中断</h3>

<h4>中断类型</h4>

<p>同步中断和异常<br/>
异步中断：一般由硬件产生<br/>
硬件IRQ，中断控制器</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim_tips摘抄]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/03/06/vim_tips/"/>
    <updated>2012-03-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/03/06/vim_tips</id>
    <content type="html"><![CDATA[<p>:w<br/>
:wq<br/>
:q<br/>
:q!<br/>
ZZ<br/>
:10,20w filename<br/>
:x</p>

<h3>光标移动</h3>

<p>h : Move left</p>

<p>i : Move right</p>

<p>j : Move down</p>

<p>k : Move up</p>

<ul>
<li><p>: act as j in command mode</p></li>
<li><p>: act as k in command mode</p></li>
</ul>


<p>w : Move to next word</p>

<p>W : Move to next blank delimited word</p>

<p>b : Move to the beginning of the word</p>

<p>B : Move to the beginning of blank delimiter word</p>

<p>e : Move to the end of the word</p>

<p>E : Move to the end of Blank delimited word</p>

<p>ge : jump to previous word-ending</p>

<p>gE : jump to previous word-ending, ignore punctuation(忽略标点符号）</p>

<!--more-->


<p>g_ : jump to last non-blank character of the line</p>

<p>( : Move a sentence back</p>

<p>) :Move a sentence forward</p>

<p>{ : Move a paragraph back</p>

<p>} : Move a paragraph forward</p>

<p>0 : Move to the beginning of the line [ 0 and | acts as a Home key it goes to beginning of a line ]</p>

<p>$ : Move to the end of the line, acts as a End key</p>

<p>:1 : Move to the first line of the file</p>

<p>G : Move to the last line of the file</p>

<p>nG : Move to nth line of the file</p>

<p>:n : Move to nth line of the file</p>

<p>fc :Move forward to c (c= character)</p>

<p>Fc : Move back to c</p>

<p>H :Move to top of screen</p>

<p>M :Move to middle of screen</p>

<p>L : Move to bottom of screen</p>

<h3>插入文本</h3>

<p>i : Insert before cursor</p>

<p>I : Insert before line</p>

<p>a : Append after cursor</p>

<p>A : Append after line</p>

<p>o : Open a new line after current line</p>

<p>O : Open a new line before current line</p>

<p>r : Replace one character</p>

<h3>删除、剪切、复制文本</h3>

<p>d^ : Deletes from current cursor position to the beginning of the line.</p>

<p>d$ : Deletes from current cursor position to the end of the line.</p>

<p>dw : Deletes from current cursor position to the end of the word.</p>

<p>dd : Deletes three lines from current cursor position downwards.(also :d)</p>

<p>yy : Yank the current line (also :y)</p>

<p>x : Delete a character next to the cursor</p>

<p>X : Delete character to the left of cursor</p>

<p>P : Paste line before the cursor</p>

<p>p : Paste line after the cursor</p>

<p>. : Repeat last edit command</p>

<p>u : Undo last edit (Ctrl+r redo)</p>

<p>U : Undo changes to current line</p>

<p>J : Join two lines</p>

<p>In Escape mode: C is delete the line from under the cursor to end of the line.</p>

<h3>文本补全</h3>

<p>在插入模式下，<br/>
C-p 单词补全<br/>
C-x C-l 当前文件整行补全<br/>
C-x C-k  do a dictionary lookup for the already typed characters.<br/>
C-x C-f 文件名打印</p>

<h3>大小写翻转</h3>

<p>~ :changes the lower case to upper case of current character</p>

<p>~guu :change current line from upper to lower.</p>

<p>~gUU :Change current LINE from lower to upper.</p>

<p>~guw :Change current WORD from upper to lower.</p>

<p>~gUw :Change current WORD from lower to upper.</p>

<p>g~~ :Invert case to entire line</p>

<p>:lineno goes to line in execution mode</p>

<p>:.= gives current cursor position of line</p>

<p>:= total no of lines in file</p>

<p>Ctrl+h acts as a backspace in insert mode</p>

<p>shift + 9 goes to sentence starting point in backward</p>

<p>shift + 0 goes to sentence starting point in forward</p>

<p>:e is used for editing another file with out quiting the vim editor cltrl+^ is used to toggle between the two files.</p>

<p>:syn on command in vimrc file will highlight the syntax during inserting the contents in program.</p>

<hr />

<p>Opening Man page from VIM</p>

<p>K (Shift+k) will diplays the man page of current word under the cursor</p>

<hr />

<p>Splitting Windows</p>

<p>:sp will split the window</p>

<p>:q to quit from current split window</p>

<p>Crtl+ww navigate through another file</p>

<p>:bnext (or :bn) go to next buffer</p>

<p>:bprev (or :bp) go to previous buffer</p>

<p>:bd delete a buffer (close a file)</p>

<p>Ctrl+ws Split windows</p>

<p>Ctrl+ww Switch between windows</p>

<p>Ctrl+wq Quit a window</p>

<p>Ctrl+wv Split windows vertically.</p>

<hr />

<p>Set Options</p>

<p>:set showmode - will show the current mode</p>

<p>:set autowrite - will write into file when we are toggling between two files with in editor.</p>

<p>:set autoindent - it is used for intendation the code.</p>

<p>Displaying Line Numbers</p>

<p>From Command Mode</p>

<p>:set nu [OR] :set number Display line numbers It will not save in file after closing the file.</p>

<p>:set nonu [OR] :set nonumber Hide line numbers</p>

<p>:set nomagic - will special character meaning, like * as some meaning when searching</p>

<p>:set tabstop - will set the spaces of tab key default it will 8 spaces</p>

<p>:set showmatch - will show the match of that brace default it will be setted.</p>

<p>:set spell will set the spell checking and high light wrong spell words.</p>

<hr />

<p>Folding</p>

<p>If we want to folding some few lines in vim file:</p>

<p>First select the lines after type :fold</p>

<p>The selected line is folded.</p>

<p>If we want to open the folded lines use "zo".</p>

<p>If we want to close the folding lines use zc".</p>

<p>zR Unfold all folded lines in file.</p>

<p>za Open/close (toggle) a folded group of lines.</p>

<p>zA Open a closed fold or close an open fold recursively.</p>

<p>zc Close a folded group of lines.</p>

<p>zC Close all folded lines recursively.</p>

<p>zd Delete a folded line.</p>

<p>zD Delete all folded lines recursively.</p>

<p>zE Eliminate all folded lines in file.</p>

<p>zF Create "N" folded lines.</p>

<hr />

<p>Recording</p>

<p>Insert mode type 1.
Escape mode.
q a press q buffer name
copy and paste.
Ctrl+a increments the number in current cursor
Ctrl+x decrements the number in current cursor
q to quit from recording
to execute the recording buffer:
10 @ buffername(a)</p>

<p>Ctrl + a => increase a number under the cursor.</p>

<p>Ctrl + x => decrease a number under the cursor.</p>

<hr />

<p>Mapping a key</p>

<p>In vim editor we can map the key for our requirement for that we use map command</p>

<p>Syntax: :map keyname work
Eg: :map <F2> :w - will save the file when F2 key pressed in command mode.</p>

<p>The key can be unmapped by unmap command
Syntax: :unmap</p>

<p>This mapping key is useful for compiling and executing a program</p>

<p>Abbreviation</p>

<p>Abbreviation is used in this vim editor
Syntax: :ab abbreviatedword explanation
Eg: :ab w work</p>

<hr />

<p>Ctrl+f forward scroll screen</p>

<p>Ctrl+b backward scroll screen</p>

<p>Ctrl-d Scroll down one half of a page</p>

<p>Ctrl-u Scroll up one half of a page</p>

<p>. will execute the last command in execution mode</p>

<p>In split window N goes backward to navigate</p>

<p>^w+ resizing the current split window to larging</p>

<p>^w- To decreasing the size of current split window</p>

<p>p put after current cursor</p>

<p>P put before the current cursor</p>

<p>In Insert mode Ctrl+w is used to cut the current word.</p>

<p>we can open multiple file at same time by passing all filename in vim command in single line.
:next is used to go to next file.</p>

<p>J concatenates the line by deleting the end of line</p>

<p>:set aw this command ensures that file saved automatically before switching.</p>

<p>: on removes all other windows in split window and current window will become the full screen.</p>

<p>Buffer can be used in this file to create buffer "buffername commands output command is stored in buffername.
Eg: "a3yy - copy the 3 lines and stored in a buffer</p>

<p>We can replace the particular word in particular range of line
Syntax: %10s/new/old/g - global</p>

<p>: pwd Print the current directory name.</p>

<hr />

<p>p and P differs on entire line and part of line deleted or yanked.</p>

<p>P places it left when word is deleted or cutted or yanked.</p>

<p>p places it right when word is deleted or cutted or yanked.</p>

<p>P places it above when entire line is deleted or yanked.</p>

<p>p places it below when entire line is deleted or yanked.</p>

<p>In Insert Mode</p>

<p>^t give tab in beggining of a line</p>

<p>^y copies above character and paste</p>

<p>^u undo the operation</p>

<p>^i gives tab in current position</p>

<p>^o goes to command mode and accept only one command and return back to insert mode</p>

<p>^a place the buffer which has inserted text after opening the file.</p>

<p>^j and ^m acts as a enter key</p>

<p>^k insert before the current position</p>

<p>^c goes to command mode</p>

<p>In execution shift>> acts as tab instead of tab character</p>

<hr />

<p>B,W,E navigate between words but they ignore punctuations.</p>

<p>:.!tr '[a-z]' '[A-Z]' - will convert case lower to upper in current line</p>

<p>:map r :w<sup>V<sup>M</sup></sup> will save the file when press r in command mode</p>

<p>^M is set to be enter key in mapping</p>

<p>Visual mode.</p>

<p>Shift+v is to select a line
Ctrl+v is to select a block of text.</p>

<p>gv is used to reselect the last selection part in visual mode.</p>

<p>If you select some lines in visual mode using Ctrl+v or Shift+v.
later you want to select last selection in lines use gv.</p>

<p>% keystroke</p>

<p>The % is used to match the item under the cursor. The item under the cursor can be a parenthesis, a curly bracket or a square bracket. By pressing the % key the cursor will jump to the corresponding match.</p>

<p>You can open your .vimrc file in your vim file itself. See the following example</p>

<p>Code:</p>

<p>:e ~/.vimrc</p>

<p>[or]</p>

<p>Code:</p>

<p>:e $MYVIMRC</p>

<p>For C coding in VIM</p>

<p>gd keystroke
The gd keystroke stands for Goto Declaration
With the cursor on x if you hit gd the cursor will take you to the declaration of x.</p>

<p>A similar keystroke is gD.
This takes you to the global declaration of the variable under the cursor.</p>

<p>Automatically indent code.</p>

<p>:set cindent
It automatically indent the C coding file.</p>

<p>single quot dot ('.) is go to the last modification line in a file.</p>

<p>(`") back tick and double quote is goes to the last modification character.</p>

<p>:history - list the .viminfo informations ( recent commands executed in vim.)</p>

<p>q: - it will open a list on executed commands in separate window</p>

<p>Encrypting.</p>

<p>If you want to set Encrypt key(password) to your file use the following command</p>

<p>Code:</p>

<p>:X</p>

<p>While opening a file you need to give the Encryption key.</p>

<p>Vim Command Line options.</p>

<p>vim + file_name</p>

<ul>
<li>it will place the cursor at end of the after opening.</li>
</ul>


<p>+n it will place the cursor at nth line of the file.</p>

<p>Ex: vim +3 fine_name it place the cursor at 3rd line of the file.</p>

<p>vim +/pattern filename</p>

<p>+/pattern ( vim +/hi filename). the cursor is first occurrence of the pattern line</p>

<p>+n/pattern ( vim +3/hi filename) cursor is nth occurrence of the line.</p>

<p>if you want to search a pattern like "Welcome to vim", see the following examples.</p>

<p>quote the string.</p>

<p>Code:</p>

<p>vim +/"to vim" filename</p>

<p>escape the space.</p>

<p>Code:</p>

<p>vim +/to\ vim a</p>

<p>-R Option is used to open a file in read only mode(you can't edit that file.</p>

<p>:e! returns you to the last saved version of the file, so you can start over.</p>

<p>yl is used to copy a single character.</p>

<p>^ Move to first non-blank character of current line.</p>

<p>n| Move to column n of current line.</p>

<p>Current Line Searches</p>

<p>fx Find (move cursor to) next occurrence of x in the line, where x stands for any character.</p>

<p>Fx Find (move cursor to) previous occurrence of x in the line.</p>

<p>tx Find (move cursor to) character before next occurrence of x in the line.</p>

<p>Tx Find (move cursor to) character after previous occurrence of x in the line.</p>

<p>; Repeat previous find command in same direction.</p>

<p>, Repeat previous find command in opposite direction.</p>

<h3>vim全局替换</h3>

<p>()代替单词<br/>
\|或<br/>
/(bred)\|(help)\|搜索文件中的bred或者help等单词</p>

<h3>vim删除特定行</h3>

<p>:g/profile/d<br/>
删除所有含有profile的行</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learing bash笔记]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/03/04/linux_bash/"/>
    <updated>2012-03-04T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/03/04/linux_bash</id>
    <content type="html"><![CDATA[<h3>第一章</h3>

<p>cd - ：返回到之前的文件夹。用于工作路径的跳转。<br/>
\ ' "引用键，可以取消特殊字符的含义，各个功能有强弱，其中'为强取消."为若取消，\仅仅取消一个字符的含义。使用上面这三个可以在命令过长时取消回车的含义，一般终端会提示>作为提示符号。<br/>
ctrl+m在终端中相当于回车<br/>
ctrl+d DELETE<br/>
ctrl+j BACKSPACE<br/>
stty --all查看当前终端的所有ctrl配置。<br/>
在shell中，使用help中的通配符时，需要使用<code>''</code>将对应的通配符引用起来，如help 're*'; help 're??'等。</p>

<!--more-->


<h3>第二章 Command-Line Editing</h3>

<p>改变shell的编辑模式使用set命名<br/>
set -o emacs 或者 set -o vi<br/>
vi模式编辑中的一些基本知识</p>

<h4>字符移动</h4>

<p>vi模式中有两种词的概念，一种是non-blank，这些就是所有的非空字符便是这种概念，另一种是word，这些是仅仅由字母数字以及_组成的，其他的均不算。<br/>
h 左移一个字符<br/>
l 右移一个字符<br/>
w 右移一个词word<br/>
b 左移一个词word<br/>
W 下一个non-blank的开始<br/>
B 前一个non-blank的开始<br/>
e 当前词word的最后<br/>
E 当前词non-blank的最后<br/>
0 行的开始<br/>
^ non-blank的开始<br/>
$ 行的结束</p>

<h4>插入改变文本</h4>

<p>i<br/>
a append<br/>
I beginning<br/>
A end of line<br/>
R</p>

<h4>删除指令</h4>

<p>dh 向后删除一个字符<br/>
dl 向前删除一个字符<br/>
db 向后删除一个词<br/>
dw 向前删除一个词<br/>
dB 向后删除一个非空区域<br/>
dW向前删除一个非空区域<br/>
d$ 删除到行尾<br/>
d0 删除到行首</p>

<p>D d$<br/>
dd 0d$<br/>
C c$<br/>
cc 0c$<br/>
X dl<br/>
x dh</p>

<h4>历史中穿梭</h4>

<p>k - backward<br/>
j + forward<br/>
G   move to line given by repeat count<br/>
/string search backward<br/>
?string search forward<br/>
n       repeat the same as previous<br/>
N       repeat in opposite direction of previous</p>

<h4>字符寻找</h4>

<p>fx move right <br/>
Fx move left<br/>
tx move right (until, back one space)<br/>
Tx move left (until, forward one space)<br/>
; redo last finding<br/>
, redo last finding in opposite direction</p>

<h4>文本补全</h4>

<p>ESC \<br/>
*</p>

<h4>混杂命令</h4>

<p>~ 翻转大小写<br/>
- 将上一个命令的最后一个参数添加到当前行<br/>
ctrl-l 清空屏幕<br/>
# 注释符号<br/>
注意上述命令均需在vi的命令模式下输入，不能在输入模式下输入</p>

<h5>fc</h5>

<p>fc -l列出之前的命令，带编号。</p>

<h4>bash快捷键</h4>

<p>C-A 行开始<br/>
C-E 行结束<br/>
C-F 右移<br/>
C-B 左移<br/>
C-K 整行删除<br/>
C-P 向上翻阅历史命令<br/>
C-N 向下翻阅历史命令<br/>
C-R 搜索历史命令</p>

<h4>bash自定义中最重要四种特征</h4>

<p>特殊文件：.bashrc,.bash_log,.bash_profile<br/>
别名：alias<br/>
变量：var=value(等号两侧不能有空格）<br/>
选项</p>
]]></content>
  </entry>
  
</feed>
