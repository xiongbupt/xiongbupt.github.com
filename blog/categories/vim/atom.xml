<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: VIM | Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-10T20:49:49+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VIM正则表达式学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/vim_regex_learning/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/vim_regex_learning</id>
    <content type="html"><![CDATA[<h2>VIM正则表达式</h2>

<p>之前粗略的看了正则表达式的一些内容，但是在VIM中一直用的很少，刚才无意间看到了使用VIM对词进行大小写转换，中间出现了一些正则表达式的内容，从网上找了些内容，觉得可以留下来做个笔记，供以后自己参考。<br/>
文章的主要内容参考<a href="http://qianjigui.iteye.com/blog/368449" title="VIM中的正则表达式">该博客</a>。</p>

<!--more-->


<h3>量词</h3>

<p>VIM中的量词与perl相比</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">VIM    </th>
<th align="center">Perl   </th>
<th align="center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">*      </td>
<td align="center">*      </td>
<td align="center">0个或多个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">+     </td>
<td align="center">+      </td>
<td align="center">1个或多个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">\?或\= </td>
<td align="center">?     </td>
<td align="center">0个或1个(匹配优先)，\?不能在 ? 命令（逆向查找）中使用</td>
</tr>
<tr>
<td></td>
<td align="center">{n,m} </td>
<td align="center">{n,m}  </td>
<td align="center">n个到m个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{n,}  </td>
<td align="center">{n,}   </td>
<td align="center">最少n个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{,m}  </td>
<td align="center">{,m}   </td>
<td align="center">最多m个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{n}   </td>
<td align="center">{n}    </td>
<td align="center">恰好n个</td>
</tr>
<tr>
<td></td>
<td align="center">{-n,m}</td>
<td align="center">{n,m}? </td>
<td align="center">n个到m个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-}   </td>
<td align="center">*?     </td>
<td align="center">0个或多个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-1,} </td>
<td align="center">+?     </td>
<td align="center">1个或多个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-,1} </td>
<td align="center">??     </td>
<td align="center">0个或1个(忽略优先)</td>
</tr>
</tbody>
</table>


<h3>环视和固化分组</h3>

<p>这个内容之前没有接触过，只是简单的摘抄下来，后面再进行研究了。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">vim        </th>
<th align="center">Perl   </th>
<th align="center">意义           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\@=        </td>
<td align="center">(?=    </td>
<td align="center">顺序环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@!        </td>
<td align="center">(?!    </td>
<td align="center">顺序否定环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@&lt;=       </td>
<td align="center">(?&lt;=   </td>
<td align="center">逆序环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@&lt;!       </td>
<td align="center">(?&lt;!   </td>
<td align="center">逆序否定环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@>        </td>
<td align="center">(?>    </td>
<td align="center">固化分组</td>
</tr>
<tr>
<td></td>
<td align="center">\%(atom)  </td>
<td align="center">(?:    </td>
<td align="center">非捕获型括号</td>
</tr>
</tbody>
</table>


<p>和perl稍有不同的是，vim中的环视和固化分组的模式的位置与perl不同。例如，查找紧跟在 foo 之后的 bar，perl将模式写在环视的括号内，而vim将模式写在环视的元字符之前。
Perl的写法
{% codeblock lang:perl %}
/(?&lt;=foo)bar/
{% endcodeblock %}
vim的写法
{% codeblock lang:bash %}
/(foo)\@&lt;=bar
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM使用正则表达式改变大小写]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/vim_regex_case/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/vim_regex_case</id>
    <content type="html"><![CDATA[<h2>VIM使用正则表达式改变字符大小写</h2>

<p>转载自<a href="http://vim.wikia.com/wiki/Changing_case_with_regular_expressions" title="VIM中使用正则表达式">vim_wiki</a><br/>
在VIM中使用正则表达式来改变单词的大小写是已经很简单的事情。<br/>
只需要简单的将\U或者\L放在想要更改的回溯引用的前面，将\E放置在回溯引用的后面，VIM就会将回溯应用中的大小写进行相应的转换。使用\u和\l（这时不需要在最后使用\E）将会仅仅改变回溯引用中的第一个字符。</p>

<pre><code>回溯引用是正则表达式中的一部分，用来表明匹配前面的一个部分。最常用的回溯表达式有&amp;,\1,\2,\3,...,\9。  
</code></pre>

<!--more-->


<h2>示例</h2>

<ul>
<li>将整篇文档内容全部小写
{% codeblock lang:bash %}
:%s/.*/\L&amp;/g
{% endcodeblock %}
  &amp;是一个用来表明匹配前面全部的回溯引用的记录符号。</li>
<li>将紧跟着&lt;后面的字符全部大写，比如在HTML标签中使用。
{% codeblock lang:bash %}
:%s/&lt;(\w*)/&lt;\U\1/g
{% endcodeblock %}</li>
</ul>


<h2>注释</h2>

<p>注意使用<code>gu</code>和<code>gU</code>命令加上移动操作也可以实现大小写的转换。<br/>
比如<code>ggguG</code>可以实现将全文全部小写，其中，<code>gg</code>代表到达文章的首部，<code>gu</code>代表将文字转换为小写，<code>G</code>代表到达文章末尾（EOF）。</p>

<p>使用\0作为参考引用，而不是使用每个单独命名，比如（\1，\2等），下面的例子演示了\0的使用。</p>

<blockquote><p>This regex upper cases an explicit set of words to uppercase in a file.</p></blockquote>

<pre><code>`:%s/\(select\)\|\(order)\|\(by\)\|\(from\)\|\(where\)/\U\0/g`
</code></pre>

<blockquote><p>Not rocket science, but otherwise you'd have to do this:</p></blockquote>

<pre><code>`:%s/\(select\)\|\(order)\|\(by\)\|\(from\)\|\(where\)/\U\1\U\2\U\3\U\4\U\5/g`
</code></pre>

<blockquote><p>[edit:  Much easier to just use this, where either 0 or 1 will work:]</p></blockquote>

<pre><code>`:%s/\(select\|order\|by\|from\|where\)/\U\1/g`
</code></pre>

<p>上面的三个操作均是将一文中的几个关键词转换为大写操作，显然方法2显得很不合适，方法1和方法3要高明许多。</p>

<p>将HTML标签全部大写<br/>
{% codeblock lang:html %}
:%s/&lt;\/\=(\w+)>/\U&amp;/g
{% endcodeblock %}</p>

<p>将HTML标签全部小写<br/>
{% codeblock lang:html %}
%s/&lt;\/\=(\w+)>/\L&amp;/g
{% endcodeblock %}</p>

<p>上面的例子中的<code>\=</code>可以替换成为<code>\?</code>，两个符号的意思都是匹配0个或者1个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM使用便签]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/03/30/vim-cookbook/"/>
    <updated>2012-03-30T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/03/30/vim-cookbook</id>
    <content type="html"><![CDATA[<p>转载自<a href="http://www.oualline.com/vim-cook.html" title="vim_cook_book">vim_cook_book</a></p>

<p>字符翻转
{% codeblock lang:bash %}
xp
{% endcodeblock %}</p>

<p>可交换的替换单词
{% codeblock lang:bash %}
1G              #到第一行
/idiot<enter>   #搜索单词idiot
cwmanager       #将idiot替换为manager
n               #搜索下一个idiot
.               #重复上面的替换操作
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
%s/&lt;idiot>/manager/gc #直接在命令行模式下进行输入，使用全局替换的方式
{% endcodeblock %}
/\&lt;idiot\>/</p>

<blockquote><p>This text specifies the text we are looking for wand want. The &lt; tells Vim to match a word start and the > tells Vim to match the end of a word.<br/>
\&lt;表明匹配的是一个单词的开始，\>表明匹配的是一个单词的结束。</p></blockquote>

<!--more-->


<p>检查Makefile错误的好方法，由于命令是以tab开始的，若是空格将有错误
{% codeblock lang:bash %}
:set list
{% endcodeblock %}
可以显示出空格和tab的区别，tab是<code>^I</code></p>

<p>vim读取man文件
{% codeblock lang:bash %}
man subject|ul -i|vim -
{% endcodeblock %}</p>

<p>vim移除行末的空格
{% codeblock lang:bash %}
:1,$s/[tab]*$//
{% endcodeblock %}</p>

<p>将Last, First改为First Last
{% codeblock lang:bash %}
:1,$s/([<sup>,]<em>),(.</em>$)/\2\1/</sup>
{% endcodeblock %}</p>

<blockquote><p>The ( ... ) delimiters are used to inform the editor that the text that matches the regular expression side is to be treated special.<br/>
(...)分隔符告知编辑器将括号内的内容应该被当做正则表达式来对待（？？？）</p></blockquote>

<p>操作示例</p>

<pre><code>if ( x&gt;3 ) {
  "Hello *world!"           ds"         Hello world!
  [123+4*56]/2              cs])        (123+456)/2
  "Look ma, I'm *HTML!"     cs"&lt;q&gt;      &lt;q&gt;Look ma, I'm HTML!&lt;/q&gt;
  if *x&gt;3 {                 ysW(        if ( x&gt;3 ) {
  my $str = *whee!;         vllllS'     my $str = 'whee!';
</code></pre>

<p>上述操作中，*代表的是光标所在位置，在普通模式下，输入中间的命令，将会得到后面的效果</p>

<p>{% codeblock lang:bash %}
vim --startuptime timefile the_file_you_want_to_edit
{% endcodeblock %}
查看vim启动时间所占用的时间比</p>

<p>set list查看不可见字符</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim_tips摘抄]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/03/06/vim_tips/"/>
    <updated>2012-03-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/03/06/vim_tips</id>
    <content type="html"><![CDATA[<p>:w<br/>
:wq<br/>
:q<br/>
:q!<br/>
ZZ<br/>
:10,20w filename<br/>
:x</p>

<h3>光标移动</h3>

<p>h : Move left</p>

<p>i : Move right</p>

<p>j : Move down</p>

<p>k : Move up</p>

<ul>
<li><p>: act as j in command mode</p></li>
<li><p>: act as k in command mode</p></li>
</ul>


<p>w : Move to next word</p>

<p>W : Move to next blank delimited word</p>

<p>b : Move to the beginning of the word</p>

<p>B : Move to the beginning of blank delimiter word</p>

<p>e : Move to the end of the word</p>

<p>E : Move to the end of Blank delimited word</p>

<p>ge : jump to previous word-ending</p>

<p>gE : jump to previous word-ending, ignore punctuation(忽略标点符号）</p>

<!--more-->


<p>g_ : jump to last non-blank character of the line</p>

<p>( : Move a sentence back</p>

<p>) :Move a sentence forward</p>

<p>{ : Move a paragraph back</p>

<p>} : Move a paragraph forward</p>

<p>0 : Move to the beginning of the line [ 0 and | acts as a Home key it goes to beginning of a line ]</p>

<p>$ : Move to the end of the line, acts as a End key</p>

<p>:1 : Move to the first line of the file</p>

<p>G : Move to the last line of the file</p>

<p>nG : Move to nth line of the file</p>

<p>:n : Move to nth line of the file</p>

<p>fc :Move forward to c (c= character)</p>

<p>Fc : Move back to c</p>

<p>H :Move to top of screen</p>

<p>M :Move to middle of screen</p>

<p>L : Move to bottom of screen</p>

<h3>插入文本</h3>

<p>i : Insert before cursor</p>

<p>I : Insert before line</p>

<p>a : Append after cursor</p>

<p>A : Append after line</p>

<p>o : Open a new line after current line</p>

<p>O : Open a new line before current line</p>

<p>r : Replace one character</p>

<h3>删除、剪切、复制文本</h3>

<p>d^ : Deletes from current cursor position to the beginning of the line.</p>

<p>d$ : Deletes from current cursor position to the end of the line.</p>

<p>dw : Deletes from current cursor position to the end of the word.</p>

<p>dd : Deletes three lines from current cursor position downwards.(also :d)</p>

<p>yy : Yank the current line (also :y)</p>

<p>x : Delete a character next to the cursor</p>

<p>X : Delete character to the left of cursor</p>

<p>P : Paste line before the cursor</p>

<p>p : Paste line after the cursor</p>

<p>. : Repeat last edit command</p>

<p>u : Undo last edit (Ctrl+r redo)</p>

<p>U : Undo changes to current line</p>

<p>J : Join two lines</p>

<p>In Escape mode: C is delete the line from under the cursor to end of the line.</p>

<h3>文本补全</h3>

<p>在插入模式下，<br/>
C-p 单词补全<br/>
C-x C-l 当前文件整行补全<br/>
C-x C-k  do a dictionary lookup for the already typed characters.<br/>
C-x C-f 文件名打印</p>

<h3>大小写翻转</h3>

<p>~ :changes the lower case to upper case of current character</p>

<p>~guu :change current line from upper to lower.</p>

<p>~gUU :Change current LINE from lower to upper.</p>

<p>~guw :Change current WORD from upper to lower.</p>

<p>~gUw :Change current WORD from lower to upper.</p>

<p>g~~ :Invert case to entire line</p>

<p>:lineno goes to line in execution mode</p>

<p>:.= gives current cursor position of line</p>

<p>:= total no of lines in file</p>

<p>Ctrl+h acts as a backspace in insert mode</p>

<p>shift + 9 goes to sentence starting point in backward</p>

<p>shift + 0 goes to sentence starting point in forward</p>

<p>:e is used for editing another file with out quiting the vim editor cltrl+^ is used to toggle between the two files.</p>

<p>:syn on command in vimrc file will highlight the syntax during inserting the contents in program.</p>

<hr />

<p>Opening Man page from VIM</p>

<p>K (Shift+k) will diplays the man page of current word under the cursor</p>

<hr />

<p>Splitting Windows</p>

<p>:sp will split the window</p>

<p>:q to quit from current split window</p>

<p>Crtl+ww navigate through another file</p>

<p>:bnext (or :bn) go to next buffer</p>

<p>:bprev (or :bp) go to previous buffer</p>

<p>:bd delete a buffer (close a file)</p>

<p>Ctrl+ws Split windows</p>

<p>Ctrl+ww Switch between windows</p>

<p>Ctrl+wq Quit a window</p>

<p>Ctrl+wv Split windows vertically.</p>

<hr />

<p>Set Options</p>

<p>:set showmode - will show the current mode</p>

<p>:set autowrite - will write into file when we are toggling between two files with in editor.</p>

<p>:set autoindent - it is used for intendation the code.</p>

<p>Displaying Line Numbers</p>

<p>From Command Mode</p>

<p>:set nu [OR] :set number Display line numbers It will not save in file after closing the file.</p>

<p>:set nonu [OR] :set nonumber Hide line numbers</p>

<p>:set nomagic - will special character meaning, like * as some meaning when searching</p>

<p>:set tabstop - will set the spaces of tab key default it will 8 spaces</p>

<p>:set showmatch - will show the match of that brace default it will be setted.</p>

<p>:set spell will set the spell checking and high light wrong spell words.</p>

<hr />

<p>Folding</p>

<p>If we want to folding some few lines in vim file:</p>

<p>First select the lines after type :fold</p>

<p>The selected line is folded.</p>

<p>If we want to open the folded lines use "zo".</p>

<p>If we want to close the folding lines use zc".</p>

<p>zR Unfold all folded lines in file.</p>

<p>za Open/close (toggle) a folded group of lines.</p>

<p>zA Open a closed fold or close an open fold recursively.</p>

<p>zc Close a folded group of lines.</p>

<p>zC Close all folded lines recursively.</p>

<p>zd Delete a folded line.</p>

<p>zD Delete all folded lines recursively.</p>

<p>zE Eliminate all folded lines in file.</p>

<p>zF Create "N" folded lines.</p>

<hr />

<p>Recording</p>

<p>Insert mode type 1.
Escape mode.
q a press q buffer name
copy and paste.
Ctrl+a increments the number in current cursor
Ctrl+x decrements the number in current cursor
q to quit from recording
to execute the recording buffer:
10 @ buffername(a)</p>

<p>Ctrl + a => increase a number under the cursor.</p>

<p>Ctrl + x => decrease a number under the cursor.</p>

<hr />

<p>Mapping a key</p>

<p>In vim editor we can map the key for our requirement for that we use map command</p>

<p>Syntax: :map keyname work
Eg: :map <F2> :w - will save the file when F2 key pressed in command mode.</p>

<p>The key can be unmapped by unmap command
Syntax: :unmap</p>

<p>This mapping key is useful for compiling and executing a program</p>

<p>Abbreviation</p>

<p>Abbreviation is used in this vim editor
Syntax: :ab abbreviatedword explanation
Eg: :ab w work</p>

<hr />

<p>Ctrl+f forward scroll screen</p>

<p>Ctrl+b backward scroll screen</p>

<p>Ctrl-d Scroll down one half of a page</p>

<p>Ctrl-u Scroll up one half of a page</p>

<p>. will execute the last command in execution mode</p>

<p>In split window N goes backward to navigate</p>

<p>^w+ resizing the current split window to larging</p>

<p>^w- To decreasing the size of current split window</p>

<p>p put after current cursor</p>

<p>P put before the current cursor</p>

<p>In Insert mode Ctrl+w is used to cut the current word.</p>

<p>we can open multiple file at same time by passing all filename in vim command in single line.
:next is used to go to next file.</p>

<p>J concatenates the line by deleting the end of line</p>

<p>:set aw this command ensures that file saved automatically before switching.</p>

<p>: on removes all other windows in split window and current window will become the full screen.</p>

<p>Buffer can be used in this file to create buffer "buffername commands output command is stored in buffername.
Eg: "a3yy - copy the 3 lines and stored in a buffer</p>

<p>We can replace the particular word in particular range of line
Syntax: %10s/new/old/g - global</p>

<p>: pwd Print the current directory name.</p>

<hr />

<p>p and P differs on entire line and part of line deleted or yanked.</p>

<p>P places it left when word is deleted or cutted or yanked.</p>

<p>p places it right when word is deleted or cutted or yanked.</p>

<p>P places it above when entire line is deleted or yanked.</p>

<p>p places it below when entire line is deleted or yanked.</p>

<p>In Insert Mode</p>

<p>^t give tab in beggining of a line</p>

<p>^y copies above character and paste</p>

<p>^u undo the operation</p>

<p>^i gives tab in current position</p>

<p>^o goes to command mode and accept only one command and return back to insert mode</p>

<p>^a place the buffer which has inserted text after opening the file.</p>

<p>^j and ^m acts as a enter key</p>

<p>^k insert before the current position</p>

<p>^c goes to command mode</p>

<p>In execution shift>> acts as tab instead of tab character</p>

<hr />

<p>B,W,E navigate between words but they ignore punctuations.</p>

<p>:.!tr '[a-z]' '[A-Z]' - will convert case lower to upper in current line</p>

<p>:map r :w<sup>V<sup>M</sup></sup> will save the file when press r in command mode</p>

<p>^M is set to be enter key in mapping</p>

<p>Visual mode.</p>

<p>Shift+v is to select a line
Ctrl+v is to select a block of text.</p>

<p>gv is used to reselect the last selection part in visual mode.</p>

<p>If you select some lines in visual mode using Ctrl+v or Shift+v.
later you want to select last selection in lines use gv.</p>

<p>% keystroke</p>

<p>The % is used to match the item under the cursor. The item under the cursor can be a parenthesis, a curly bracket or a square bracket. By pressing the % key the cursor will jump to the corresponding match.</p>

<p>You can open your .vimrc file in your vim file itself. See the following example</p>

<p>Code:</p>

<p>:e ~/.vimrc</p>

<p>[or]</p>

<p>Code:</p>

<p>:e $MYVIMRC</p>

<p>For C coding in VIM</p>

<p>gd keystroke
The gd keystroke stands for Goto Declaration
With the cursor on x if you hit gd the cursor will take you to the declaration of x.</p>

<p>A similar keystroke is gD.
This takes you to the global declaration of the variable under the cursor.</p>

<p>Automatically indent code.</p>

<p>:set cindent
It automatically indent the C coding file.</p>

<p>single quot dot ('.) is go to the last modification line in a file.</p>

<p>(`") back tick and double quote is goes to the last modification character.</p>

<p>:history - list the .viminfo informations ( recent commands executed in vim.)</p>

<p>q: - it will open a list on executed commands in separate window</p>

<p>Encrypting.</p>

<p>If you want to set Encrypt key(password) to your file use the following command</p>

<p>Code:</p>

<p>:X</p>

<p>While opening a file you need to give the Encryption key.</p>

<p>Vim Command Line options.</p>

<p>vim + file_name</p>

<ul>
<li>it will place the cursor at end of the after opening.</li>
</ul>


<p>+n it will place the cursor at nth line of the file.</p>

<p>Ex: vim +3 fine_name it place the cursor at 3rd line of the file.</p>

<p>vim +/pattern filename</p>

<p>+/pattern ( vim +/hi filename). the cursor is first occurrence of the pattern line</p>

<p>+n/pattern ( vim +3/hi filename) cursor is nth occurrence of the line.</p>

<p>if you want to search a pattern like "Welcome to vim", see the following examples.</p>

<p>quote the string.</p>

<p>Code:</p>

<p>vim +/"to vim" filename</p>

<p>escape the space.</p>

<p>Code:</p>

<p>vim +/to\ vim a</p>

<p>-R Option is used to open a file in read only mode(you can't edit that file.</p>

<p>:e! returns you to the last saved version of the file, so you can start over.</p>

<p>yl is used to copy a single character.</p>

<p>^ Move to first non-blank character of current line.</p>

<p>n| Move to column n of current line.</p>

<p>Current Line Searches</p>

<p>fx Find (move cursor to) next occurrence of x in the line, where x stands for any character.</p>

<p>Fx Find (move cursor to) previous occurrence of x in the line.</p>

<p>tx Find (move cursor to) character before next occurrence of x in the line.</p>

<p>Tx Find (move cursor to) character after previous occurrence of x in the line.</p>

<p>; Repeat previous find command in same direction.</p>

<p>, Repeat previous find command in opposite direction.</p>

<h3>vim全局替换</h3>

<p>()代替单词<br/>
\|或<br/>
/(bred)\|(help)\|搜索文件中的bred或者help等单词</p>

<h3>vim删除特定行</h3>

<p>:g/profile/d<br/>
删除所有含有profile的行</p>
]]></content>
  </entry>
  
</feed>
