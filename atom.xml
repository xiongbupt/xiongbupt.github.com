<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-07T06:52:06+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress增加Tag标签]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/07/octopress-add-tag/"/>
    <updated>2012-06-07T06:23:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/07/octopress-add-tag</id>
    <content type="html"><![CDATA[<h2>前因</h2>

<p>由于之前参考中文的搜索，结果都不理想，推翻重来，直接使用<a href="http://www.google.com/">google</a>使用<code>octopress tag</code>关键词搜索到的<a href="http://aijazansari.com/2012/01/07/tag-clouds-with-octopress/">第一个返回结果</a>来修改，下面记录如下。</p>

<h3>显示所有的便签列表</h3>

<p>修改<code>source/_layouts/post.html</code>文件，使它们include一个名字为<code>tags.html</code>的新文件。
&#8230;</p>

<pre><code>   {% include post/author.html %}
   {% include post/date.html %}{% if updated %}{{ updated }}{% else %}{{ time }}{% endif %}
   {% include post/categories.html %}
</code></pre>

<ul>
<li>   {% include post/tags.html %}
 </p>
 {% unless page.sharing == false %}
   {% include post/sharing.html %}
&#8230;
创建一个新文件<code>source/_includes/post/tags.html</code>，整个文件的内容如下所示：</li>
</ul>


<div id="tag_list">
    Tags:
    <ul id="tags_ul">
{% for t in page.tags  %}
        <li><a href="http://xiongbupt.github.com/tags/{{t}}/">{{t}}</a></li>
{% endfor %}
    </ul>
</div>


<p>在sass/custom/_styles.css文件中添加如下内容：</p>

<pre><code>div#tag_list {
    font-size: 12pt;
}

#tags_ul {
    display: inline;
}

#tags_ul li:last-child:after {
  content: "";
}

#tags_ul li:after {
  content: ", ";
}

#tags_ul li {
    display: inline;
}
</code></pre>

<h3>创建tag文件和tag云</h3>

<p>使用作者提供的perl脚本文件。</p>

<h3>显示tag云标签</h3>

<p>为了在右侧显示云标签，需要修改<code>_config.yaml</code>文件，添加</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM用户手册27笔记]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/vim_help_read/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/vim_help_read</id>
    <content type="html"><![CDATA[<p>VIM的查找命令与模式，这章节和正则表达式相关，可以重点查阅下。</p>

<h1>大小写忽略</h1>

<p>ignorecase  忽视大小写<br/>
smartcase   若只有小写，可匹配大小写；若含有大写，则严格匹配  <br/>
特定模式中的大小写可以使用\C来严格匹配，\c可以用来通用匹配，不区分大小写</p>

<h1>无折返查找</h1>

<p><code>:set nowrapscan</code>简单的说就是在查找到文件结束处后不再返回文件开始处重新查找。</p>

<h1>查找偏移</h1>

<p><code>/pattern/2</code>，这个查找将会在单词pattern的后两行。 <br/>
* 匹配一个可选项，使用<code>\=</code>，比如</p>

<blockquote><p>/folders\=</p></blockquote>

<p>匹配的是&#8221;folder&#8221;和&#8221;folders&#8221;</p>

<ul>
<li><p>指定重复次数时，使用<code>\{n,m}</code>这样的形式。匹配n到m次，包括n和m，相当于一个闭区间。</p></li>
<li><p>匹配尽可能少的字符使用&#8217;{-n,m}`。与上面的作用类似，区别在于尽可能少的匹配。</p></li>
</ul>


<h1>多选一</h1>

<p>或的运算符是<code>\|</code>。</p>

<h1>字符范围</h1>

<table>
<thead>
<tr>
<th></th>
<th align="left">项    </th>
<th align="left">匹配         </th>
<th align="center">相当于 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">\d </td>
<td align="left">数位         </td>
<td align="center">[0-9]</td>
</tr>
<tr>
<td></td>
<td align="left">\D </td>
<td align="left">非数位          </td>
<td align="center">[<sup>0-9]</sup></td>
</tr>
<tr>
<td></td>
<td align="left">\x </td>
<td align="left">十六进制数位 </td>
<td align="center">[0-9a-fA-F]</td>
</tr>
<tr>
<td></td>
<td align="left">\X </td>
<td align="left">非十六进制数位  </td>
<td align="center">[<sup>0-9a-fA-F]</sup></td>
</tr>
<tr>
<td></td>
<td align="left">\s </td>
<td align="left">空白字符       </td>
<td align="center">[  ]     (<Tab> 和 <Space>)</td>
</tr>
<tr>
<td></td>
<td align="left">\S </td>
<td align="left">非空白字符        </td>
<td align="center">[^     ]     (非 <Tab> 和 <Space>)</td>
</tr>
<tr>
<td></td>
<td align="left">\l </td>
<td align="left">小写字母       </td>
<td align="center">[a-z]</td>
</tr>
<tr>
<td></td>
<td align="left">\L </td>
<td align="left">非小写字母        </td>
<td align="center">[<sup>a-z]</sup></td>
</tr>
<tr>
<td></td>
<td align="left">\u </td>
<td align="left">大写字母       </td>
<td align="center">[A-Z]</td>
</tr>
<tr>
<td></td>
<td align="left">\U </td>
<td align="left">非大写字母        </td>
<td align="center">[<sup>A-Z]</sup></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress尝试记录]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/octopress_use/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/octopress_use</id>
    <content type="html"><![CDATA[<p>本文主要是参考Octopress的<a href="http://octopress.org/" title="OCTOPRESS 手册">官方网址</a>进行操作，之前使用了<a href="http://www.google.com/" title="GOOGLE">google</a>搜索了若干参考，但是操作之后出现了错误，推翻重来之后，写下这篇记录，方便自己以后使用。
首先介绍下自己的环境Arch，由于之前已经使用了github的个人博客，但是之前使用的是jekyll的方式，自己不会调整那些主题，感觉有些不方便，上网找了下，发现似乎Octopress相对来说比较简单，于是在这种情况下尝试使用Octopress。至于在github上创建个人博客主页，在这里不做说明，在Octopress环境下，自己相当不清楚。</p>

<p>由于Arch已经安装了ruby，且版本是1.9.3高于octopress要求的1.9.2，使用<code>pacman</code>的方式安装了ruby之后便没有必要再安装ruby了。按照<code>arch wiki</code>中所说的方式安装rvm即可。在这些基本工作完成之后，开始安装Octopress。</p>

<h1>Octopress环境配置</h1>

<p>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You&#8217;ll be asked if you trust the .rvmrc file (say yes).
gem install bundler
bundle install
rake install</p>

<h1>Github用户页面设置</h1>

<p>参照Octopress上的将页面部署到github的<a href="http://octopress.org/docs/deploying/github/" title="OCTOPRESS Github介绍">手册</a>。<br/>
Github Pages服务要求用户使用master分支作为Web服务器上的公共目录，当直接输入用户的web网址时，重定向的是master分支的目录。因此，可以创建一个source分支来工作，然后将生成的内容推送到master分支。Octopress可以通过使用下面的命令完成上面的任务：<br/>
rake setup_github_pages<br/>
上面的操作将会完成下面的操作：
* 请求用户输入个人的Github可读可写地址，使用ssh的目录，如git@github.com:xiongbupt/xiongbupt.github.com.git这样的地址，在输入上面的命令之后，要求输入地址时输入这样一个地址即可。
* 将本来octopress分支的远端分支有origin重命名为octopress，相当于工作目录内有两个远端分支。
* 将个人的Github Pages作为默认的远程origin分支。
* 将当前分支由master转换为source分支。
* 根据之前自身输入的地址来配置个人博客的地址。
* 在_deploy目录下创建一个master分支用于来布置。</p>

<p>接下来使用<br/>
rake generate
rake deploy</p>

<p>这两个操作将会完成下面的任务：生成网页内容，将将生成的网页内容拷贝到<code>_deploy/</code>文件夹内，将这些文件添加到git跟踪目录下，提交然后将这些文件推送到master分支。因此在完成内容编辑之后，简单使用上面的两个命令就将会本地完成的编辑内容推送到远程的服务器端。</p>

<p><strong>不要忘记</strong>将源文件推送到自己的远程分支。使用下面的操作即可完成操作：
git add .
git commit -m &#8216;提交说明&#8217;
git push origin source</p>

<p><strong>注意：</strong>目前Github网站设置的默认分支是最新提交的分支，因此如果在网页显示有问题时，可以登录到Github网站上查看是否自己的版本库的默认分支是否为master分支，将默认分支调整为master即可在网页上显示内容。</p>

<h1>Github工程页面设置</h1>

<p>Github允许对于已存在的开源工程添加一个网页说明。Github会搜索工程目录下的gh-pages分支，然后将这些内容置于可以访问的类似于<code>http://username.github.com/project</code>。</p>

<p>可以通过下面的方式来公布自己的工程<code>gh-pages</code>。<br/>
rake setup_github_pages</p>

<p>这个操作将会：
* 请求工程目录库的网址url
* 将当前的origin本来指向的远程仓库imathis/octopress重命名为octopress
* 确定博客将被配置为一个子目录
* 在工程下新建_deploy文件夹，在该文件夹下建立gh-pages分支，准备配置该分支</p>

<p>接下来运行：  <br/>
rake generate
rake deploy</p>

<p>这将会生成博客内容，将生成的文件拷贝到<code>_deploy/</code>文件夹内，将它们加入到git同步库中，提交并将这些文件推送到master分支。</p>

<p>现在已经对网站的内容进行了一次提交，但是同样也应该对网站的博客的源代码进行提交。在添加了自己工程的网址作为远端仓库之后，可以进行提交，如下所示：      <br/>
git remote add origin (your repo url)
#set your new origin as the default branch
git config.branch.master.remote origin</p>

<p>在完成上述设置之后便可以使用<code>git push</code>进行推送了。</p>

<h1>自定义域名</h1>

<p>首先需要在<code>source</code>文件夹下创建一个名字为<code>CNAME</code>的文件，然后将自己的域名输入到该文件中，如下所示： <br/>
echo &#8216;your-domain.com&#8217; >> source/CNAME</p>

<p>接下来在域名的注册处添加域名记录。具体介绍参考[octopress][lab4]的介绍，此处不做详细描述。</p>

<p>sed -n &#8216;s/(category:\ )([)(\w<em>)(])/\1\3/p&#8217; </em>.md</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汇编语言学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/06/assemble_language_learn/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/06/assemble_language_learn</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM正则表达式学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/vim_regex_learning/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/vim_regex_learning</id>
    <content type="html"><![CDATA[<h1>VIM正则表达式</h1>

<p>之前粗略的看了正则表达式的一些内容，但是在VIM中一直用的很少，刚才无意间看到了使用VIM对词进行大小写转换，中间出现了一些正则表达式的内容，从网上找了些内容，觉得可以留下来做个笔记，供以后自己参考。<br/>
文章的主要内容参考<a href="http://qianjigui.iteye.com/blog/368449" title="VIM中的正则表达式">该博客</a>。</p>

<h2>量词</h2>

<p>VIM中的量词与perl相比</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">VIM    </th>
<th align="center">Perl   </th>
<th align="center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">*      </td>
<td align="center">*      </td>
<td align="center">0个或多个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">+     </td>
<td align="center">+      </td>
<td align="center">1个或多个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">\?或\= </td>
<td align="center">?     </td>
<td align="center">0个或1个(匹配优先)，\?不能在 ? 命令（逆向查找）中使用</td>
</tr>
<tr>
<td></td>
<td align="center">{n,m} </td>
<td align="center">{n,m}  </td>
<td align="center">n个到m个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{n,}  </td>
<td align="center">{n,}   </td>
<td align="center">最少n个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{,m}  </td>
<td align="center">{,m}   </td>
<td align="center">最多m个(匹配优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{n}   </td>
<td align="center">{n}    </td>
<td align="center">恰好n个</td>
</tr>
<tr>
<td></td>
<td align="center">{-n,m}</td>
<td align="center">{n,m}? </td>
<td align="center">n个到m个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-}   </td>
<td align="center">*?     </td>
<td align="center">0个或多个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-1,} </td>
<td align="center">+?     </td>
<td align="center">1个或多个(忽略优先)</td>
</tr>
<tr>
<td></td>
<td align="center">{-,1} </td>
<td align="center">??     </td>
<td align="center">0个或1个(忽略优先)</td>
</tr>
</tbody>
</table>


<h2>环视和固化分组</h2>

<p>这个内容之前没有接触过，只是简单的摘抄下来，后面再进行研究了。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">vim        </th>
<th align="center">Perl   </th>
<th align="center">意义           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\@=        </td>
<td align="center">(?=    </td>
<td align="center">顺序环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@!        </td>
<td align="center">(?!    </td>
<td align="center">顺序否定环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@&lt;=       </td>
<td align="center">(?&lt;=   </td>
<td align="center">逆序环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@&lt;!       </td>
<td align="center">(?&lt;!   </td>
<td align="center">逆序否定环视</td>
</tr>
<tr>
<td></td>
<td align="center">\@>        </td>
<td align="center">(?>    </td>
<td align="center">固化分组</td>
</tr>
<tr>
<td></td>
<td align="center">\%(atom)  </td>
<td align="center">(?:    </td>
<td align="center">非捕获型括号</td>
</tr>
</tbody>
</table>


<p>和perl稍有不同的是，vim中的环视和固化分组的模式的位置与perl不同。例如，查找紧跟在 foo 之后的 bar，perl将模式写在环视的括号内，而vim将模式写在环视的元字符之前。</p>

<p>Perl的写法</p>

<blockquote><p>/(?&lt;=foo)bar/</p></blockquote>

<p>vim的写法</p>

<blockquote><p>/(foo)\@&lt;=bar</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM使用正则表达式改变大小写]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/vim_regex_case/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/vim_regex_case</id>
    <content type="html"><![CDATA[<h1>VIM使用正则表达式改变字符大小写</h1>

<p>转载自<a href="http://vim.wikia.com/wiki/Changing_case_with_regular_expressions" title="VIM中使用正则表达式">vim_wiki</a><br/>
在VIM中使用正则表达式来改变单词的大小写是已经很简单的事情。<br/>
只需要简单的将\U或者\L放在想要更改的回溯引用的前面，将\E放置在回溯引用的后面，VIM就会将回溯应用中的大小写进行相应的转换。使用\u和\l（这时不需要在最后使用\E）将会仅仅改变回溯引用中的第一个字符。</p>

<pre><code>回溯引用是正则表达式中的一部分，用来表明匹配前面的一个部分。最常用的回溯表达式有&amp;,\1,\2,\3,...,\9。
</code></pre>

<h1>示例</h1>

<ul>
<li>将整篇文档内容全部小写</li>
</ul>


<div class="highlight"><pre><code class="bash">:%s/.*/<span class="se">\L</span>&amp;/g
</code></pre>
</div>


<pre><code>&amp;是一个用来表明匹配前面全部的回溯引用的记录符号。
</code></pre>

<ul>
<li>将紧跟着&lt;后面的字符全部大写，比如在HTML标签中使用。</li>
</ul>


<div class="highlight"><pre><code class="bash">:%s/&lt;<span class="se">\(\w</span>*<span class="se">\)</span>/&lt;<span class="se">\U\1</span>/g
</code></pre>
</div>


<h1>注释</h1>

<p>注意使用<code>gu</code>和<code>gU</code>命令加上移动操作也可以实现大小写的转换。<br/>
比如<code>ggguG</code>可以实现将全文全部小写，其中，<code>gg</code>代表到达文章的首部，<code>gu</code>代表将文字转换为小写，<code>G</code>代表到达文章末尾（EOF）。</p>

<p>使用\0作为参考引用，而不是使用每个单独命名，比如（\1，\2等），下面的例子演示了\0的使用。</p>

<blockquote><p>This regex upper cases an explicit set of words to uppercase in a file.</p>

<p><code>:%s/\(select\)\|\(order)\|\(by\)\|\(from\)\|\(where\)/\U\0/g</code></p>

<p>Not rocket science, but otherwise you&#8217;d have to do this:</p>

<p><code>:%s/\(select\)\|\(order)\|\(by\)\|\(from\)\|\(where\)/\U\1\U\2\U\3\U\4\U\5/g</code></p>

<p>[edit:  Much easier to just use this, where either 0 or 1 will work:]</p>

<p><code>:%s/\(select\|order\|by\|from\|where\)/\U\1/g</code></p></blockquote>

<p>上面的三个操作均是将一文中的几个关键词转换为大写操作，显然方法2显得很不合适，方法1和方法3要高明许多。</p>

<p>将HTML标签全部大写</p>

<blockquote><p>:%s/&lt;\/\=(\w+)>/\U&amp;/g</p></blockquote>

<p>将HTML标签全部小写</p>

<blockquote><p>:%s/&lt;\/\=(\w+)>/\L&amp;/g</p></blockquote>

<p>上面的例子中的<code>\=</code>可以替换成为<code>\?</code>，两个符号的意思都是匹配0个或者1个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个操作系统的实现笔记]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/05/os_impletion/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/05/os_impletion</id>
    <content type="html"><![CDATA[<p>下面的主要介绍的是Arch下面，对<a href="http://book.douban.com/subject/3735649/" title="一个操作系统的实现">Orange&#8217;S一个操作系统的实现</a>，这本书的笔记。</p>

<h1>Arch下工具安装</h1>

<p>文章介绍的汇编器为nasm，在arch下安装相当简单</p>

<blockquote><p>pacman -S nasm</p></blockquote>

<p>上面这条命令即可完成nasm汇编器的安装。对于虚拟机，使用的是bochs，在Arch下如果使用<code>pacman</code>安装的话，没有调试功能，对于后期的调试不方便。但是在Arch的AUR包中，已经有了bochs的调试版本，仅仅需要使用<code>yaourt -S bochs-with-debugger</code>即可将具有调试功能的bochs虚拟机安装上。</p>

<p>在完成上述操作后，该书介绍的基本工具便已经完备了，接下来便是对bochs进行配置了。</p>

<h1>bochs配置</h1>

<p>bochs的示例配置文件位于<code>/usr/share/doc/bochs/bochsrc-sample.txt</code>，将该配置文件拷贝出来，位于自己工作目录下，并重新命名为bochsrc。这样在每次启动bochs时，便没有必要使用<code>-f</code>来指定使用的配置文件名。</p>

<p>按照书中的推荐配置，bochsrc-sample.txt文件很大，上面有很多不需要的配置选项，按照书中的指示，将bochsrc文件中配置精简为如下所示：</p>

<div class="highlight"><pre><code class="bash">megs:   32
floppya: <span class="nv">1_44</span><span class="o">=</span>a.img, <span class="nv">status</span><span class="o">=</span>inserted
romimage: <span class="nv">file</span><span class="o">=</span>/usr/share/bochs/BIOS-bochs-latest
vgaromimage: <span class="nv">file</span><span class="o">=</span>/usr/share/bochs/VGABIOS-lgpl-latest
boot: floppy
log: bochsout.txt
mouse: <span class="nv">enabled</span><span class="o">=</span>0
keyboard_mapping: <span class="nv">enabled</span><span class="o">=</span>1, <span class="nv">map</span><span class="o">=</span>/usr/share/bochs/keymaps/x11-pc-us.map
</code></pre>
</div>


<h1>汇编文件编译及制作启动软盘</h1>

<p>按照书中第一章节中的介绍，将启动软盘的代码敲入，然后使用nasm编译，使用bximage生成一个虚拟的软盘，接着使用dd工具将对应的编译生成的文件拷贝到相应的软盘工具中。接下来的工作按照书中介绍的内容继续即可。</p>

<h2>附录：汇编代码</h2>

<div class="highlight"><pre><code class="nasm">    <span class="k">org</span>     <span class="mh">07c00h</span>
    <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="nb">cs</span>
    <span class="nf">mov</span>     <span class="nb">ds</span><span class="p">,</span> <span class="nb">ax</span>
    <span class="nf">mov</span>     <span class="nb">es</span><span class="p">,</span> <span class="nb">ax</span>
    <span class="nf">call</span>    <span class="nb">Disp</span><span class="nv">Str</span>
    <span class="nf">jmp</span>     <span class="kc">$</span>       <span class="c1">;jump to this line, be a dead loop</span>
<span class="nl">DispStr:</span>
    <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="nv">BootMessage</span>
    <span class="nf">mov</span>     <span class="nb">bp</span><span class="p">,</span> <span class="nb">ax</span>
    <span class="nf">mov</span>     <span class="nb">cx</span><span class="p">,</span> <span class="mi">16</span>      <span class="c1">;the length of string</span>
    <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="mh">01301h</span>  <span class="c1">;make the font on the screen</span>
    <span class="nf">mov</span>     <span class="nb">bx</span><span class="p">,</span> <span class="mh">000ch</span>
    <span class="nf">mov</span>     <span class="nb">dl</span><span class="p">,</span> <span class="mi">0</span>
    <span class="nf">int</span>     <span class="mh">10h</span>
    <span class="nf">ret</span>
<span class="nl">BootMessage:</span>        <span class="kd">db</span>      <span class="s">&quot;Hello, Os world!&quot;</span>
<span class="kd">times</span>   <span class="mi">510</span><span class="o">-</span><span class="p">(</span><span class="kc">$</span><span class="o">-</span><span class="kc">$$</span><span class="p">)</span>  <span class="nv">db</span>  <span class="mi">0</span>
<span class="kd">dw</span>      <span class="mh">0xaa55</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git小项目基本操作]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/06/01/git-lab-use/"/>
    <updated>2012-06-01T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/06/01/git-lab-use</id>
    <content type="html"><![CDATA[<h1>Git个人电脑操作</h1>

<p>Git版本控制有三个区域，分别是工作目录、暂存区和git目录。
<img src="http://xiongbupt.github.com/images/fig0101-tn.png" title="Git 本地操作" alt="Git的本地操作" /></p>

<p>平时的工作都在工作目录中完成，在修改完代码之后，需要将修改的代码加入到暂存区，这个通过<code>git add</code>操作完成。当需要将暂存区域里的代码提交进入git工作目录时，需要使用<code>git commit</code>来完成。</p>

<p>上面描述的两个命令<code>git add</code>和<code>git commit</code>是在本地目录工作中用到的主要命令。当需要删除文件时，使用的是<code>git rm</code>命令。</p>

<p>在使用<code>git commit</code>将本地工作的内容提交到git工作目录之后，本地代码的修改工作便已经完成。</p>

<h1>Git获取服务器端代码</h1>

<p>使用git从服务器端下载最新的代码，目前服务器端的ip地址为10.117.6.138。使用</p>

<pre><code>git clone git@10.117.6.138:/home/git/path_to_work
</code></pre>

<p>下载源代码之后，接下来便可以对代码进行修改了。每次修改之后，均使用<code>git add</code>和<code>git commit</code>在本地完成提交操作。这些操作与前面提到的在个人电脑上的操作类似。</p>

<h1>在个人电脑上创建新分支</h1>

<p>git创建分支的操作非常简单，而且代价也很小。</p>

<pre><code>`git branch new_branch_name`
</code></pre>

<p>通过这样一条指令便可以创建一个名字为<code>new_branch_name</code>的分支。接下来，便可以切换到该分支上进行开发了，具体操作如下：</p>

<pre><code>git checkout new_branch_name
</code></pre>

<p>完成上述操作之后，便已经将当前的代码分支移动到了<code>new_branch_name</code>这个分支。使用<code>git branch</code>指令可以查看当前一共有多少分支，以及当前处于哪个分支。<br/>
上面的两条指令可以用一条指令代替</p>

<pre><code>git checkout -b new_branch_name
</code></pre>

<p>这条命令即相当于连续执行了</p>

<pre><code>git branch new_branch_name
git checkout new_branch_name
</code></pre>

<h1>查看服务器端的分支</h1>

<p>如果想要查看服务器端都有什么分支，可以使用如下：</p>

<pre><code>git remote show origin
</code></pre>

<p>上面这条指令将会输出远端服务器端的分支，以及个人的电脑是否已经和这些分支同步。</p>

<h1>推送代码至Git服务器端</h1>

<p>当自己需要将代码推送到Git服务器端时，需要确保服务器端的代码与自己下载的代码是一致的，因此推荐每次在向服务器端推送代码之前，先使用<code>git pull</code>操作将服务器端的代码与本地的代码进行合并，完成合并之后再进行提交。若未进行此操作，将代码推送至服务器端将会失败，服务器端将会给出提示。<br/>
从Git服务器端下载代码有两种方式，一种是<code>git pull</code>，另外一种是<code>git fetch</code>。其中<code>git pull</code>操作不仅仅执行了<code>git fetch</code>，同时，它还将远端仓库的版本与当前的版本进行了合并即<code>merge</code>操作。如果可以直接合并，将不需要在本地端手工合并，Git将会自动合并。<br/>
因此，在需要将代码提交至远端的Git服务器之前，需要先将服务器端的最新代码下载下来，然后在本地合并之后，再提交到服务器端。<br/>
具体操作如下：</p>

<pre><code>git pull
git mergetool
git push origin branch_name
</code></pre>

<p>上面这三个操作是整个向服务器端推送的大致操作。其中最后一步<code>git push origin branch_name</code>将会把本地分支<code>branch_name</code>推送到服务器端，并且服务器端的分支的名字也为<code>branch_name</code>。若想在服务器端命名为不同的名字，则可以使用下面的指令</p>

<pre><code>git push origin local_branch:remote_branch
</code></pre>

<p>其中<code>local_branch</code>是本地分支的名字，而<code>remote_branch</code>则为远端服务器的分支名字。</p>

<h1>切换到远端Git服务器上分支</h1>

<p>从服务器上使用<code>git fetch</code>下载代码之后，个人PC上的代码库便和服务端的代码库的版本是一致的。此时，如果个人PC希望切换到远端服务器的某个分支，必须在自己的代码库中再创建一个分支，建议将该分支的名字命名为与远端服务器的分支名字相同，这样在推送到服务器端时可以较为方便，防止再在远端服务器上创建一个新的分支。具体操作可以如下所示：</p>

<pre><code>git pull
git remote show origin
git checkout -b branch_name origin/branch_name
</code></pre>

<p>上面的操作即在本地创建了一个分支名为branch_name，该分支与服务器端的分支是一样的名字。如果在该分支上进行修改之后，接下来使用推送命令将修改的分支推送到远端服务器即可。</p>

<pre><code>git push origin branch_name
</code></pre>

<h1>开发流程简介</h1>

<p>在创建项目之前，需要在服务器端创建一个版本库。这个操作需要有远端服务器的登录权限，可以在相应的目录下创建目录及文件，目前对服务器的登录为ssh的远程登录方式。在登录到服务器端后，使用<em><code>git init --bare</code></em> 创建一个空的仓库即可。也可以在本地创建仓库之后，使用如下命令将仓库拷贝到远端服务器。</p>

<pre><code>scp -r local_folder name@remote_server:/path/to/work
</code></pre>

<p>这一步可以由管理人员完成。当将git的项目在远端服务器端生成之后接下来便是<code>git</code>的发挥作用了。</p>

<p>假设现在项目组有三个人分别为A，B，C。他们共同从服务器下载了一份代码，并且开始开发。B下载代码之后，觉得自己有个新想法，于是使用</p>

<pre><code>git branch branch_B_1
</code></pre>

<p>创建了一个新的分支，分支名为branch_B_1。然后B使用</p>

<pre><code>git checkout branch_B_1
</code></pre>

<p>在这个分支上进行开发。同样，A也进行了类似的操作，不过他创建的分支版本为branch_A_1。在完成各自的想法之后，他们需要将自己的工作推送到服务器端。</p>

<blockquote><p>在推送到服务器端时，需要记住git的一个原则，除非指定需要提交的本地分支，否则，git是不会将本地生成的分支提交到远端的服务器端的。因此，在创建分支进行开发后，当需要提交分支时，需要按照上面提到的<strong>推送代码到Git服务器端</strong>的说明将代码推送到服务器端。</p></blockquote>

<p>现在，A和B都完成了各自的修改，需要按照下面的步骤将修改后的分支推送到服务器端。假设A先推送，其首先使用</p>

<pre><code>git pull
</code></pre>

<p>的方式从服务器端下载最新的代码，然后按照</p>

<pre><code>git push origin branch_A_1
</code></pre>

<p>的方式将分支代码提交到了Git服务器端。接下来，B也想提交自身修改的分支代码，于是B也首先使用<code>git pull</code>的方式从服务器端下载最新的代码，然后使用</p>

<pre><code>git push origin branch_B_1
</code></pre>

<p>的方式提交分支代码。注意在B使用<code>git pull</code>的方式下载代码时，其将会下载服务器端由A提交的分支branch_A_1。如果B此时想查看A究竟做了什么工作时，可以使用</p>

<pre><code>git checkout -b branch_A_1 origin/branch_A_1
</code></pre>

<p>的方式，先在本地创建一个同样名字为branch_A_1的分支，然后再切换到该分支进行查看。</p>

<blockquote><p>git从服务器端下载的分支代码无法直接查看，必须在本地创建一个对应的分支，然后才可以查看该分支的代码。至于本地分支的名字则没有影响，但是为了与远端分支的一致性，推荐使用相同的分支名。</p></blockquote>

<p>C使用<code>git pull</code>之后，在切换分支查看了A和B的想法之后，觉得A和B的想法都可以采纳，C想将A和B的想法合并到一起，于是便开始合并这两个分支。<br/>
首先，C新创建了一个分支，名字为branch_C_1，接下来，C切换到该分支，然后使用</p>

<pre><code>git merge branch_A_1
</code></pre>

<p>将分支branch_A_1与自己创建的分支合并，接着使用</p>

<pre><code>git merge branch_B_1
</code></pre>

<p>将分支branch_B_1与自己创建的分支合并。这时，C创建的分支已经同时包含了A和B的想法。如果在合并的工程中出现了冲突，可以使用</p>

<pre><code>git mergetool
</code></pre>

<p>这个工具将会打开这些冲突，选择解决这些问题。</p>

<p>总之，git的提交分支的方式便是按照上面的一个简单的说明进行开发。</p>

<h2>git版本回退</h2>

<p>如果在开发过程中，发现出现了错误，想要将git的版本回退到某个时期，可以使用</p>

<pre><code>git checkout hash_number
</code></pre>

<p>的方式回退到hash_number所代表的版本。在这上面再创建分支</p>

<pre><code>git chekcout -b branch_test hash_number
</code></pre>

<p>这样可以以这个hash_number代表的历史版本。</p>

<h2>git版本合并</h2>

<p>从服务器端下载代码之后，如果出现了冲突，需要使用</p>

<pre><code>git mergetool
</code></pre>

<p>来对代码进行合并。<br/>
在本地分支下，使用</p>

<pre><code>git pull
</code></pre>

<p>git将会尝试自动合并，如果合并失败，使用</p>

<pre><code>git mergetool
</code></pre>

<p>再来尝试手动合并即可。</p>

<h1>git基本命令介绍</h1>

<p>从服务器端下载代码</p>

<blockquote><p>git clone username@remote_server:/path/to/work</p></blockquote>

<p>添加文件到暂存区</p>

<blockquote><p>git add filename</p></blockquote>

<p>将已经在版本库中但是在工作目录下修改的文件添加到暂存区</p>

<blockquote><p>git add -u</p></blockquote>

<p>从版本库中删除文件</p>

<blockquote><p>git rm filename</p></blockquote>

<p>将文件重命名</p>

<blockquote><p>git mv oldname newname</p></blockquote>

<p>将暂存区文件存储到版本库中</p>

<blockquote><p>git commit</p></blockquote>

<p>直接添加注释，不再进入界面编辑提交日志</p>

<blockquote><p>git commit -m &#8216;Description of the commit&#8217;</p></blockquote>

<p>从已经克隆的版本库中下载服务器端的代码到本地版本库中</p>

<blockquote><p>git fetch</p></blockquote>

<p>从已经克隆的版本库中下载服务器端的代码并合并分支</p>

<blockquote><p>git pull</p></blockquote>

<p>在本地创建一个名字为branch_name的分支</p>

<blockquote><p>git branch branch_name</p></blockquote>

<p>切换到本地名字为branch_name的分支</p>

<blockquote><p>git checkout branch_name</p></blockquote>

<p>在本地创建一个分支名为branch_name的分支并切换到该分支</p>

<blockquote><p>git chekcout -b branch_name</p></blockquote>

<p>将本地名字为branch_name的分支推送到服务器端，并且在服务器端的名字为branch_name</p>

<blockquote><p>git push origin branch_name</p></blockquote>

<p>将本地名字为branch_name的分支推送到服务器端，并且在服务器端的名字为branch_server</p>

<blockquote><p>git push origin branch_name:branch_server</p></blockquote>

<p>查看服务器端的分支状态</p>

<blockquote><p>git remote show origin</p></blockquote>

<p>查看本地分支状态</p>

<blockquote><p>git branch</p></blockquote>

<p>删除本地分支</p>

<blockquote><p>git branch -d branch_name</p></blockquote>

<p>合并分支</p>

<blockquote><p>git merge</p></blockquote>

<p>合并冲突解决</p>

<blockquote><p>git mergetool</p></blockquote>

<p>查看简明历史</p>

<blockquote><p>git log</p></blockquote>

<p>查看每次提交具体修改</p>

<blockquote><p>git log -p</p></blockquote>

<p>查看提交某个文件的修改历史</p>

<blockquote><p>git log -p filename</p></blockquote>

<p>显示文件的增减行数</p>

<blockquote><p>git log &#8211;stat</p></blockquote>

<p>git个人邮件配置</p>

<blockquote><p>git config &#8211;global user.email username@web.com</p></blockquote>

<p>git个人名字配置</p>

<blockquote><p>git config &#8211;global user.name username</p></blockquote>

<p>git简称配置，如chekcout简称为co，commit为ci，branch为br，status为st</p>

<blockquote><p>git config &#8211;global alias.co checkout<br/>
git config &#8211;global alias.ci commit<br/>
git config &#8211;global alias.br branch<br/>
git config &#8211;global alias.st status</p></blockquote>

<p>git格式化与空格</p>

<pre><code>由于linux系统和windows系统对行尾结束符处理方式不一致，windows下使用回车和换行两个字符来结束一行，而Linux系统仅仅使用一个换行字符，当跨平台在linux系统和windows系统下开发时，会出现较麻烦的现象。Git可以在提交时自动将结束符CRLF转换成LF，而在签出代码时将LF转换成为CRLF。在windows系统下，将autocrlf选项设置为true，这样在签出代码时，LF将会被换成CRLF；在Linux系统下，将autocrlf设置为input仅仅在签入代码时将CRLF转换为LF，在签出代码时，不进行转换，LF还是LF。此选项对跨平台开发具有较大作用，推荐使用。
</code></pre>

<blockquote><p>git config &#8211;global core.autocrlf true<em>（windows下使用）</em><br/>
git config &#8211;global core.autocrlf input<em>(Linux下使用）</em></p>

<h1>注意事项</h1>

<ul>
<li>Git的每次提交到服务器端的操作必须先从服务器端下载最新的提交代码，在本地完成合并冲突之后才可以完成提交。</li>
<li>Git对于文件的合并有自动合并的功能，当已修改的版本与未修改的版本只是删减操作时，Git将会自动合并。</li>
<li>Git在本地的提交操作不需要连接到服务器端。</li>
<li>为了防止服务器版本库的差异过大，在每次完成一个完整的功能块时，建议将代码push推送到服务器端，不要多次未推送提交，一次改动过大。</li>
<li>使用<code>git checkout filename</code>操作时，将会从暂存区中获取文件，替代本地文件。注意这种情况下，本地的所有修改都会丢失。因此，在使用此命令之前，需要确认本地的修改已经无用或者已经保存。</li>
<li>尽量多使用<code>git status</code>查看当前状态，在这个命令的输出中可以获取很多帮助信息以及可以采取什么操作来实现哪些功能。</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git基本使用]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/31/git-basic/"/>
    <updated>2012-05-31T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/31/git-basic</id>
    <content type="html"><![CDATA[<p><code>git log branch_a..branch_b</code><br/>
显示branch_b有而branch_a没有的历史。<br/>
<code>git log branch_b..branch_a</code><br/>
显示branch_a有而branch_b没有的历史。</p>

<p><code>git log origin/master..HEAD</code><br/>
查看将会把什么推送到远端的master分支</p>

<p><code>git show HEAD</code> <br/>
<code>git show HEAD^</code><br/>
<code>git show HEAD~</code><br/>
^符号显示的是祖先，<sup>2显示的是第二父提交</sup></p>

<p>~显示的是父提交，~2显示的是父提交的父提交</p>

<p><code>git log reA..reB</code><br/>
<code>git log ^reA reB</code><br/>
<code>git log reB --not reA</code><br/>
上述三个命令等价，均是指包含reB而不包含reA</p>

<p><code>git log refA refB ^refC</code><br/>
<code>git log refA refB --not refC</code><br/>
<code>...</code>三点描述符，显示的是并集减去交集<br/>
<code>git log --left-right master...experiment</code></p>

<h3>交互式暂存</h3>

<p><code>git add -i</code>进入交互界面，输入数字进行选择</p>

<h3>存储</h3>

<p><code>git statsh</code>
当想切换分支，但是又不想将当前的工作提交到暂存区时，可以使用该指令。该指令将会把当前的工作状态暂存起来，采用堆栈的形式存储起来。当需要恢复暂存区的工作内容时，可以使用<code>git stash list</code>查看当前堆栈里面的暂存态。使用<code>git stash apply stash@{2}</code>将会恢复<code>git stash list</code>显示的第二个暂存。如果没有指明名字，直接使用<code>git stash apply</code>将会默认恢复最近的那次暂存。<br/>
<code>git stash apply</code>只是会应用存储，而不会将存储删除，如果需要删除存储，需要使用<code>git stash drop stash@{2}</code>来将相应的存储进行删除。<br/>
注意，<code>git stash apply</code>这个命令的使用不需要工作分支与当时使用<code>git stash</code>存储的分支在一个目录下，也就是说可以在分支a上存储，然后在分支b上使用<code>git stash apply</code>将在分支a上存储的内容应用到分支b上。git将会采用自动融合的机制，如果出现冲突，会要求解决冲突之后才能应用存储。</p>

<h2>重写历史</h2>

<h3>改变最近一次提交</h3>

<p>修改最后一次的声明，输入下面的命令即可</p>

<div class="highlight"><pre><code class="bash"><span class="nv">$git</span> commit --amend
</code></pre>
</div>


<p>如果在依次提交之后，发现还有文件没有增加进来，可以使用git add。发现文件需要删除，使用git rm。在完成这些操作之后，使用git commit &#8211;amend操作来进行修正。这样，便会将这次更新合并到上次的更新上去。注意不要在推送之后再使用这个方法。</p>

<h3>修改多次提交说明</h3>

<h2>自定义GIT</h2>

<pre><code>git config --global core.autocrlf true
</code></pre>

<p>根据不同平台，将换行符进行替换。
开启该选项后，git可以在代码提交时，自动将行结束符CRLF替换为LF，而在签出代码时将LF替换为CRLF。该选项在windows平台和Linux平台的共同使用时使用。</p>

<pre><code>git config --global core.autocrlf input
</code></pre>

<p>该选项将把git设置为在输入时将crlf转换为lf，而在输出时不转换。</p>

<p>如果都在windows下开发，且仅仅在windows下运行，可以设置为false取消此功能，把回车符记录在库中。</p>

<pre><code>git config --global core.autocrlf false
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git server]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/31/git/"/>
    <updated>2012-05-31T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/31/git</id>
    <content type="html"><![CDATA[<h1>小型系统下GIT安装使用</h1>

<p><a href="http://blog.prosight.me/index.php/2009/11/485">参考博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat MySQL]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/29/tomcat-mysql/"/>
    <updated>2012-05-29T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/29/tomcat-mysql</id>
    <content type="html"><![CDATA[

<div class="highlight"><pre><code class="java"><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">jasper</span><span class="o">.</span><span class="na">JasperException</span><span class="o">:</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">ServletException</span><span class="o">:</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">CommunicationsException</span><span class="o">:</span> <span class="n">Communications</span> <span class="n">link</span> <span class="n">failure</span> <span class="n">due</span> <span class="n">to</span> <span class="n">underlying</span> <span class="nl">exception:</span> 

<span class="o">**</span> <span class="n">BEGIN</span> <span class="n">NESTED</span> <span class="n">EXCEPTION</span> <span class="o">**</span> 

<span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketException</span>
<span class="nl">MESSAGE:</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ConnectException</span><span class="o">:</span> <span class="n">Connection</span> <span class="n">refused</span>

<span class="nl">STACKTRACE:</span>

<span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketException</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ConnectException</span><span class="o">:</span> <span class="n">Connection</span> <span class="n">refused</span>
    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">StandardSocketFactory</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">StandardSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">156</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">MysqlIO</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">MysqlIO</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">276</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">Connection</span><span class="o">.</span><span class="na">createNewIO</span><span class="o">(</span><span class="n">Connection</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2641</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">Connection</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">Connection</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1531</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">NonRegisteringDriver</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">NonRegisteringDriver</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">266</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">DriverManager</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">579</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">DriverManager</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">243</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">jsp</span><span class="o">.</span><span class="na">testSQL1_jsp</span><span class="o">.</span><span class="na">_jspService</span><span class="o">(</span><span class="n">testSQL1_jsp</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">77</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">jasper</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">HttpJspBase</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">HttpJspBase</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">70</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServlet</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">HttpServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">722</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">jasper</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">JspServletWrapper</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">JspServletWrapper</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">432</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">jasper</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">JspServlet</span><span class="o">.</span><span class="na">serviceJspFile</span><span class="o">(</span><span class="n">JspServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">390</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">jasper</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">JspServlet</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">JspServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">334</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServlet</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">HttpServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">722</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">305</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">210</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardWrapperValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardWrapperValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">224</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardContextValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardContextValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">169</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">authenticator</span><span class="o">.</span><span class="na">AuthenticatorBase</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">AuthenticatorBase</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">472</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardHostValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardHostValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">168</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">valves</span><span class="o">.</span><span class="na">ErrorReportValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">ErrorReportValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">98</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">valves</span><span class="o">.</span><span class="na">AccessLogValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">AccessLogValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">927</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngineValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardEngineValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">118</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">CoyoteAdapter</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">CoyoteAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">407</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">AbstractHttp11Processor</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">AbstractHttp11Processor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">987</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">AbstractProtocol</span><span class="n">$AbstractConnectionHandler</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">AbstractProtocol</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">579</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="n">$SocketProcessor</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">JIoEndpoint</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">309</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="o">.</span><span class="na">runWorker</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1110</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">603</span><span class="o">)</span>
    <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">722</span><span class="o">)</span>


<span class="o">**</span> <span class="n">END</span> <span class="n">NESTED</span> <span class="n">EXCEPTION</span> <span class="o">**</span>
</code></pre>
</div>


<p>在使用tomcat与mysql时，出现了上述错误，原因是由于mysql中的配置中禁用了网络的连接。在arch环境下，通过编辑/etc/mysql/my.cnf文件，将<code>skip-networking</code>这个选项注释掉即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning SQL CH10]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/26/learning-sql-ch10/"/>
    <updated>2012-05-26T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/26/learning-sql-ch10</id>
    <content type="html"><![CDATA[<h1>再谈连接</h1>

<p>conitnue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning SQL CH9]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/25/learning-sql-ch9/"/>
    <updated>2012-05-25T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/25/learning-sql-ch9</id>
    <content type="html"><![CDATA[<h1>子查询</h1>

<p>可以用于4种SQL语句中。</p>

<h2>什么是子查询</h2>

<p>子查询是包含在另一个SQL语句内部的查询。子查询总是由括号括起来，并且通常在包含语句之前执行。
子查询可以返回的结果集为：</p>

<ul>
<li>单列单行</li>
<li>单列多行</li>
<li>多列多行</li>
</ul>


<p>当子查询的结果为单列单行时，它可以被用作等式的一个条件中的一个表达式，如果返回结果多于一行，它可以被比较，不能被用于等式判断）。</p>

<h2>子查询类型</h2>

<p>根据子查询是否独立可以分为非关联子查询（查询完全独立）和关联子查询（引用包含语句中的列）。</p>

<h2>非关联子查询</h2>

<p>可以独立执行。<br/>
非关联的返回单行单列的子查询是<font color ="red">标量子查询。</font>
子查询中可以使用各种查询语句（6个）。
单一事务不能等于多个事务的集合。</p>

<h3>多行单列子查询</h3>

<h4>in和not in运算符</h4>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">branch_id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">city</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">branch</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;Headquarters&#39;</span><span class="p">,</span> <span class="s1">&#39;Quincy Branch&#39;</span><span class="p">);</span>
<span class="o">+</span><span class="c1">-----------+---------------+---------+</span>
<span class="o">|</span> <span class="n">branch_id</span> <span class="o">|</span> <span class="n">name</span>          <span class="o">|</span> <span class="n">city</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+---------------+---------+</span>
<span class="o">|</span>         <span class="mi">1</span> <span class="o">|</span> <span class="n">Headquarters</span>  <span class="o">|</span> <span class="n">Waltham</span> <span class="o">|</span>
<span class="o">|</span>         <span class="mi">3</span> <span class="o">|</span> <span class="n">Quincy</span> <span class="n">Branch</span> <span class="o">|</span> <span class="n">Quincy</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+---------------+---------+</span>
<span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">branch_id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">city</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">branch</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;Headquarters&#39;</span><span class="p">,</span> <span class="s1">&#39;Quincy Branch&#39;</span><span class="p">);</span>
<span class="o">+</span><span class="c1">-----------+---------------+--------+</span>
<span class="o">|</span> <span class="n">branch_id</span> <span class="o">|</span> <span class="n">name</span>          <span class="o">|</span> <span class="n">city</span>   <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+---------------+--------+</span>
<span class="o">|</span>         <span class="mi">2</span> <span class="o">|</span> <span class="n">Woburn</span> <span class="n">Branch</span> <span class="o">|</span> <span class="n">Woburn</span> <span class="o">|</span>
<span class="o">|</span>         <span class="mi">4</span> <span class="o">|</span> <span class="n">So</span><span class="p">.</span> <span class="n">NH</span> <span class="n">Branch</span> <span class="o">|</span> <span class="n">Salem</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+---------------+--------+</span>
<span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">title</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">emp_id</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">DISTINCT</span>
    <span class="o">-&gt;</span> <span class="n">superior_emp_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="p">);</span>
<span class="o">+</span><span class="c1">--------+---------+-----------+--------------------+</span>
<span class="o">|</span> <span class="n">emp_id</span> <span class="o">|</span> <span class="n">fname</span>   <span class="o">|</span> <span class="n">lname</span>     <span class="o">|</span> <span class="n">title</span>              <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+---------+-----------+--------------------+</span>
<span class="o">|</span>      <span class="mi">1</span> <span class="o">|</span> <span class="n">Michael</span> <span class="o">|</span> <span class="n">Smith</span>     <span class="o">|</span> <span class="n">President</span>          <span class="o">|</span>
<span class="o">|</span>      <span class="mi">3</span> <span class="o">|</span> <span class="n">Robert</span>  <span class="o">|</span> <span class="n">Tyler</span>     <span class="o">|</span> <span class="n">Treasurer</span>          <span class="o">|</span>
<span class="o">|</span>      <span class="mi">4</span> <span class="o">|</span> <span class="n">Susan</span>   <span class="o">|</span> <span class="n">Hawthorne</span> <span class="o">|</span> <span class="n">Operations</span> <span class="n">Manager</span> <span class="o">|</span>
<span class="o">|</span>      <span class="mi">6</span> <span class="o">|</span> <span class="n">Helen</span>   <span class="o">|</span> <span class="n">Fleming</span>   <span class="o">|</span> <span class="n">Head</span> <span class="n">Teller</span>        <span class="o">|</span>
<span class="o">|</span>     <span class="mi">10</span> <span class="o">|</span> <span class="n">Paula</span>   <span class="o">|</span> <span class="n">Roberts</span>   <span class="o">|</span> <span class="n">Head</span> <span class="n">Teller</span>        <span class="o">|</span>
<span class="o">|</span>     <span class="mi">13</span> <span class="o">|</span> <span class="n">John</span>    <span class="o">|</span> <span class="n">Blake</span>     <span class="o">|</span> <span class="n">Head</span> <span class="n">Teller</span>        <span class="o">|</span>
<span class="o">|</span>     <span class="mi">16</span> <span class="o">|</span> <span class="n">Theresa</span> <span class="o">|</span> <span class="n">Markham</span>   <span class="o">|</span> <span class="n">Head</span> <span class="n">Teller</span>        <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+---------+-----------+--------------------+</span>
<span class="mi">7</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">title</span> <span class="k">FROM</span> <span class="n">employee</span> <span class="k">WHERE</span> <span class="n">emp_id</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">superior_emp_id</span> <span class="k">FROM</span> <span class="n">employee</span> <span class="k">WHERE</span> <span class="n">superior_emp_id</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">);</span>
<span class="o">+</span><span class="c1">--------+----------+----------+----------------+</span>
<span class="o">|</span> <span class="n">emp_id</span> <span class="o">|</span> <span class="n">fname</span>    <span class="o">|</span> <span class="n">lname</span>    <span class="o">|</span> <span class="n">title</span>          <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+----------+----------+----------------+</span>
<span class="o">|</span>      <span class="mi">2</span> <span class="o">|</span> <span class="n">Susan</span>    <span class="o">|</span> <span class="n">Barker</span>   <span class="o">|</span> <span class="n">Vice</span> <span class="n">President</span> <span class="o">|</span>
<span class="o">|</span>      <span class="mi">5</span> <span class="o">|</span> <span class="n">John</span>     <span class="o">|</span> <span class="n">Gooding</span>  <span class="o">|</span> <span class="n">Loan</span> <span class="n">Manager</span>   <span class="o">|</span>
<span class="o">|</span>      <span class="mi">7</span> <span class="o">|</span> <span class="n">Chris</span>    <span class="o">|</span> <span class="n">Tucker</span>   <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>      <span class="mi">8</span> <span class="o">|</span> <span class="n">Sarah</span>    <span class="o">|</span> <span class="n">Parker</span>   <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>      <span class="mi">9</span> <span class="o">|</span> <span class="n">Jane</span>     <span class="o">|</span> <span class="n">Grossman</span> <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>     <span class="mi">11</span> <span class="o">|</span> <span class="n">Thomas</span>   <span class="o">|</span> <span class="n">Ziegler</span>  <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>     <span class="mi">12</span> <span class="o">|</span> <span class="n">Samantha</span> <span class="o">|</span> <span class="n">Jameson</span>  <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>     <span class="mi">14</span> <span class="o">|</span> <span class="n">Cindy</span>    <span class="o">|</span> <span class="n">Mason</span>    <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>     <span class="mi">15</span> <span class="o">|</span> <span class="n">Frank</span>    <span class="o">|</span> <span class="n">Portman</span>  <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>     <span class="mi">17</span> <span class="o">|</span> <span class="n">Beth</span>     <span class="o">|</span> <span class="n">Fowler</span>   <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">|</span>     <span class="mi">18</span> <span class="o">|</span> <span class="n">Rick</span>     <span class="o">|</span> <span class="n">Tulman</span>   <span class="o">|</span> <span class="n">Teller</span>         <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+----------+----------+----------------+</span>
<span class="mi">11</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p><font color ="red">注意上面在使用<code>NOT IN</code>的时候该子句中的<code>WHERE superior_emp_id IS NOT NULL</code></font></p>

<h4>all运算符</h4>

<h4>any运算符</h4>

<h3>多列子查询</h3>

<h2>关联子查询</h2>

<p>关联子查询为每一个候选行，即可能成为结果的行执行一遍。</p>

<h3>exists运算符</h3>

<p>exists运算符是构造包含关联子查询条件的最常用运算符。
在使用select语句时，经常使用的是<code>select 1</code>或者<code>select \*</code></p>

<h3>关联子查询操作数据</h3>

<p><font color ="red"><strong>切记，在MySQL中delete语句使用关联子查询时，无论如何都不能使用表别名。</strong></font></p>

<h2>何时使用子查询</h2>

<h3>子查询作为数据源</h3>

<h4>数据加工</h4>

<h4>面向任务的子查询</h4>

<h4>过滤条件 中的子查询</h4>

<h4>子查询作为表达式生成器</h4>

<h2>子查询总结</h2>

<ul>
<li>返回结果可以是单行单列，单列多行以及多列多行</li>
<li>可以独立于包含语句（非关联子查询）</li>
<li>可以引用包含语句中的一行或多行（关联子查询）</li>
<li>可以用于条件中，这些条件使用比较运算符以及其他特殊目的的运算符（in，not in，exists和not exists）；</li>
<li>它可以出现在select、update、delete和insert语句；</li>
<li>它产生的结果集可以与其他表或子查询连接；</li>
<li>它可以生成值来填充表或者查询结果集中的一些列；</li>
<li>它可以用于查询中的select，from，where，having和order by子句。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning SQL Ch8]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/25/learning-sql-ch8/"/>
    <updated>2012-05-25T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/25/learning-sql-ch8</id>
    <content type="html"><![CDATA[<h2>分组与聚集</h2>

<p>使用<code>GROUP</code>来完成分组的功能，如下图所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">open_emp_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">open_emp_id</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------------+</span>
<span class="o">|</span> <span class="n">open_emp_id</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+</span>
<span class="o">|</span>           <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">10</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">13</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">16</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+</span>
<span class="mi">4</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p><code>COUNT()</code>称为聚集函数，可以计算每个分组的行数，如下面的例子所示。本例相对于上例来说仅仅添加了<code>COUNT()</code>函数来完成聚集功能。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">open_emp_id</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">how_many</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">open_emp_id</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------------+----------+</span>
<span class="o">|</span> <span class="n">open_emp_id</span> <span class="o">|</span> <span class="n">how_many</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+----------+</span>
<span class="o">|</span>           <span class="mi">1</span> <span class="o">|</span>        <span class="mi">8</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">10</span> <span class="o">|</span>        <span class="mi">7</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">13</span> <span class="o">|</span>        <span class="mi">3</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">16</span> <span class="o">|</span>        <span class="mi">6</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+----------+</span>
<span class="mi">4</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p>上例说明，通过联合使用<code>group by</code>子句和<code>count()</code>聚集函数，可以在不查看原始数据的情况下，精确满足业务问题对数据的需要。<br/>
<font color ="red"><strong>使用group函数时，不应该在<code>WHERE</code>子句中使用聚集函数<code>COUNT()</code>。因为在评估<code>WHERE</code>子句时分组还没有被创建。因此必须在<code>HAVING()</code>子句中使用分组过滤条件。</strong></font></p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">open_emp_id</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">how_many</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">open_emp_id</span>
    <span class="o">-&gt;</span> <span class="k">HAVING</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------------+----------+</span>
<span class="o">|</span> <span class="n">open_emp_id</span> <span class="o">|</span> <span class="n">how_many</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+----------+</span>
<span class="o">|</span>           <span class="mi">1</span> <span class="o">|</span>        <span class="mi">8</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">10</span> <span class="o">|</span>        <span class="mi">7</span> <span class="o">|</span>
<span class="o">|</span>          <span class="mi">16</span> <span class="o">|</span>        <span class="mi">6</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+----------+</span>
<span class="mi">3</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h3>聚集函数</h3>

<p>聚集函数对某个分组的所有行执行特定的操作。</p>

<ul>
<li><code>MAX()</code>返回集合中的最大值</li>
<li><code>MIN()</code>返回集合中的最小值</li>
<li><code>AVG()</code>返回集合中的平均值</li>
<li><code>SUM()</code>返回集合中的所有值的和</li>
<li><code>COUNT()</code>返回集合中值的个数</li>
</ul>


<h4>隐式分组或显示分组</h4>

<p>隐式分组就是没有使用<code>GOURP BY</code>的查询语句，显示分组即是使用了<code>GROUP BY</code>子句的语句。</p>

<h4>对独立值计数</h4>

<p>即在<code>COUNT()</code>子句中不是使用<code>COUNT(*)</code>来进行聚集，而是使用<code>COUNT(name)</code>来记数。当需要去除重复的name时，需要在<code>COUNT()</code>中添加<code>DISTINCT</code>关键字。即<code>COUNT(DISTINCT NAME)</code>的方式来完成对应的计数统计。</p>

<h4>使用表达式</h4>

<p>在聚集函数中可以使用表达式</p>

<h4>NULL值的处理</h4>

<p>对于<code>MAX()</code>,<code>MIN()</code>,<code>AVG()</code>,<code>SUM()</code>中，没有什么影响。但是对于<code>COUNT()</code>而言，当使用<code>COUNT(*)</code>时，会有变化。但是使用<code>COUNT(NAME)</code>这种情况没有变化。</p>

<h3>产生分组</h3>

<h4>单列分组</h4>

<p><code>GROUP BY</code>后面仅仅有一个条目</p>

<h4>多列分组</h4>

<p><code>GROUP BY</code>后面有多个条目</p>

<h4>利用表达式分组</h4>

<p><code>GROUP BY</code>后面跟着的是一个表达式</p>

<h4>产生合计数</h4>

<p>使用<code>WITH ROLLUP</code>，示例如下：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">product_cd</span><span class="p">,</span> <span class="n">open_branch_id</span><span class="p">,</span>
    <span class="o">-&gt;</span> <span class="k">SUM</span><span class="p">(</span><span class="n">avail_balance</span><span class="p">)</span> <span class="n">avail_balance</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">product_cd</span><span class="p">,</span> <span class="n">open_branch_id</span> <span class="k">WITH</span> <span class="k">ROLLUP</span><span class="p">;</span>
<span class="o">+</span><span class="c1">------------+----------------+---------------+</span>
<span class="o">|</span> <span class="n">product_cd</span> <span class="o">|</span> <span class="n">open_branch_id</span> <span class="o">|</span> <span class="n">avail_balance</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+----------------+---------------+</span>
<span class="o">|</span> <span class="n">BUS</span>        <span class="o">|</span>              <span class="mi">2</span> <span class="o">|</span>       <span class="mi">9345</span><span class="p">.</span><span class="mi">55</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">BUS</span>        <span class="o">|</span>              <span class="mi">4</span> <span class="o">|</span>          <span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">BUS</span>        <span class="o">|</span>           <span class="k">NULL</span> <span class="o">|</span>       <span class="mi">9345</span><span class="p">.</span><span class="mi">55</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CD</span>         <span class="o">|</span>              <span class="mi">1</span> <span class="o">|</span>      <span class="mi">11500</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CD</span>         <span class="o">|</span>              <span class="mi">2</span> <span class="o">|</span>       <span class="mi">8000</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CD</span>         <span class="o">|</span>           <span class="k">NULL</span> <span class="o">|</span>      <span class="mi">19500</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CHK</span>        <span class="o">|</span>              <span class="mi">1</span> <span class="o">|</span>        <span class="mi">782</span><span class="p">.</span><span class="mi">16</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CHK</span>        <span class="o">|</span>              <span class="mi">2</span> <span class="o">|</span>       <span class="mi">3315</span><span class="p">.</span><span class="mi">77</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CHK</span>        <span class="o">|</span>              <span class="mi">3</span> <span class="o">|</span>       <span class="mi">1057</span><span class="p">.</span><span class="mi">75</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CHK</span>        <span class="o">|</span>              <span class="mi">4</span> <span class="o">|</span>      <span class="mi">67852</span><span class="p">.</span><span class="mi">33</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">CHK</span>        <span class="o">|</span>           <span class="k">NULL</span> <span class="o">|</span>      <span class="mi">73008</span><span class="p">.</span><span class="mi">01</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">MM</span>         <span class="o">|</span>              <span class="mi">1</span> <span class="o">|</span>      <span class="mi">14832</span><span class="p">.</span><span class="mi">64</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">MM</span>         <span class="o">|</span>              <span class="mi">3</span> <span class="o">|</span>       <span class="mi">2212</span><span class="p">.</span><span class="mi">50</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">MM</span>         <span class="o">|</span>           <span class="k">NULL</span> <span class="o">|</span>      <span class="mi">17045</span><span class="p">.</span><span class="mi">14</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">SAV</span>        <span class="o">|</span>              <span class="mi">1</span> <span class="o">|</span>        <span class="mi">767</span><span class="p">.</span><span class="mi">77</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">SAV</span>        <span class="o">|</span>              <span class="mi">2</span> <span class="o">|</span>        <span class="mi">700</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">SAV</span>        <span class="o">|</span>              <span class="mi">4</span> <span class="o">|</span>        <span class="mi">387</span><span class="p">.</span><span class="mi">99</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">SAV</span>        <span class="o">|</span>           <span class="k">NULL</span> <span class="o">|</span>       <span class="mi">1855</span><span class="p">.</span><span class="mi">76</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">SBL</span>        <span class="o">|</span>              <span class="mi">3</span> <span class="o">|</span>      <span class="mi">50000</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">SBL</span>        <span class="o">|</span>           <span class="k">NULL</span> <span class="o">|</span>      <span class="mi">50000</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span>           <span class="k">NULL</span> <span class="o">|</span>     <span class="mi">170754</span><span class="p">.</span><span class="mi">46</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+----------------+---------------+</span>
<span class="mi">21</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h3>分组过滤条件</h3>

<p>当使用分组数据时，不能使用<code>WHERE</code>子句，过滤子句应该使用<code>HAVING</code>子句。在分组之后如果需要对数据应用过滤条件，可以在<code>HAVING</code>子句中放置这些条件。
可以在<code>HAVING</code>子句中包含未在<code>SELECT</code>子句中出现的聚集函数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning SQL ch7]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/24/learning-sql-ch7/"/>
    <updated>2012-05-24T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/24/learning-sql-ch7</id>
    <content type="html"><![CDATA[<h2>CH7 数据生成、转换和操作</h2>

<h3>使用字符串数据</h3>

<p>字符类型有CHAR，VARCHAR，TEXT类型，各种的范围不同，第二章中有详细的说明。
创建一个仅仅包含字符的表如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">string_tbl</span>
    <span class="o">-&gt;</span> <span class="p">(</span><span class="n">char_fld</span> <span class="nb">CHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">),</span>
    <span class="o">-&gt;</span> <span class="n">vchar_fld</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">30</span><span class="p">),</span>
    <span class="o">-&gt;</span> <span class="n">text_fld</span> <span class="nb">TEXT</span>
    <span class="o">-&gt;</span> <span class="p">);</span>
</code></pre>
</div>


<h4>生成字符串</h4>

<p>生成字符串最简单的方式是用一对单引号将需要使用的字符串括起来。在向表中插入字符串数据时，保证长度不会超过设定的最大值。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">string_tbl</span> <span class="p">(</span><span class="n">char_fld</span><span class="p">,</span> <span class="n">vchar_fld</span><span class="p">,</span> <span class="n">text_fld</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;This is char data&#39;</span><span class="p">,</span>
    <span class="o">-&gt;</span> <span class="s1">&#39;This is varchar data&#39;</span><span class="p">,</span>
    <span class="o">-&gt;</span> <span class="s1">&#39;This is text data&#39;</span><span class="p">);</span>
</code></pre>
</div>


<h5>包含单引号</h5>

<p>通过在单引号前面添加一个单引号来转义该单引号。<em>在MySQL中可以使用反斜杠\来作为转义符。</em></p>

<h5>包含特殊字符</h5>

<p>通过使用MySQL中自带的<code>char</code>函数，可以将数字转成对应的字符。对于ASCII字符集，使用<code>CHAR(number)</code>可以返回ASCII的值为number的数所对应的字符。<br/>
可以使用<code>concat()</code>函数来连接若干字符串，一些可以输入，另外一些可以通过<code>char()</code>函数生成。<br/>
如果需要通过字符查询该字符的ASCII的值，可以通过调用<code>ascii</code>函数，该函数将会返回对应字符的ASCII值。</p>

<h4>操作字符串</h4>

<p>一共有两类操作字符串的函数，分别是返回<font color="red">数字</font>的和返回<font color="red">字符串</font>的。</p>

<h5>返回数字的字符串函数</h5>

<p><code>length()</code>函数，返回字符串的长度。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">LENGTH</span><span class="p">(</span><span class="n">char_fld</span><span class="p">)</span> <span class="k">char_length</span><span class="p">,</span>
    <span class="o">-&gt;</span> <span class="k">LENGTH</span><span class="p">(</span><span class="n">vchar_fld</span><span class="p">)</span> <span class="n">varchar_length</span><span class="p">,</span>
    <span class="o">-&gt;</span> <span class="k">LENGTH</span><span class="p">(</span><span class="n">text_fld</span><span class="p">)</span> <span class="n">text_length</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">string_tbl</span><span class="p">;</span>
</code></pre>
</div>


<p><code>position()</code>函数，返回子字符串在字符串的位置。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">POSITION</span><span class="p">(</span><span class="s1">&#39;charcters&#39;</span> <span class="k">IN</span> <span class="n">vchar_fld</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">string_tbl</span><span class="p">;</span>
</code></pre>
</div>


<p>上面这个<code>POSITION</code>函数的返回值，当没有匹配的时候，返回0，当匹配了的时候，返回匹配的位置。注意这个第一位置为1，不是0。</p>

<p>如果希望指定搜索开始的位置，而不是默认的0那个位置，可以使用<code>locate</code>函数。与<code>position</code>类似，但是可以接受可选的第三个参数，指定开始的位置。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">LOCATE</span><span class="p">(</span><span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="n">vchar_fld</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">string_tbl</span><span class="p">;</span>
</code></pre>
</div>


<p><code>strcmp()</code>函数，有三种返回值，</p>

<ul>
<li>-1，第一个字符串的排序位于第二个字符串之前；</li>
<li>0，两个字符串相同；</li>
<li>1，第一个字符串的排序位于第二个字符串之后。</li>
</ul>


<p><font color ="red">在<strong>MySQL中，<code>strcmp</code>对小写不区分，也因为这，会导致在比较的两个字符是对应的大小写时，会出现相应的结果
</strong></font></p>

<p>除了<code>strcmp</code>函数之外，对于比较还可以使用<code>like</code>或者<code>regex</code>操作符来比较字符串。这些比较的结果为1（true）或0（false）。</p>

<p>ex1：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">name</span><span class="p">,</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="ss">&quot;%ns&quot;</span> <span class="n">ends_in_ns</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">department</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----------------+------------+</span>
<span class="o">|</span> <span class="n">name</span>           <span class="o">|</span> <span class="n">ends_in_ns</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------+------------+</span>
<span class="o">|</span> <span class="n">Operations</span>     <span class="o">|</span>          <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">Loans</span>          <span class="o">|</span>          <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span> <span class="n">Administration</span> <span class="o">|</span>          <span class="mi">0</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------+------------+</span>
<span class="mi">3</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p>ex2:</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">cust_type_cd</span><span class="p">,</span> <span class="n">fed_id</span><span class="p">,</span>
    <span class="o">-&gt;</span> <span class="n">fed_id</span> <span class="n">REGEXP</span> <span class="s1">&#39;.{3}-.{2}-.{4}&#39;</span> <span class="n">is_ss_no_format</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">customer</span><span class="p">;</span>
<span class="o">+</span><span class="c1">---------+--------------+-------------+-----------------+</span>
<span class="o">|</span> <span class="n">cust_id</span> <span class="o">|</span> <span class="n">cust_type_cd</span> <span class="o">|</span> <span class="n">fed_id</span>      <span class="o">|</span> <span class="n">is_ss_no_format</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------+--------------+-------------+-----------------+</span>
<span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">111</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">1111</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">222</span><span class="o">-</span><span class="mi">22</span><span class="o">-</span><span class="mi">2222</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">3</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">333</span><span class="o">-</span><span class="mi">33</span><span class="o">-</span><span class="mi">3333</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">4</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">444</span><span class="o">-</span><span class="mi">44</span><span class="o">-</span><span class="mi">4444</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">5</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">555</span><span class="o">-</span><span class="mi">55</span><span class="o">-</span><span class="mi">5555</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">6</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">666</span><span class="o">-</span><span class="mi">66</span><span class="o">-</span><span class="mi">6666</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">7</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">777</span><span class="o">-</span><span class="mi">77</span><span class="o">-</span><span class="mi">7777</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">8</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">888</span><span class="o">-</span><span class="mi">88</span><span class="o">-</span><span class="mi">8888</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>       <span class="mi">9</span> <span class="o">|</span> <span class="n">I</span>            <span class="o">|</span> <span class="mi">999</span><span class="o">-</span><span class="mi">99</span><span class="o">-</span><span class="mi">9999</span> <span class="o">|</span>               <span class="mi">1</span> <span class="o">|</span>
<span class="o">|</span>      <span class="mi">10</span> <span class="o">|</span> <span class="n">B</span>            <span class="o">|</span> <span class="mi">04</span><span class="o">-</span><span class="mi">1111111</span>  <span class="o">|</span>               <span class="mi">0</span> <span class="o">|</span>
<span class="o">|</span>      <span class="mi">11</span> <span class="o">|</span> <span class="n">B</span>            <span class="o">|</span> <span class="mi">04</span><span class="o">-</span><span class="mi">2222222</span>  <span class="o">|</span>               <span class="mi">0</span> <span class="o">|</span>
<span class="o">|</span>      <span class="mi">12</span> <span class="o">|</span> <span class="n">B</span>            <span class="o">|</span> <span class="mi">04</span><span class="o">-</span><span class="mi">3333333</span>  <span class="o">|</span>               <span class="mi">0</span> <span class="o">|</span>
<span class="o">|</span>      <span class="mi">13</span> <span class="o">|</span> <span class="n">B</span>            <span class="o">|</span> <span class="mi">04</span><span class="o">-</span><span class="mi">4444444</span>  <span class="o">|</span>               <span class="mi">0</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------+--------------+-------------+-----------------+</span>
</code></pre>
</div>


<h5>返回字符串的字符串函数</h5>

<p>可以使用<code>concat()</code>来替换字符列所存储的数据。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">string_tbl</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">09</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">string_tbl</span> <span class="p">(</span><span class="n">text_fld</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;This string was 29 characters&#39;</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">11</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">UPDATE</span> <span class="n">string_tbl</span>
    <span class="o">-&gt;</span> <span class="k">SET</span> <span class="n">text_fld</span> <span class="o">=</span> <span class="n">CONCAT</span><span class="p">(</span><span class="n">text_fld</span><span class="p">,</span> <span class="s1">&#39;, but now it is longer&#39;</span><span class="p">);</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">1</span> <span class="k">row</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">10</span> <span class="n">sec</span><span class="p">)</span>
<span class="k">Rows</span> <span class="n">matched</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Changed</span><span class="p">:</span> <span class="mi">1</span>  <span class="n">Warnings</span><span class="p">:</span> <span class="mi">0</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">text_fld</span> <span class="k">FROM</span> <span class="n">string_tbl</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-----------------------------------------------------+</span>
<span class="o">|</span> <span class="n">text_fld</span>                                            <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------------------------+</span>
<span class="o">|</span> <span class="n">This</span> <span class="n">string</span> <span class="n">was</span> <span class="mi">29</span> <span class="n">characters</span><span class="p">,</span> <span class="n">but</span> <span class="n">now</span> <span class="n">it</span> <span class="k">is</span> <span class="n">longer</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p><code>insert()</code>函数接受四个参数：原始字符串、字符串操作开始的位置、需要替换的字符数以及替换字符串。<br/>
ex1：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">INSERT</span><span class="p">(</span><span class="s1">&#39;goodbye world&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;cruel &#39;</span><span class="p">)</span> <span class="n">string</span><span class="p">;</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="n">string</span>              <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="n">goodbye</span> <span class="n">cruel</span> <span class="n">world</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p>如上所示，若第三个参数为0，则不会发生替换，第二个位置开始的字符将会向右移动，相当于插入操作了。<br/>
如果第三个操作数不为0，则从第二个操作数指定的位置开始，延续第三个操作数那么长的字符均将会被抹去，替换成为第四个字符串指定的内容。如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">INSERT</span><span class="p">(</span><span class="s1">&#39;goodbye world&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;hello &#39;</span><span class="p">)</span> <span class="n">string</span><span class="p">;</span>
<span class="o">+</span><span class="c1">--------------+</span>
<span class="o">|</span> <span class="n">string</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------+</span>
<span class="o">|</span> <span class="n">hello</span>  <span class="n">world</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">INSERT</span><span class="p">(</span><span class="s1">&#39;goodbye world&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;hello &#39;</span><span class="p">)</span> <span class="n">string</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------------------+</span>
<span class="o">|</span> <span class="n">string</span>            <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------+</span>
<span class="o">|</span> <span class="n">hello</span> <span class="n">odbye</span> <span class="n">world</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">INSERT</span><span class="p">(</span><span class="s1">&#39;goodbye world&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;hello &#39;</span><span class="p">)</span> <span class="n">string</span><span class="p">;</span>
<span class="o">+</span><span class="c1">--------------------+</span>
<span class="o">|</span> <span class="n">string</span>             <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------+</span>
<span class="o">|</span> <span class="n">hello</span> <span class="n">oodbye</span> <span class="n">world</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p><code>replace()</code>函数完成替换功能，但是它是全部替换。如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">REPLACE</span><span class="p">(</span><span class="s1">&#39;goodbye world&#39;</span><span class="p">,</span> <span class="s1">&#39;goodbye&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">dual</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----------------------------------------------+</span>
<span class="o">|</span> <span class="k">REPLACE</span><span class="p">(</span><span class="s1">&#39;goodbye world&#39;</span><span class="p">,</span> <span class="s1">&#39;goodbye&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------------------------------+</span>
<span class="o">|</span> <span class="n">hello</span> <span class="n">world</span>                                  <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">REPLACE</span><span class="p">(</span><span class="s1">&#39;goodbye goodbye hello world&#39;</span><span class="p">,</span> <span class="s1">&#39;goodbye&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">)</span> <span class="n">string</span><span class="p">;</span> 
<span class="o">+</span><span class="c1">-------------------------+</span>
<span class="o">|</span> <span class="n">string</span>                  <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------+</span>
<span class="o">|</span> <span class="n">hello</span> <span class="n">hello</span> <span class="n">hello</span> <span class="n">world</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h3>使用数值数据</h3>

<h4>执行算术函数</h4>

<table>
<thead>
<tr>
<th></th>
<th align="center">函数名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">Acos(x)</td>
<td align="center">反余弦</td>
</tr>
<tr>
<td></td>
<td align="center">Asin(x)</td>
<td align="center">反正弦</td>
</tr>
<tr>
<td></td>
<td align="center">Atan(x)</td>
<td align="center">反正切</td>
</tr>
<tr>
<td></td>
<td align="center">Cos(x)</td>
<td align="center">余弦</td>
</tr>
<tr>
<td></td>
<td align="center">Cot(x)</td>
<td align="center">余切</td>
</tr>
<tr>
<td></td>
<td align="center">Exp(x)</td>
<td align="center">e的x次方</td>
</tr>
<tr>
<td></td>
<td align="center">Ln(x)</td>
<td align="center">x的自然对数</td>
</tr>
<tr>
<td></td>
<td align="center">Sin(x)</td>
<td align="center">正弦</td>
</tr>
<tr>
<td></td>
<td align="center">Sqrt(x)</td>
<td align="center">x的平方根</td>
</tr>
<tr>
<td></td>
<td align="center">Tan(x)</td>
<td align="center">正切</td>
</tr>
</tbody>
</table>


<p><code>mod(x,y)</code>用于取余操作，如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">MOD</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="o">+</span><span class="c1">------------+</span>
<span class="o">|</span> <span class="k">MOD</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+</span>
<span class="o">|</span>          <span class="mi">2</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p><code>POW(x,y)</code>用于求幂操作，如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">POWER</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="o">+</span><span class="c1">--------------+</span>
<span class="o">|</span> <span class="n">POWER</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------+</span>
<span class="o">|</span>         <span class="mi">1024</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h4>控制数字的精度</h4>

<ul>
<li><code>ceil()</code>向上取整。</li>
<li><code>floor()</code>向下取整。</li>
<li><code>round()</code>四舍五入。</li>
<li><code>truncate()</code>小数点后长度截短，不进行进位。</li>
</ul>


<p>例子如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">CEIL</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">445</span><span class="p">),</span> <span class="n">FLOOR</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">445</span><span class="p">);</span>
<span class="o">+</span><span class="c1">--------------+---------------+</span>
<span class="o">|</span> <span class="n">CEIL</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">445</span><span class="p">)</span> <span class="o">|</span> <span class="n">FLOOR</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">445</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------+---------------+</span>
<span class="o">|</span>           <span class="mi">73</span> <span class="o">|</span>            <span class="mi">72</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------+---------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">449</span><span class="p">),</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">5001</span><span class="p">),</span>  <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">500</span><span class="p">);</span>
<span class="o">+</span><span class="c1">---------------+----------------+---------------+</span>
<span class="o">|</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">449</span><span class="p">)</span> <span class="o">|</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">5001</span><span class="p">)</span> <span class="o">|</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">500</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------+----------------+---------------+</span>
<span class="o">|</span>            <span class="mi">72</span> <span class="o">|</span>             <span class="mi">73</span> <span class="o">|</span>            <span class="mi">73</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------+----------------+---------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>  <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="o">+</span><span class="c1">------------------+------------------+------------------+</span>
<span class="o">|</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="n">ROUND</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------+------------------+------------------+</span>
<span class="o">|</span>             <span class="mi">72</span><span class="p">.</span><span class="mi">9</span> <span class="o">|</span>            <span class="mi">72</span><span class="p">.</span><span class="mi">91</span> <span class="o">|</span>           <span class="mi">72</span><span class="p">.</span><span class="mi">909</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------+------------------+------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">TRUNCATE</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="k">TRUNCATE</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>  <span class="k">TRUNCATE</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="o">+</span><span class="c1">---------------------+---------------------+---------------------+</span>
<span class="o">|</span> <span class="k">TRUNCATE</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="k">TRUNCATE</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="k">TRUNCATE</span><span class="p">(</span><span class="mi">72</span><span class="p">.</span><span class="mi">909</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+---------------------+---------------------+</span>
<span class="o">|</span>                <span class="mi">72</span><span class="p">.</span><span class="mi">9</span> <span class="o">|</span>               <span class="mi">72</span><span class="p">.</span><span class="mi">90</span> <span class="o">|</span>              <span class="mi">72</span><span class="p">.</span><span class="mi">909</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+---------------------+---------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h4>处理有符号数</h4>

<p><code>SIGN()</code>函数根据正负数返回值。正数返回1，负数返回-1，零返回0。如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">SIGN</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">),</span> <span class="n">SIGN</span><span class="p">(</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">),</span> <span class="n">SIGN</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="o">+</span><span class="c1">-----------+------------+---------+</span>
<span class="o">|</span> <span class="n">SIGN</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span> <span class="o">|</span> <span class="n">SIGN</span><span class="p">(</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="n">SIGN</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+------------+---------+</span>
<span class="o">|</span>        <span class="o">-</span><span class="mi">1</span> <span class="o">|</span>          <span class="mi">1</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------+------------+---------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p><code>ABS()</code>函数返回绝对值，如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">ABS</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">),</span> <span class="k">ABS</span><span class="p">(</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">),</span> <span class="k">ABS</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="o">+</span><span class="c1">----------+-----------+--------+</span>
<span class="o">|</span> <span class="k">ABS</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span> <span class="o">|</span> <span class="k">ABS</span><span class="p">(</span><span class="mi">10</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="k">ABS</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+-----------+--------+</span>
<span class="o">|</span>       <span class="mi">10</span> <span class="o">|</span>      <span class="mi">10</span><span class="p">.</span><span class="mi">1</span> <span class="o">|</span>      <span class="mi">0</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------+-----------+--------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h3>使用时间数据</h3>

<h4>处理时区</h4>

<p>查看当前系统时区以及会话所取的时区如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="o">@@</span><span class="k">global</span><span class="p">.</span><span class="n">time_zone</span><span class="p">,</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">time_zone</span><span class="p">;</span>
<span class="o">+</span><span class="c1">--------------------+---------------------+</span>
<span class="o">|</span> <span class="o">@@</span><span class="k">global</span><span class="p">.</span><span class="n">time_zone</span> <span class="o">|</span> <span class="o">@@</span><span class="k">session</span><span class="p">.</span><span class="n">time_zone</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------+---------------------+</span>
<span class="o">|</span> <span class="k">SYSTEM</span>             <span class="o">|</span> <span class="k">SYSTEM</span>              <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------+---------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h4>生成时间数据</h4>

<p>可以使用下面任意一种方法产生时间数据：
* 从已有的date、datetime和time列中复制数据；
* 执行返回date、datetime和time型数据的内建函数；
* 构建可以被服务器识别的代表日期的字符串。</p>

<h5>从字符串到日期的转换</h5>

<p><code>cast()</code>函数</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;2012-05-24 18:40:00&#39;</span> <span class="k">AS</span> <span class="n">DATETIME</span><span class="p">);</span>
<span class="o">+</span><span class="c1">-----------------------------------------+</span>
<span class="o">|</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;2012-05-24 18:40:00&#39;</span> <span class="k">AS</span> <span class="n">DATETIME</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">24</span> <span class="mi">18</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mi">00</span>                     <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;2012-05-24 18:40:00&#39;</span> <span class="k">AS</span> <span class="n">TIME</span><span class="p">);</span>
<span class="o">+</span><span class="c1">-------------------------------------+</span>
<span class="o">|</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;2012-05-24 18:40:00&#39;</span> <span class="k">AS</span> <span class="n">TIME</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------------------+</span>
<span class="o">|</span> <span class="mi">18</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mi">00</span>                            <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;2012-05-24 18:40:00&#39;</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">);</span>
<span class="o">+</span><span class="c1">-------------------------------------+</span>
<span class="o">|</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;2012-05-24 18:40:00&#39;</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">24</span>                          <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h5>产生日期的函数</h5>

<p>当提供的字符串不满足<code>CAST()</code>函数操作的字符串时，需要将对应的字符串进行转换，可以使用<code>str_to_date()</code>函数。该函数的使用之后生成的字符串将可以被<code>CAST()</code>函数使用。
<code>str_to_date()</code></p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">STR_TO_DATE</span><span class="p">(</span><span class="s1">&#39;September 17, 2012&#39;</span><span class="p">,</span> <span class="s1">&#39;%M %d, %Y&#39;</span><span class="p">);</span>
<span class="o">+</span><span class="c1">------------------------------------------------+</span>
<span class="o">|</span> <span class="n">STR_TO_DATE</span><span class="p">(</span><span class="s1">&#39;September 17, 2012&#39;</span><span class="p">,</span> <span class="s1">&#39;%M %d, %Y&#39;</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">17</span>                                     <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="n">STR_TO_DATE</span><span class="p">(</span><span class="s1">&#39;September 17, 2012&#39;</span><span class="p">,</span> <span class="s1">&#39;%M %d, %Y&#39;</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">);</span>
<span class="o">+</span><span class="c1">--------------------------------------------------------------+</span>
<span class="o">|</span> <span class="k">CAST</span><span class="p">(</span><span class="n">STR_TO_DATE</span><span class="p">(</span><span class="s1">&#39;September 17, 2012&#39;</span><span class="p">,</span> <span class="s1">&#39;%M %d, %Y&#39;</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------------------------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">17</span>                                                   <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<table>
<thead>
<tr>
<th></th>
<th align="center">日期格式部件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">%M</td>
<td align="center">月名称（1~12）</td>
</tr>
<tr>
<td></td>
<td align="center">%m</td>
<td align="center">月序号（01-12）</td>
</tr>
<tr>
<td></td>
<td align="center">%d</td>
<td align="center">日序号（01-31）</td>
</tr>
<tr>
<td></td>
<td align="center">%j</td>
<td align="center">日在一年中的序号（01-366）</td>
</tr>
<tr>
<td></td>
<td align="center">%W</td>
<td align="center">星期名称</td>
</tr>
<tr>
<td></td>
<td align="center">%Y</td>
<td align="center">4位数表示年份</td>
</tr>
<tr>
<td></td>
<td align="center">%y</td>
<td align="center">两位数字表示年份</td>
</tr>
<tr>
<td></td>
<td align="center">%H</td>
<td align="center">小时（00～23）</td>
</tr>
<tr>
<td></td>
<td align="center">%h</td>
<td align="center">小时（01～12）</td>
</tr>
<tr>
<td></td>
<td align="center">%i</td>
<td align="center">分钟（00～59）</td>
</tr>
<tr>
<td></td>
<td align="center">%s</td>
<td align="center">秒钟（00～59）</td>
</tr>
<tr>
<td></td>
<td align="center">%f</td>
<td align="center">微妙（000000～999999）</td>
</tr>
<tr>
<td></td>
<td align="center">%p</td>
<td align="center">A.M.或P.M.</td>
</tr>
</tbody>
</table>


<p><code>str_to_date</code>根据字符串内容返回<code>datetime</code>、<code>date</code>、或者<code>time</code>类型值，如果格式字符串只包含%H，%i或%s，将会返回<code>TIME</code>值。</p>

<p>如果需要产生当前日期/时间，可以调用内建函数，<code>CURRENT_DATE()</code>，<code>CURRENT_TIME()</code>，<code>CURRENT_TIMESTAMP()</code></p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="k">CURRENT_TIME</span><span class="p">(),</span> <span class="k">CURRENT_TIMESTAMP</span><span class="p">();</span>
<span class="o">+</span><span class="c1">----------------+----------------+---------------------+</span>
<span class="o">|</span> <span class="k">CURRENT_DATE</span><span class="p">()</span> <span class="o">|</span> <span class="k">CURRENT_TIME</span><span class="p">()</span> <span class="o">|</span> <span class="k">CURRENT_TIMESTAMP</span><span class="p">()</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------+----------------+---------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">25</span>     <span class="o">|</span> <span class="mi">02</span><span class="p">:</span><span class="mi">56</span><span class="p">:</span><span class="mi">43</span>       <span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">25</span> <span class="mi">02</span><span class="p">:</span><span class="mi">56</span><span class="p">:</span><span class="mi">43</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------+----------------+---------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h4>操作时间数据</h4>

<h5>返回日期的函数</h5>

<p><code>DATE_ADD()</code>，接收一个日期型的值作为参数，返回另一个日期，如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="nb">INTERVAL</span> <span class="mi">5</span> <span class="k">DAY</span><span class="p">);</span>
<span class="o">+</span><span class="c1">------------------------------------------+</span>
<span class="o">|</span> <span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="nb">INTERVAL</span> <span class="mi">5</span> <span class="k">DAY</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">30</span>                               <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p>其中第二个参数包含了3个元素：<font color ="red"><code>INTERVAL</code>关键字、所需要增加的数量以及时间间隔类型</font></p>

<table>
<thead>
<tr>
<th></th>
<th align="center">间隔名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">Second</td>
<td align="center">秒</td>
</tr>
<tr>
<td></td>
<td align="center">Minute</td>
<td align="center">分钟</td>
</tr>
<tr>
<td></td>
<td align="center">Hour</td>
<td align="center">小时</td>
</tr>
<tr>
<td></td>
<td align="center">Day</td>
<td align="center">天数</td>
</tr>
<tr>
<td></td>
<td align="center">Month</td>
<td align="center">月份</td>
</tr>
<tr>
<td></td>
<td align="center">Year</td>
<td align="center">年份</td>
</tr>
<tr>
<td></td>
<td align="center">Minute_second</td>
<td align="center">分钟数和秒钟数，中间用&#8221;:&#8221;隔开</td>
</tr>
<tr>
<td></td>
<td align="center">Hour_second</td>
<td align="center">小时、分钟和秒钟数，中间用&#8221;:&#8221;隔开</td>
</tr>
<tr>
<td></td>
<td align="center">Year_month</td>
<td align="center">年份和月份，中间用&#8221;-&#8220;隔开</td>
</tr>
</tbody>
</table>


<p><code>last_day()</code>函数返回当前月份的最后一天。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">());</span>
<span class="o">+</span><span class="c1">--------------------------+</span>
<span class="o">|</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">())</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">31</span>               <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CAST</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">()</span> <span class="k">AS</span> <span class="n">DATETIME</span><span class="p">));</span>
<span class="o">+</span><span class="c1">--------------------------------------------+</span>
<span class="o">|</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CAST</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">()</span> <span class="k">AS</span> <span class="n">DATETIME</span><span class="p">))</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">31</span>                                 <span class="o">|</span>
<span class="o">+</span><span class="c1">--------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CAST</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">));</span>
<span class="o">+</span><span class="c1">----------------------------------------+</span>
<span class="o">|</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CAST</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">()</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">))</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------------------------+</span>
<span class="o">|</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">31</span>                             <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CAST</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">()</span> <span class="k">AS</span> <span class="n">TIME</span><span class="p">));</span>
<span class="o">+</span><span class="c1">----------------------------------------+</span>
<span class="o">|</span> <span class="n">LAST_DAY</span><span class="p">(</span><span class="k">CAST</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">()</span> <span class="k">AS</span> <span class="n">TIME</span><span class="p">))</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------------------------+</span>
<span class="o">|</span> <span class="k">NULL</span>                                   <span class="o">|</span>
<span class="o">+</span><span class="c1">----------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">2</span> <span class="n">warnings</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p><code>convert_tz()</code>函数将一个时区的datetime值转换为另一个时区的datetime值。</p>

<h5>返回字符串的时间函数</h5>

<p>返回字符串的函数大多用于提取日期或时间的一部分。<code>dayname()</code>可以确定某一日是星期几：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">DAYNAME</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">());</span>
<span class="o">+</span><span class="c1">-------------------------+</span>
<span class="o">|</span> <span class="n">DAYNAME</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">())</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------+</span>
<span class="o">|</span> <span class="n">Friday</span>                  <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<p>推荐使用<code>EXTRACT()</code>函数从时间中获取当前的年月日等。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">EXTRACT</span><span class="p">(</span><span class="k">YEAR</span> <span class="k">FROM</span> <span class="k">CURRENT_DATE</span><span class="p">());</span>
<span class="o">+</span><span class="c1">-----------------------------------+</span>
<span class="o">|</span> <span class="k">EXTRACT</span><span class="p">(</span><span class="k">YEAR</span> <span class="k">FROM</span> <span class="k">CURRENT_DATE</span><span class="p">())</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------+</span>
<span class="o">|</span>                              <span class="mi">2012</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">EXTRACT</span><span class="p">(</span><span class="k">MINUTE</span> <span class="k">FROM</span> <span class="k">CURRENT_TIMESTAMP</span><span class="p">());</span>
<span class="o">+</span><span class="c1">------------------------------------------+</span>
<span class="o">|</span> <span class="k">EXTRACT</span><span class="p">(</span><span class="k">MINUTE</span> <span class="k">FROM</span> <span class="k">CURRENT_TIMESTAMP</span><span class="p">())</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------------+</span>
<span class="o">|</span>                                       <span class="mi">36</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>


<h5>返回数字的时间函数</h5>

<p><code>datediff()</code>计算两个日期的相差天数。</p>

<h3>转换函数</h3>

<p>使用&#8217;CAST()`函数完成转换功能。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;1456328&#39;</span> <span class="k">AS</span> <span class="n">SIGNED</span> <span class="nb">INTEGER</span><span class="p">);</span>
<span class="o">+</span><span class="c1">-----------------------------------+</span>
<span class="o">|</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;1456328&#39;</span> <span class="k">AS</span> <span class="n">SIGNED</span> <span class="nb">INTEGER</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------+</span>
<span class="o">|</span>                           <span class="mi">1456328</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-----------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;-1456328&#39;</span> <span class="k">AS</span> <span class="n">SIGNED</span> <span class="nb">INTEGER</span><span class="p">);</span>
<span class="o">+</span><span class="c1">------------------------------------+</span>
<span class="o">|</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">&#39;-1456328&#39;</span> <span class="k">AS</span> <span class="n">SIGNED</span> <span class="nb">INTEGER</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------+</span>
<span class="o">|</span>                           <span class="o">-</span><span class="mi">1456328</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown syntax]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/23/markdown-syntax/"/>
    <updated>2012-05-23T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/23/markdown-syntax</id>
    <content type="html"><![CDATA[<h2>链接</h2>

<p>如果需要在页面插入链接，使用尖括号&lt;>括起来便可以了。</p>

<p>如果需要为一段文字加上链接，使用如下方式
<a href="http://www.google.com">文字,google</a> （ <a> href=&#8221;http://&#8221; </a></p>

<p>为链接加上标题可如下所示
<a href="http://www.google.com" title="对应的标题">文字，google</a></p>

<p><a href="http://www.google.com">链接</a>
按照上述方式，在文章中另起一行，通常是在文章的末尾，添加</p>

<pre><code>\[lable1\]:http://www.google.com
</code></pre>

<p>将对应的链接完成即可。注意使用的是中括号和一个冒号，后面添加对应的链接地址。</p>

<p>同样也可以使用链接和标题的方式</p>

<h2>图片</h2>

<p><img src="%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9B%BE%E7%89%87%E7%9A%84%E5%9C%B0%E5%9D%80" title="标签" alt="插入图片" />
<img src="www.google.com" alt="" title="描述"></p>

<h2>标题格式</h2>

<p>通过输入####来确定标题格式，一共有6级
或者是使用====和&#8212;-来确定标题。后面这种只能提供两种级别的。</p>

<h1> </h1>


<h2>粗体和斜体</h2>

<p>文字两边各加一个星号( * )或者下划线（ _ )表示斜体。
各加对应的两个符号表示粗体。
各加对应的三个符号表示粗斜体。
<strong> 粗体</strong>
<em>斜体</em>
<strong><em> 粗斜体</em></strong></p>

<h2>引用内容</h2>

<p>使用>（大于号）即可，相当于html中的blockquote</p>

<blockquote><p>引用</p></blockquote>

<blockquote>引用</blockquote>


<h2>原文输出</h2>

<pre><code>如果一段文字已经有序，或者包含有html中的语法，不想让其再进行解释，只需要将这些文字缩进至少四个空格或一个Tab宽度即可。它对应着html中的&lt;pre&gt;标签。
</code></pre>

<p>比如下面的例子</p>

<div class="highlight"><pre><code class="c"><span class="lineno">1</span>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</code></pre>
</div>




<pre>
<code>
printf("hello world");
</code>
</pre>


<h2>列表</h2>

<p>html中的两种列表分别为无序列表和有序列表，分别使用  <ul></ul> 和<ol></ol>括起来。
在markdown中，对于无序列表，只需要在列表前面加上一个星号( * )、或加号( + )、或减号( - )即可。
* first
* second
- third
+ fourth</p>

<p>对应的html代码为</p>

<div class="highlight"><pre><code class="html"><span class="lineno">1</span> <span class="nt">&lt;ul&gt;</span>
<span class="lineno">2</span> <span class="nt">&lt;li&gt;</span>first<span class="nt">&lt;/li&gt;</span>
<span class="lineno">3</span> <span class="nt">&lt;li&gt;</span>second<span class="nt">&lt;/li&gt;</span>
<span class="lineno">4</span> <span class="nt">&lt;/ul&gt;</span>
</code></pre>
</div>




<ul>
<li>first</li>
<li>second</li>
</ul>


<p>对于有序列表，只需要在第一条前添加一个数字，后跟一个英文句号，次好即可仍旧使用加或星或减。无论第一个条目前加的数字是什么，列表都会从1开始计数。</p>

<ol>
<li>第1条</li>
<li>第2条</li>
<li>第3条abc</li>
<li>第4条</li>
<li>第5条</li>
</ol>


<p>对应的html代码</p>

<ol>
<li>第一条</li>
<li>第2条</li>
</ol>




<div class="highlight"><pre><code class="html"><span class="lineno">1</span> <span class="nt">&lt;ol&gt;</span>
<span class="lineno">2</span> <span class="nt">&lt;li&gt;</span>第一条<span class="nt">&lt;/li&gt;</span>
<span class="lineno">3</span> <span class="nt">&lt;li&gt;</span>第2条<span class="nt">&lt;/li&gt;</span>
<span class="lineno">4</span> <span class="nt">&lt;/ol&gt;</span>
</code></pre>
</div>


<h2>转义符</h2>

<p>在markdown中使用&#8221;&#34;来实现转义。
比如
<a href="http://www.google.com">链接</a>
在加上转义之后变为<br/>
[链接](http://www.google.com)</p>

<p>比如*号的输出，为了输出三个星号
***输出3个星号***</p>

<h2>HTML实体</h2>

<p>在HTML中有两个特殊含义的字符，分别是&#8221;&lt; &#8220;和&#8221; &amp; &#8221;</p>

<h2>换行符</h2>

<p>在一行的末尾使用两个以上的空格表示HTML中的一个换行符“&lt;br/>&#8221;</p>

<pre><code>&lt;br/&gt;表示换行符
</code></pre>

<h2>段落</h2>

<pre><code>在HTML中，使用”&lt;p&gt;&lt;/p&gt;“括起来的内容称为一个段落。在markdonw中，两段之间有一个空行就可以在翻译的时候翻译成一个段落。
</code></pre>

<h2>水平线</h2>

<pre><code>HTML中，“&lt;hr/&gt;"标记可以在页面中输出一条横线，在Markdonw中，使用三个以上的星号”*“或减号"-"可以起到同样的作用。
</code></pre>

<p>星号和减号之间可以有空格；如果减号没有空格，必须在一个段落中，即在含有三个以上无空格分隔的减号的行的前后都要有一个空行。</p>

<p>比如下面的<br/>
google</p>

<hr />

<p>google</p>

<p>与</p>

<p>google</p>

<hr />

<p>google</p>

<p>google</p>

<hr />

<p>google</p>

<p>对应的HTML代码均为</p>

<div class="highlight"><pre><code class="html"><span class="lineno">1</span>     <span class="nt">&lt;p&gt;</span>google<span class="nt">&lt;/p&gt;</span>
<span class="lineno">2</span>     <span class="nt">&lt;hr/&gt;</span>
<span class="lineno">3</span>     <span class="nt">&lt;p&gt;</span>google<span class="nt">&lt;/p&gt;</span>
</code></pre>
</div>




<p>google</p>


<hr/>


<p>google</p>


<p>google</p>

<hr />

<p>google</p>

<h2>嵌套</h2>

<p>在markdown中可以使用嵌套。
比如下面的代码</p>

<blockquote><p>google</p>

<blockquote><p>google
对应的html标签为</p></blockquote></blockquote>

<blockquote>
<p>google</p>

<blockquote>
<p>google</p>
</blockquote>

</blockquote>




<div class="highlight"><pre><code class="html"><span class="lineno">1</span> <span class="nt">&lt;blockquote&gt;</span>
<span class="lineno">2</span> <span class="nt">&lt;p&gt;</span>google<span class="nt">&lt;/p&gt;</span>
<span class="lineno">3</span> 
<span class="lineno">4</span> <span class="nt">&lt;blockquote&gt;</span>
<span class="lineno">5</span> <span class="nt">&lt;p&gt;</span>google<span class="nt">&lt;/p&gt;</span>
<span class="lineno">6</span> <span class="nt">&lt;/blockquote&gt;</span>
<span class="lineno">7</span> 
<span class="lineno">8</span> <span class="nt">&lt;/blockquote&gt;</span>
</code></pre>
</div>


<p>表示HTML中的    <code>"&lt;code&gt;"</code>标记的`同样可以嵌套。如果希望插入一个该符号而不愿意被翻译成为<code>"&lt;code&gt;"</code>，可以使用&#8221;`&#8221;</p>

<p><code>`</code>
html代码为</p>

<p><code>`</code></p>

<div class="highlight"><pre><code class="html"><span class="lineno">1</span> <span class="nt">&lt;code&gt;</span>&#39;<span class="nt">&lt;/code&gt;</span>
</code></pre>
</div>


<h2>c语言测试</h2>

<div class="highlight"><pre><code class="c"><span class="lineno">1</span> <span class="cp">#include &lt;stdio.h&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">4</span>   <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">9527</span><span class="p">;</span>
<span class="lineno">5</span>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Your ID: %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<span class="lineno">6</span>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="lineno">7</span> <span class="p">}</span>
</code></pre>
</div>


<h2>bash测试</h2>

<div class="highlight"><pre><code class="bash"><span class="lineno">1</span> <span class="nb">cd</span> ~
</code></pre>
</div>


<h2>语法高亮简述</h2>

<p>使用pygmentize生成对应的css文件，然后在default.html中修改文件，使用对应的css文件，即可开启语法高亮。</p>

<pre>
<code>
    { % highlight bash linenos % }
    { % endhighlight % }
</code>
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning SQL(ch4-ch6)]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/23/learning-sql/"/>
    <updated>2012-05-23T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/23/learning-sql</id>
    <content type="html"><![CDATA[<h2>CH4 过滤</h2>

<p>在所有的SQL数据处理语句中（insert语句除外）都包含了可选的where子句，其中的过滤条件限制了SQL语句所需要的行数。select子句中包含的having子句也可以对分组数据进行条件过滤。</p>

<h3>条件评估</h3>

<h4>使用圆括号</h4>

<p>当含有多个条件时，各个条件应该使用圆括号括起来。</p>

<h4>使用not操作符</h4>

<p>一般用的较少，相当于取反的操作。</p>

<h3>构建条件</h3>

<p>条件通常是由1个或多个包含1个到多个操作符的表达式构成。
表达式的组成包括：</p>

<ul>
<li>数字</li>
<li>表或视图中的列</li>
<li>字符串</li>
<li>内建函数，比如函数concat(&#8216;Learning&#8217;, &#8216;SQL&#8217;)</li>
<li>子查询</li>
<li>表达式列表</li>
<li>比较操作符，比如=, !=, &lt;, >, &lt;>, LIKE, IN 和BEWEEN。</li>
<li>算术操作符，比如+, -, *和/</li>
</ul>


<h3>条件类型</h3>

<h4>相等条件</h4>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="n">pt</span><span class="p">.</span><span class="n">name</span> <span class="n">product_type</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="n">product</span>
<span class="o">-&gt;</span><span class="k">FROM</span> <span class="n">product</span> <span class="n">p</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">product_type</span> <span class="n">pt</span>
<span class="o">-&gt;</span><span class="k">ON</span> <span class="n">p</span><span class="p">.</span><span class="n">product_type_cd</span> <span class="o">=</span> <span class="n">pt</span><span class="p">.</span><span class="n">product_type_cd</span>
<span class="o">-&gt;</span><span class="k">WHERE</span> <span class="n">pt</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Customer Accounts&#39;</span><span class="p">;</span>
</code></pre>
</div>


<h4>不等条件</h4>

<p>构造不等条件时，可以从<code>!=</code>或者<code>&lt;&gt;</code>中任选一个</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="n">pt</span><span class="p">.</span><span class="n">name</span> <span class="n">product_type</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="n">product</span>
<span class="o">-&gt;</span><span class="k">FROM</span> <span class="n">product</span> <span class="n">p</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">product_type</span> <span class="n">pt</span>
<span class="o">-&gt;</span><span class="k">ON</span> <span class="n">p</span><span class="p">.</span><span class="n">product_type_cd</span> <span class="o">=</span> <span class="n">pt</span><span class="p">.</span><span class="n">product_type_cd</span>
<span class="o">-&gt;</span><span class="k">WHERE</span> <span class="n">pt</span><span class="p">.</span><span class="n">name</span> <span class="o">&lt;&gt;</span> <span class="s1">&#39;Customer Accounts&#39;</span><span class="p">;</span>
</code></pre>
</div>


<h4>范围条件</h4>

<p>使用&lt;，>等来构造范围</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">start_date</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">start_date</span> <span class="o">&lt;</span> <span class="s1">&#39;2007-01-01&#39;</span><span class="p">;</span>
</code></pre>
</div>




<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">start_date</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">start_date</span> <span class="o">&lt;</span> <span class="s1">&#39;2007-01-01&#39;</span><span class="p">;</span>
    <span class="o">-&gt;</span> <span class="k">AND</span> <span class="n">start_date</span> <span class="o">&gt;</span> <span class="s1">&#39;2005-01-01&#39;</span><span class="p">;</span>
</code></pre>
</div>


<h5>使用BETWEEN条件符</h5>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">,</span> <span class="n">start_date</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">start_date</span> <span class="k">BETWEEN</span> <span class="s1">&#39;2005-01-01&#39;</span> <span class="k">AND</span> <span class="s1">&#39;2007-01-01&#39;</span><span class="p">;</span>
</code></pre>
</div>


<p>注意BETWEEN后面的数的取值，紧接着的那个数应该小于AND后面的那个数，同时，这是一个闭区间。比如BETWEEN a AND b，则取值范围为[a,b]。</p>

<p>使用BEWTEEN可以查询日期范围、数字范围，同时也可以查询字符串的范围。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">account_id</span> <span class="p">,</span> <span class="n">product_cd</span><span class="p">,</span> <span class="n">cust_id</span> <span class="p">,</span> <span class="n">avail_balance</span>  
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span> 
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">avail_balance</span> <span class="k">BETWEEN</span> <span class="mi">3000</span> <span class="k">AND</span> <span class="mi">5000</span><span class="p">;</span>
</code></pre>
</div>


<h4>成员条件</h4>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">account_id</span><span class="p">,</span> <span class="n">product_cd</span><span class="p">,</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">avail_balance</span> 
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">product_cd</span> <span class="o">=</span> <span class="s1">&#39;CHK&#39;</span> <span class="k">OR</span> <span class="n">product_cd</span> <span class="o">=</span> <span class="s1">&#39;SAV&#39;</span>
    <span class="o">-&gt;</span> <span class="k">OR</span> <span class="n">product_cd</span> <span class="o">=</span> <span class="s1">&#39;CD&#39;</span> <span class="k">OR</span> <span class="n">product_cd</span> <span class="o">=</span> <span class="s1">&#39;MM&#39;</span><span class="p">;</span>
</code></pre>
</div>


<p>使用in来代替上面的多个输入</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">account_id</span><span class="p">,</span> <span class="n">product_cd</span><span class="p">,</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">avail_balance</span> 
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">product_cd</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;CHK&#39;</span><span class="p">,</span> <span class="s1">&#39;SAV&#39;</span><span class="p">,</span> <span class="s1">&#39;CD&#39;</span><span class="p">,</span> <span class="s1">&#39;MM&#39;</span><span class="p">);</span>
</code></pre>
</div>


<p>使用子查询</p>

<p>使用not in</p>

<h5>匹配条件</h5>

<p>使用通配符</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">通配符</th>
<th align="center">匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">_</td>
<td align="center">正好一个字符</td>
</tr>
<tr>
<td></td>
<td align="center">%</td>
<td align="center">任意数字字符（包括0）</td>
</tr>
</tbody>
</table>


<p>使用正则表达式<br/>
REGEXP</p>

<h3>null关键字</h3>

<p>null的使用场合包括如下几种</p>

<ul>
<li><strong>没有合适的值</strong></li>
<li><strong>值未确定</strong></li>
<li><strong>值未定义</strong></li>
</ul>


<p>当使用null时必须牢记以下两点</p>

<ul>
<li>表达式可以为null，但是不能等于null;</li>
<li>两个null值彼此不能判断为相等。</li>
</ul>


<h2>CH5 多表查询</h2>

<p>将位于两个表中的数据通过一个相同的关键字整合到一起的机制便是连接（<strong>join</strong>）。本章主要描述的是内连接（<strong>INNER JOIN</strong>）。</p>

<h3>什么是连接</h3>

<p>使用两个不同表中的列，这两个列的值是对应的，即这两个表中该列的值是相同的。通过使用这一列，从而实现在同一查询的结果集中包含来自两个表的列，这个操作被称为连接。</p>

<h4>笛卡尔积</h4>

<p>在<code>FROM</code>子句中包含两个表，并且使用<code>JOIN</code>隔开。如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">lname</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span> <span class="n">e</span> <span class="k">JOIN</span> <span class="n">department</span> <span class="n">d</span><span class="p">;</span>
</code></pre>
</div>


<p>上面将会将这两个表中选出的东西做交叉乘积，类似于笛卡尔积的方式将返回结果。</p>

<pre><code> &gt;笛卡尔积基本概念
 有两个集合A,B，对于任意元素a属于A，元素b属于B。这两个集合的笛卡尔积表示的是C{c=(a,b)|a属于A，b属于B}
</code></pre>

<p>因此上述的结果与笛卡尔积的结果类似，不属于同一个表的两个结果返回。上面这种连接被称为交叉连接（<code>cross join</code>），在实际中用的较少。</p>

<h4>内连接</h4>

<p>为了将表的结果返回一个对应的值，需要使用内连接（<code>INNER JOIN</code>）。通过添加<code>ON</code>子句并可以达到这个目的。在使用内连接（<code>INNER JOIN</code>）时，如果两个表中出现了一个表中有而另一个表中对应的元素是缺失的情况下，将会把该对应的行去除。如果需要显示，需要使用外连接（<code>OUTER JOIN</code>），在后面会进行详细描述。
下面是个例子</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">lname</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span> <span class="n">e</span> <span class="k">JOIN</span> <span class="n">department</span> <span class="n">d</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">e</span><span class="p">.</span><span class="n">dept_id</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">dept_id</span><span class="p">;</span>
</code></pre>
</div>


<p>在上面的例子中，没有显示的指明是否为内连接，在默认的情况下是内连接，但是最好增加关键词<code>INNER</code>。如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">lname</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span> <span class="n">e</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">department</span> <span class="n">d</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">e</span><span class="p">.</span><span class="n">dept_id</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">dept_id</span><span class="p">;</span>
</code></pre>
</div>


<p>如果连接的两个表的列名是相同的，可以使用<code>USING</code>子句来代替<code>ON</code>子句，如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">lname</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span> <span class="n">e</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">department</span> <span class="n">d</span>
    <span class="o">-&gt;</span> <span class="k">USING</span> <span class="p">(</span><span class="n">dept_id</span><span class="p">);</span>
</code></pre>
</div>


<h4>ANSI连接语法</h4>

<p>下面是一个使用旧语法的例子，在这个例子中没有<code>ON</code>子句，在<code>FROM</code>子句中定义各表的别名，并使用逗号隔开，然后在<code>WHERE</code>子句中包含连接条件。</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">lname</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span> <span class="n">e</span><span class="p">,</span> <span class="n">department</span> <span class="n">d</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">dept_id</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">dept_id</span><span class="p">;</span>
</code></pre>
</div>


<p>但是ANSI连接语法的优势如下：</p>

<ul>
<li>连接条件和过滤条件被分隔到两个子句（<code>ON</code>子句和<code>WHERE</code>子句），使查询语句更易理解；</li>
<li>每两个表之间的连接条件都在它们自己的<code>ON</code>子句中列出，这样不容易错误地忽略了某些连接条件；</li>
<li>使用SQL92连接语法的查询语句具有通用性。</li>
</ul>


<p>例子如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">account_id</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">cust_id</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">open_date</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">product_cd</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span> <span class="n">a</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">employee</span> <span class="n">e</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">open_emp_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">emp_id</span>
    <span class="o">-&gt;</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">branch</span> <span class="n">b</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">e</span><span class="p">.</span><span class="n">assigned_branch_id</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">branch_id</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">start_date</span> <span class="o">&lt;</span> <span class="s1">&#39;2007-01-01&#39;</span>
    <span class="o">-&gt;</span> <span class="k">AND</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Teller&#39;</span> <span class="k">OR</span> <span class="n">e</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Head Teller&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">AND</span> <span class="n">b</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Woburn Branch&#39;</span><span class="p">;</span>
</code></pre>
</div>


<h3>连接3个或更多的表</h3>

<p>两个表的连接中，<code>FROM</code>子句中包含了两个表名和一种连接类型，<code>ON</code>子句中指定两表是怎么连接的。
对于三个表的连接中，<code>FROM</code>子句中包含了三个表名和两种连接类型，以及两个<code>ON</code>子句。
两个表的例子：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="n">account_id</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">fed_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span> <span class="n">a</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">customer</span> <span class="k">c</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">cust_id</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">cust_id</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="k">c</span><span class="p">.</span><span class="n">cust_type_cd</span> <span class="o">=</span> <span class="s1">&#39;B&#39;</span><span class="p">;</span>
</code></pre>
</div>


<p>三个表的例子</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">account_id</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">fed_id</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">lname</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span> <span class="n">a</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">customer</span> <span class="k">c</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">cust_id</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">cust_id</span>
    <span class="o">-&gt;</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">employee</span> <span class="n">e</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">open_emp_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">emp_id</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="k">c</span><span class="p">.</span><span class="n">cust_type_cd</span> <span class="o">=</span> <span class="s1">&#39;B&#39;</span><span class="p">;</span>
</code></pre>
</div>


<p>SQL是一种非过程化的语言，因此表的顺序不重要。如果需要对表的顺序进行强制规定，对于MySQL可以使用<code>STRAIGHT_JOIN</code>进行强制的规定。如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">STRAIGHT_JOIN</span> <span class="n">a</span><span class="p">.</span><span class="n">account_id</span><span class="p">,</span> <span class="k">c</span><span class="p">.</span><span class="n">fed_id</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">lname</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span> <span class="n">a</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">customer</span> <span class="k">c</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">cust_id</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">cust_id</span>
    <span class="o">-&gt;</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">employee</span> <span class="n">e</span>
    <span class="o">-&gt;</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">open_emp_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">emp_id</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="k">c</span><span class="p">.</span><span class="n">cust_type_cd</span> <span class="o">=</span> <span class="s1">&#39;B&#39;</span><span class="p">;</span>
</code></pre>
</div>


<h4>将子查询结果作为查询表</h4>

<p>在使用这种方式的时候，将子<code>SELECT</code>语句返回的结果使用一个括号括起来，然后在后面添加一个别名，在前面使用<code>INNER JOIN</code>与该表连接，在后面使用<code>ON</code>子句进行连接。</p>

<h4>连续两次使用同一表</h4>

<p>在这种情况下，对同一个表使用两个不同的别名即可解决问题，其他的处理方式与两个不同的表的处理方式一样。</p>

<h3>自连接</h3>

<p>同样是表的别名，其他与多张不同的表一样。</p>

<h3>相等连接和不等连接</h3>

<p>除了可以使用等于号（=）之外还可以使用范围描述符。</p>

<h3>连接条件和过滤条件</h3>

<h2>CH6 使用集合</h2>

<h3>集合理论</h3>

<p>交（intersect)
并（union）
差（except）</p>

<h3>示例</h3>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="mi">1</span> <span class="n">num</span><span class="p">,</span> <span class="s1">&#39;abc&#39;</span> <span class="n">str</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="mi">9</span> <span class="n">num</span><span class="p">,</span> <span class="s1">&#39;efg&#39;</span> <span class="n">str</span><span class="p">;</span>
</code></pre>
</div>


<p>使用<code>SELECT</code>语句显示语句，然后使用<code>UNION</code>操作符将两个<code>SELECT</code>语句的内容进行并操作，在最终的结果中将会显示两行。</p>

<h3>集合操作符</h3>

<p>集合操作符包含两种修饰符，一个表示包含重复项，另一个表示去除重复项。</p>

<h4><code>UNION</code>操作符</h4>

<p><code>UNION ALL</code>保留重复项，<code>UNION</code>去除重复项。
示例</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="s1">&#39;IND&#39;</span> <span class="n">type_cd</span><span class="p">,</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">lname</span> <span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">individual</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="s1">&#39;BUS&#39;</span> <span class="n">type_cd</span><span class="p">,</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">business</span><span class="p">;</span>
</code></pre>
</div>


<p>示例2</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="s1">&#39;IND&#39;</span> <span class="n">type_cd</span><span class="p">,</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">lname</span> <span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">individual</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="s1">&#39;BUS&#39;</span> <span class="n">type_cd</span><span class="p">,</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">business</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="s1">&#39;BUS&#39;</span> <span class="n">type_cd</span><span class="p">,</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">name</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">business</span><span class="p">;</span>
</code></pre>
</div>


<p>示例3</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">assigned_branch_id</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="o">-&gt;</span> <span class="k">AND</span> <span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="ss">&quot;Teller&quot;</span> <span class="k">OR</span> <span class="n">title</span> <span class="o">=</span> <span class="ss">&quot;Header Teller&quot;</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">open_emp_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">open_branch_id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre>
</div>


<p>示例4</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">assigned_branch_id</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="o">-&gt;</span> <span class="k">AND</span> <span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="ss">&quot;Teller&quot;</span> <span class="k">OR</span> <span class="n">title</span> <span class="o">=</span> <span class="ss">&quot;Header Teller&quot;</span><span class="p">)</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">open_emp_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">open_branch_id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre>
</div>


<h4>intersect操作符</h4>

<p>在MySQL中，没有实现intersect的操作。</p>

<div class="highlight"><pre><code class="sql"><span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span>
<span class="k">FROM</span> <span class="n">employee</span>
<span class="k">INTERSECT</span>
<span class="k">SELECT</span> <span class="n">cust_id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span>
<span class="k">FROM</span> <span class="n">individual</span>
</code></pre>
</div>


<h4>except操作符</h4>

<p>MySQL中没有该操作符。</p>

<h3>集合操作规则</h3>

<h4>对复合查询结果排序</h4>

<p>通常情况下，复合查询中两个查询对应列的名字是相同的，但是不是强制的，如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">assigned_branch_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Teller&#39;</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="n">open_emp_id</span><span class="p">,</span> <span class="n">open_branch_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">product_cd</span> <span class="o">=</span> <span class="s1">&#39;SAV&#39;</span>
    <span class="o">-&gt;</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">emp_id</span><span class="p">;</span>
</code></pre>
</div>


<p>如果这两个列的名字不同，但是指定的是后面列的名字的话，会出错，如下所示：</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">emp_id</span><span class="p">,</span> <span class="n">assigned_branch_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">employee</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Teller&#39;</span>
    <span class="o">-&gt;</span> <span class="k">UNION</span>
    <span class="o">-&gt;</span> <span class="k">SELECT</span> <span class="n">open_emp_id</span><span class="p">,</span> <span class="n">open_branch_id</span>
    <span class="o">-&gt;</span> <span class="k">FROM</span> <span class="n">account</span>
    <span class="o">-&gt;</span> <span class="k">WHERE</span> <span class="n">product_cd</span> <span class="o">=</span> <span class="s1">&#39;SAV&#39;</span>
    <span class="o">-&gt;</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">open_emp_id</span><span class="p">;</span>
<span class="n">ERROR</span> <span class="mi">1054</span> <span class="p">(</span><span class="mi">42</span><span class="n">S22</span><span class="p">):</span> <span class="k">Unknown</span> <span class="k">column</span> <span class="s1">&#39;open_emp_id&#39;</span> <span class="k">in</span> <span class="s1">&#39;order clause&#39;</span>
</code></pre>
</div>


<h4>集合操作符优先级</h4>

<p>用不同的集合操作符构建复合查询时会产生不同的查询结果。当复合查询包含3个或3个以上的查询语句，它们以自顶向下的顺序被解析和执行。注意以下两点</p>

<ul>
<li>根据ANSI SQL标准，在调用集合操作时，intersect操作符比其他操作符具有更高的优先级；</li>
<li>可以用圆括号对多个查询进行封装，以明确指定它们的执行顺序。</li>
</ul>


<p>但是需要注意的是<strong>在MySQL中还没有实现intersect操作符，并且也不允许在复合查询时使用括号。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning SQL(ch1-ch3)]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/22/learning-sql/"/>
    <updated>2012-05-22T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/22/learning-sql</id>
    <content type="html"><![CDATA[<h2>CH1 背景知识</h2>

<h3>术语</h3>

<table>
<thead>
<tr>
<th></th>
<th align="center">术  语  </th>
<th align="left">   定义 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">实  体  </td>
<td align="left">数据库用户所关注的对象，如顾客、部门、地理等。</td>
</tr>
<tr>
<td></td>
<td align="center">列      </td>
<td align="left">存储在表中的独立数据片段。                    </td>
</tr>
<tr>
<td></td>
<td align="center">行      </td>
<td align="left">所有列的一个集合，完整地描述了一个实体或实体上的某种行为，也称之为记录。</td>
</tr>
<tr>
<td></td>
<td align="center">表      </td>
<td align="left">行的集合，既可以保存在内存中（未持久化），也可以保存在存储设备中（已持久化）。</td>
</tr>
<tr>
<td></td>
<td align="center">结果表  </td>
<td align="left"> 未持久化的表的另一个名字，一般为查询的结果。</td>
</tr>
<tr>
<td></td>
<td align="center">主 键   </td>
<td align="left"> 用于唯一标识表中每个行的一个或多个列。</td>
</tr>
<tr>
<td></td>
<td align="center">外 键   </td>
<td align="left">一个或多个用于标识其他表中某一行的列。</td>
</tr>
</tbody>
</table>


<h3>SQL语句分类</h3>

<p>通过SQL方案语句所创建的所有数据库元素都被存储在一个特殊的表集合，即数据字典中。
SQL语句</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">select</span> <span class="o">/</span> <span class="o">*</span> <span class="err">一个或多个事务</span> <span class="o">*</span> <span class="o">/</span> <span class="p">...</span>
<span class="o">&gt;</span><span class="k">from</span>  <span class="o">/</span> <span class="o">*</span> <span class="err">一个或多个地点</span> <span class="o">*</span> <span class="o">/</span> <span class="p">...</span>
<span class="o">&gt;</span><span class="k">where</span>  <span class="o">/</span> <span class="o">*</span> <span class="err">一个或多个条件</span> <span class="o">*</span> <span class="o">/</span> <span class="p">...</span>
<span class="o">&gt;</span><span class="k">update</span>
<span class="o">&gt;</span><span class="k">delete</span>
<span class="o">&gt;</span><span class="k">insert</span>
</code></pre>
</div>


<h2>CH2 创建和使用数据库</h2>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="n">mysql</span> <span class="o">-</span><span class="n">u</span> <span class="k">user</span> <span class="o">-</span><span class="n">p</span> <span class="n">passwd</span>
</code></pre>
</div>


<p>进入用户名为user，密码为passwd的账户
在使用root用户登录之后可以创建其他的账户，允许其他账户进行登录</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">create</span> <span class="k">database</span> <span class="n">bank</span><span class="p">;</span>
</code></pre>
</div>


<p>创建一个bank数据库</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">grant</span> <span class="k">all</span> <span class="k">privileges</span> <span class="k">on</span> <span class="n">bank</span><span class="p">.</span><span class="err">\</span><span class="o">*</span> <span class="k">to</span> <span class="s1">&#39;someuser&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span> <span class="n">identified</span> <span class="k">by</span> <span class="s1">&#39;passwd&#39;</span>
</code></pre>
</div>


<p>创建一个用户名为someuser，密码为passwd的账户，可以使用bank数据库的所有表项，具有完全的权限。</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">select</span> <span class="n">now</span><span class="p">();</span>
</code></pre>
</div>


<p>可以用来查询系统的时间，now()是MySQL内建的函数。
如果为了与oracle数据库兼容，可以使用</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">select</span> <span class="n">now</span><span class="p">()</span> <span class="k">from</span> <span class="n">dual</span><span class="p">;</span>
</code></pre>
</div>


<h3>MySQL数据类型</h3>

<p>仅仅讨论字符型、数值型和日期型</p>

<h4>字符类型</h4>

<p>有两种，可变型和固定长度。固定长度的在长度不满足要求时使用空格向右填充，保证满足定长，而变长的不需要。
当定义一个字符列时<strong>必须</strong>指定字符串的最大长度。</p>

<ol>
<li>char(20) 固定长度</li>
<li>varchar(20) 可变长度</li>
</ol>


<p>char列可以设置的最大长度为<em>255</em>个字节，varchar列最多可以存储65535字节。</p>

<div class="highlight"><pre><code class="sql"><span class="k">show</span> <span class="nb">character</span> <span class="k">set</span><span class="p">;</span>
</code></pre>
</div>


<p>显示mysql支持的字符集。
为数据列指定非默认的字符集只需要在类型定义后加上系统支持的字符集名称，比如
<code>varchar(20) character set utf8</code></p>

<p>在mysql中修改整个数据库的默认字符集：</p>

<div class="highlight"><pre><code class="sql"><span class="k">create</span> <span class="k">database</span> <span class="n">foreign_sales</span> <span class="nb">character</span> <span class="k">set</span> <span class="n">utf8</span><span class="p">;</span>
</code></pre>
</div>


<h5>文本数据</h5>

<p>若超过了64KB则需要使用文本类型</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">文本类型</th>
<th align="left">最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">tinytext</td>
<td align="left">255</td>
</tr>
<tr>
<td></td>
<td align="left">text     </td>
<td align="left">65 535</td>
</tr>
<tr>
<td></td>
<td align="left">mediumtext</td>
<td align="left"> 16 777 215</td>
</tr>
<tr>
<td></td>
<td align="left">longtext  </td>
<td align="left"> 4 294 967 295</td>
</tr>
</tbody>
</table>


<p>注意：
若超长，则截短；
不会消除尾部的空格；
使用文本列排序时，只会使用前1024个字节，可以放宽；</p>

<h4>数值型数据</h4>

<h5>整数类型</h5>

<table>
<thead>
<tr>
<th></th>
<th align="left">类型</th>
<th align="left">最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">tinyint</td>
<td align="left"> -128~127 0~255</td>
</tr>
<tr>
<td></td>
<td align="left">smallint</td>
<td align="left"> -32 768~32 767 0~65535</td>
</tr>
<tr>
<td></td>
<td align="left">mediumint</td>
<td align="left"> -8 388 608 ~ 8 388 607 0~16 777 215</td>
</tr>
<tr>
<td></td>
<td align="left">int      </td>
<td align="left">-2 147 483 648 ~ 2 147 483 647 0 ~ 4 294 967 295</td>
</tr>
<tr>
<td></td>
<td align="left">bigint   </td>
<td align="left">-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807 (8字节)</td>
</tr>
</tbody>
</table>


<h5>浮点类型</h5>

<ol>
<li>float(p,s) 38次方</li>
<li>double(p,s) 308次方</li>
</ol>


<p>p为小数点左边到右边所允许的数字总位数
s为小数点右边所允许的数字位数</p>

<h4>时间数据</h4>

<table>
<thead>
<tr>
<th></th>
<th align="left">类型</th>
<th align="left">格式</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">date </td>
<td align="left">YYYY-MM-DD</td>
</tr>
<tr>
<td></td>
<td align="left">datetime</td>
<td align="left"> YYYY-MM-DD HH:MI:SS</td>
</tr>
<tr>
<td></td>
<td align="left">timestamp</td>
<td align="left"> YYYY-MM-DD HH:MI:SS</td>
</tr>
<tr>
<td></td>
<td align="left">year</td>
<td align="left"> YYYY</td>
</tr>
<tr>
<td></td>
<td align="left">time</td>
<td align="left"> HHH:MI:SS</td>
</tr>
</tbody>
</table>


<h4>创建表</h4>

<p>在定义表时，需要向数据库指明哪个列或者哪些列作为表的主键，通过为表建立一个约束(constraint)可以做到这一点。
MySQL提供了一种enum数据类型，与c语言的枚举是一个道理，仅仅允许从那几个字符里面选择一个。</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">create</span> <span class="k">table</span> <span class="n">person</span> <span class="p">(</span><span class="n">person_id</span> <span class="nb">smallint</span> <span class="n">unsigned</span><span class="p">,</span> <span class="n">fname</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">lname</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">gender</span> <span class="n">enum</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">,</span><span class="s1">&#39;F&#39;</span><span class="p">),</span> <span class="n">birth_date</span> <span class="nb">date</span><span class="p">,</span> <span class="n">street</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">),</span> <span class="n">city</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="k">state</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">country</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">postal_code</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="k">constraint</span> <span class="n">pk_person</span> <span class="k">primary</span> <span class="k">key</span> <span class="p">(</span><span class="n">person_id</span><span class="p">)</span> <span class="p">);</span>
</code></pre>
</div>


<p>上述语句创建一个表。</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">desc</span><span class="p">(</span><span class="n">describle</span><span class="p">)</span> <span class="n">person</span><span class="p">;</span>
</code></pre>
</div>


<p>查看表是否被创建</p>

<p>使用</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">create</span> <span class="k">table</span> <span class="n">name</span> <span class="p">(</span><span class="err">表所包含的数据</span><span class="p">);</span>
</code></pre>
</div>


<p>来创建一个表。</p>

<p>使用desc查看表之后，在表中会出现NULL字段
对于NULL字段的出现，一共有三种情况：
业务上不可行
不知道应如何赋值
集合为空</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">create</span> <span class="k">table</span> <span class="n">favorite_food</span> <span class="p">(</span><span class="n">person_id</span> <span class="nb">smallint</span> <span class="n">unsigned</span><span class="p">,</span> <span class="n">food</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="k">constraint</span> <span class="n">pk_favorite_food</span> <span class="k">primary</span> <span class="k">key</span><span class="p">(</span><span class="n">person_id</span><span class="p">,</span> <span class="n">food</span><span class="p">)</span> <span class="p">,</span> <span class="k">constraint</span> <span class="n">fk_fav_food_person_id</span> <span class="k">foreign</span> <span class="k">key</span><span class="p">(</span><span class="n">person_id</span><span class="p">)</span> <span class="k">references</span> <span class="n">person</span><span class="p">(</span><span class="n">person_id</span><span class="p">)</span> <span class="p">);</span>
</code></pre>
</div>


<p>上述语句创建一个表，其中的<code>foreign key(key_name) references table_name(key_name)</code>是外键约束的创建，使得<code>key_name</code>仅仅只能是<code>table_name</code>这个表中的<code>key_name</code>。若在这个表里面没有对应的<code>key_name</code>时，创建条目将会是错误的。
如果在首次建表时忘记创建外键约束，可以在后面通过<code>alter table</code>语句添加。</p>

<h4>操作和修改表</h4>

<h5>插入数据insert</h5>

<p>insert语句由3个部分构成
所要插入的数据的表的名称；
表中需要使用的列的名称；
需要插入到列的值。</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">alter</span> <span class="k">table</span> <span class="n">talbe_name</span> <span class="k">modify</span> <span class="n">colum_name</span> <span class="n">for_example</span> <span class="nb">smallint</span> <span class="n">unsigned</span> <span class="n">auto_increment</span><span class="p">;</span>
</code></pre>
</div>




<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">table_name</span>

<span class="o">&gt;</span><span class="p">(</span><span class="k">column</span> <span class="n">name</span><span class="p">)</span>

<span class="o">&gt;</span><span class="k">VALUES</span><span class="p">(</span><span class="n">the</span> <span class="k">values</span><span class="p">);</span>
</code></pre>
</div>


<p>mysql使用xml格式数据，在进入mysql数据库时，输入</p>

<div class="highlight"><pre><code class="sql"><span class="n">mysql</span> <span class="o">-</span><span class="n">u</span> <span class="n">lrngsql</span> <span class="o">-</span><span class="n">p</span> <span class="c1">--xml bank</span>
</code></pre>
</div>


<p>输入密码之后即进入的是xml格式的数据库。</p>

<h5>更新数据</h5>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">UPDATE</span> <span class="k">table_name</span> <span class="k">SET</span> <span class="n">column1</span> <span class="o">=</span> <span class="s1">&#39;value1&#39;</span> <span class="n">column2</span> <span class="o">=</span> <span class="s1">&#39;value2&#39;</span> <span class="p">...</span> <span class="k">WHERE</span> <span class="n">primary_key</span> <span class="o">=</span> <span class="n">somevalue</span>
</code></pre>
</div>


<h5>删除数据</h5>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">DELETE</span> <span class="k">FROM</span> <span class="k">table_name</span> <span class="k">WHERE</span> <span class="n">some_value</span> <span class="n">mached</span>
</code></pre>
</div>


<p>省略WHERE的条件，则会删除表中的所有数据。</p>

<h5>常见错误</h5>

<ol>
<li>主键不唯一</li>
<li>不存在对应的外键</li>
<li>列值不合法</li>
<li>无效的日期转换</li>
</ol>


<h4>显示数据库有多少表</h4>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">SHOW</span> <span class="n">TABLES</span><span class="p">;</span>
</code></pre>
</div>


<h5>删除表</h5>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">DROP</span> <span class="n">TABLES</span> <span class="k">table_name</span><span class="p">:</span>
</code></pre>
</div>


<h2>CH3 查询入门</h2>

<ol>
<li>select 确定结果集中应该包含哪些列</li>
<li>from   指明所要提取数据的表，以及这些表是如何链接的</li>
<li>where  过滤不需要的数据</li>
<li>group by 用于对具有相同列值的行进行分组</li>
<li>having  过滤掉不需要的组</li>
<li>order by 按一个或多个列，对最后结果集中的行进行排序</li>
</ol>


<p>通常查询条件至少包好6个子句中的2～3个。</p>

<h4>SELECT子句</h4>

<p>example:</p>

<div class="highlight"><pre><code class="sql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">table_name</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">name</span> <span class="k">FROM</span> <span class="k">table_name</span><span class="p">;</span>
</code></pre>
</div>


<p>显示<code>table_name</code>表中所有的行和列。
<code>select</code>子句用于在所有可能的列中，选择查询结果集要包含哪些列。就是从所有的列中，选出自己感兴趣的列进行打印出来。</p>

<p>在<code>select</code>字句中可以添加一些”调料“</p>

<ol>
<li>字符，比如数字或者字符串；</li>
<li>表达式；</li>
<li>调用内建函数；</li>
<li>用户自定义的函数调用。</li>
</ol>


<h5>别的别名</h5>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">select</span> <span class="n">column_name1</span> <span class="k">AS</span> <span class="n">alias1</span><span class="p">,</span> <span class="n">column_name2</span> <span class="k">AS</span> <span class="n">alias2</span> <span class="k">from</span> <span class="k">table</span><span class="p">;</span>
</code></pre>
</div>


<p>从表中查找<code>column_name1</code>，同时将其取名为<code>alias1</code>。
用于实现标签的名字转换。</p>

<h5>去除重复的行</h5>

<p>在<code>select</code>后面加上关键字<code>distinct</code>。</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">cust_id</span> <span class="k">FROM</span> <span class="n">account</span><span class="p">;</span>
</code></pre>
</div>


<p>注意：对<code>DISTINCT</code>的使用，会对数据进行排序，会浪费时间。因此不要随便使用这个词，在确定没有重复数据时，便可以不使用它。</p>

<h4>FROM子句</h4>

<p>from子句定义了查询中所使用的表，以及连接这些表的方式。</p>

<p>在对表的宽泛定义下，一共存在三种类型的表：</p>

<ol>
<li>永久表（使用create table语句创建的表）；</li>
<li>临时表（select 子查询所返回的表）；</li>
<li>虚拟表（使用create view 子句所创建的表）。</li>
</ol>


<h5>子查询产生的表</h5>

<p>子查询可以出现在<code>select</code>语句中的各个部分并且包含在圆括号中。</p>

<h5>视图</h5>

<p>视图是存储在数据字典中的查询，它的行为表现的像一个表，但实际上并不拥有任何数据。
在使用这种查询时，需要首先创建一个视图</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">view_name</span> <span class="k">AS</span> <span class="k">SELECT</span> <span class="n">colmn_1</span><span class="p">,</span> <span class="n">colmn_2</span> <span class="k">FROM</span> <span class="k">table_name</span><span class="p">;</span>
</code></pre>
</div>


<h5>表链接</h5>

<p>详见第5章，使用ON子句连接</p>

<h5>定义表别名</h5>

<p>有两种在from子句之外引用表的方式：</p>

<p>1.使用完整的表名称；</p>

<p>2.为每个表指定别名，并在查询中需要的地方使用该别名。</p>

<p>同样可以在别名的前面使用AS
example:</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">SELECT</span> <span class="k">alias</span><span class="p">.</span><span class="n">column1</span> <span class="k">FROM</span> <span class="k">table</span> <span class="k">alias</span><span class="p">;</span>

<span class="o">&gt;</span><span class="k">SELECT</span> <span class="k">alias</span><span class="p">.</span><span class="n">column1</span> <span class="k">FROM</span> <span class="k">table</span> <span class="k">AS</span> <span class="k">alias</span><span class="p">;</span>
</code></pre>
</div>


<p>上面两个例子均是将table这个另外命名为alias，这个操作可以将表的名称进行简化。</p>

<h4>where子句</h4>

<p>where子句的作用在于过滤不需要的行。
如果where中包含多个条件，它们之间的操作符使用and、or或者not分隔。
在混合使用不同的操作符时，应当总是使用圆括号来分隔成组的条件。</p>

<h4>group by和having子句</h4>

<p>详见第八章</p>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">SELECT</span> <span class="n">d</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">emp_id</span><span class="p">)</span> <span class="n">num_employees</span>
<span class="o">&gt;</span><span class="k">FROM</span> <span class="n">department</span> <span class="n">d</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">employee</span> <span class="n">e</span>
<span class="o">&gt;</span><span class="k">ON</span> <span class="n">d</span><span class="p">.</span><span class="n">dept_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">dept_id</span>
<span class="o">&gt;</span><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">d</span><span class="p">.</span><span class="n">name</span>
<span class="o">&gt;</span><span class="k">HAVING</span> <span class="n">coutn</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">emp_id</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span>
</code></pre>
</div>


<h4>order by子句</h4>

<p><code>order by</code>子句用于对结果中集中的原始列数据或是根据列数据计算的表达式结果进行排序。</p>

<p>可以使用多个条件在<code>order by</code>子句中。在这个子句中各列的出现顺序决定了对对各列排序的次序。</p>

<h5>升序或降序排序</h5>

<p>在排序时，可以通过关键字<code>asc</code>和<code>desc</code>指定是升序还是降序，默认情况下是升序排列。</p>

<h5>根据表达式排序</h5>

<div class="highlight"><pre><code class="sql"><span class="o">&gt;</span><span class="k">right</span><span class="p">(</span><span class="n">fed_id</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</code></pre>
</div>


<p>使用MySQL的内建函数提取<code>fed_id</code>列的最后三个字符。</p>

<h5>根据数字占位符排序</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown基本语法学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/22/learning-markdown/"/>
    <updated>2012-05-22T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/22/learning-markdown</id>
    <content type="html"><![CDATA[<h1>markdown基本语法</h1>

<p>摘抄自<em>http://wowubuntu.com/markdown/</em></p>

<h2>宗旨</h2>

<p>Markdown 的目标是实现「易读易写」。</p>

<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>

<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<strong>强调</strong>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>

<h2>兼容 HTML</h2>

<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>

<p>HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>

<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>

<p>要制约的只有一些 HTML 区块元素――比如 <div>、<table>、<pre>、<p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <p> 标签。</p>

<p>在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。</p>

<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code>可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的<code>&lt;a&gt;</code>或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>

<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>

<h2>特殊字符自动转换</h2>

<p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt</code>; 和 <code>&amp;amp</code>;。</p>

<h2>表格创建宗旨</h2>

<ol>
<li>每行至少有一个|字符;</li>
<li>第二行仅仅能够有|,-,:,.或者空格;</li>
<li>每个单元的内容必须仅仅只有一行;</li>
<li>表的第一行并且每行的分隔符必须出现在每行的起始处;</li>
<li>列的分隔必须使用|.</li>
</ol>


<h3>Notes:</h3>

<ol>
<li>在每个单元内部可以使用Markdown的语法；</li>
<li>在每行的起始和末尾的|是可选的（？？？）；</li>
<li>每个单元可以是空的；</li>
<li><p>为了对齐，可以使用冒号来设计左对齐或者右对齐或者是居中对齐。如果没有提供冒号，将会按照默认的方式对齐，大部分是左对齐。如果使用了点字符（.），这个字符对齐符将会被使用。在之后浙江允许列的十进制格式的数按照十进制字符对齐。浏览器目前不支持，可以在XSLT的格式中使用，（Latex）。</p></li>
<li><p>为了表明一个单元合并来多个列，在该单元格后面添加一个额外的|便可以。如果该单元位于行的末尾，那意味着对改行的末尾不是可选的。</p></li>
</ol>


<p>表格的标题是可选的，但是如果需要提供的话，必须位于紧跟在表格之后的那行的开始处，以[开始并且以]结束。如果在表格的开始和结尾都有标题说明，仅仅第一个匹配的将会被使用。</p>

<p>如果有标题，同样也可以有标签，允许创建表格的定位点。如果没有标签被创建，则标题将会作为标签。</p>

<p>在一个表中可以通过一个单一的空行来创建多重标签。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/14/regex-learning/"/>
    <updated>2012-05-14T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/14/regex-learning</id>
    <content type="html"><![CDATA[<h1>不同程序中的regex的使用</h1>

<h3>grep</h3>

<table>
<thead>
<tr>
<th></th>
<th align="center">表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">-E</td>
<td align="center">扩展正则表达式  </td>
</tr>
<tr>
<td></td>
<td align="center">-G</td>
<td align="center">基本正则表达式  </td>
</tr>
<tr>
<td></td>
<td align="center">-P</td>
<td align="center">perl基本表达式  </td>
</tr>
<tr>
<td></td>
<td align="center">-o</td>
<td align="center">仅仅输出匹配结果  </td>
</tr>
<tr>
<td></td>
<td align="center">-v</td>
<td align="center">进行求非操作  </td>
</tr>
<tr>
<td></td>
<td align="center">-c</td>
<td align="center">计算匹配的总数  </td>
</tr>
</tbody>
</table>


<h3>perl</h3>

<table>
<thead>
<tr>
<th></th>
<th align="center">表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">m/pattern/</td>
<td align="center">搜索  </td>
</tr>
<tr>
<td></td>
<td align="center">s/pattern/pattern/</td>
<td align="center">替换  </td>
</tr>
<tr>
<td></td>
<td align="center">qr/pattern/</td>
<td align="center">返回一个regex对象供以后使用  </td>
</tr>
<tr>
<td></td>
<td align="center">split()</td>
<td align="center">把一个字符串拆分成子字符串  </td>
</tr>
<tr>
<td></td>
<td align="center">\i</td>
<td align="center">不区分大小写  </td>
</tr>
<tr>
<td></td>
<td align="center">\g</td>
<td align="center">全局搜索  </td>
</tr>
<tr>
<td></td>
<td align="center">$&#8217;</td>
<td align="center">匹配前面的所有东西  </td>
</tr>
<tr>
<td></td>
<td align="center">$`</td>
<td align="center">匹配之后的所有东西  </td>
</tr>
<tr>
<td></td>
<td align="center">$&amp;</td>
<td align="center">整个匹配的字符串  </td>
</tr>
</tbody>
</table>


<h2>匹配纯字符串</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\</td>
<td align="center">用来对字符进行转义  </td>
</tr>
<tr>
<td></td>
<td align="center">.</td>
<td align="center">可以用来表示任何字符  </td>
</tr>
</tbody>
</table>


<h2>匹配一组字符</h2>

<p><code>[]</code>用来表示字符集合，出现在它们之间的字符可以使用。字符区间的关系。<br/>
字符区间可以在<code>[]</code>中使用-来实现。<br/>
注意：<br/>
<code>-</code>只有在[]中使用时才有特殊的含义，在其他环境中使用时，不需要使用\进行转义。<br/>
在字符区间中取非使用<code>^</code>元字符。<br/>
注意：<br/>
<code>^</code>的效果作用于给定字符集合里的所哟字符和字符区间，而不仅仅是紧跟在<code>^</code>后的那一个字符或字符区间。</p>

<h2>使用元字符</h2>

<p>对元字符转义需要用到\字符，这个字符对任何元字符都具有转义作用。<br/>
配对的元字符不用作元字符时必须被转义。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">正则表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">[\b]</td>
<td align="center">backtrace  </td>
</tr>
<tr>
<td></td>
<td align="center">\f</td>
<td align="center">换页符  </td>
</tr>
<tr>
<td></td>
<td align="center">\n</td>
<td align="center">换行符  </td>
</tr>
<tr>
<td></td>
<td align="center">\r</td>
<td align="center">回车符  </td>
</tr>
<tr>
<td></td>
<td align="center">\t</td>
<td align="center">制表符(Tab)  </td>
</tr>
<tr>
<td></td>
<td align="center">\v</td>
<td align="center">垂直制表符  </td>
</tr>
</tbody>
</table>


<h2>匹配数字</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">正则表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\d</td>
<td align="center">任何一个数字字符，即[0-9]  </td>
</tr>
<tr>
<td></td>
<td align="center">\D</td>
<td align="center">任何一个非数字字符，即[<code>^</code>0-9]  </td>
</tr>
</tbody>
</table>


<h2>匹配字母和数字（包括_)</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">正则表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\w</td>
<td align="center">[0-9a-zA-Z_]  </td>
</tr>
<tr>
<td></td>
<td align="center">\W</td>
<td align="center">[<code>^</code>0-9a-zA-Z_]  </td>
</tr>
</tbody>
</table>


<h2>匹配空白</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">正则表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\s</td>
<td align="center">[\f\n\t\r\v ]  </td>
</tr>
<tr>
<td></td>
<td align="center">\S</td>
<td align="center">[<code>^</code>\f\n\t\r\v ]  </td>
</tr>
</tbody>
</table>


<p>注意\b，即backtrace没有包含在\s中，因此也就灭有包含在\S中。</p>

<h2>posix字符类</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">正则表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">[:alnum:]</td>
<td align="center">任何一个字母或数字[a-zA-Z0-9]  </td>
</tr>
<tr>
<td></td>
<td align="center">[:alpha:]</td>
<td align="center">任何一个字母[a-zA-Z]  </td>
</tr>
<tr>
<td></td>
<td align="center">[:blank:]</td>
<td align="center">空格或制表符[\t ]  </td>
</tr>
<tr>
<td></td>
<td align="center">[:cntrl:]</td>
<td align="center">ASCII控制字符(ASCII 0~31, 127)  </td>
</tr>
<tr>
<td></td>
<td align="center">[:digit:]</td>
<td align="center">[0-9]  </td>
</tr>
<tr>
<td></td>
<td align="center">[:graph:]</td>
<td align="center">[:print:]不包括空格  </td>
</tr>
<tr>
<td></td>
<td align="center">[:lower:]</td>
<td align="center">[a-z]  </td>
</tr>
<tr>
<td></td>
<td align="center">[:punct:]</td>
<td align="center">既不属于[:alnum:]，也不属于[:cntrl:]的字符  </td>
</tr>
<tr>
<td></td>
<td align="center">[:space:]</td>
<td align="center">[\f\t\n\r\v ]  </td>
</tr>
<tr>
<td></td>
<td align="center">[:upper:]</td>
<td align="center">[A-Z]  </td>
</tr>
<tr>
<td></td>
<td align="center">[:xdigit:]</td>
<td align="center">[a-fA-F0-9]  </td>
</tr>
</tbody>
</table>


<h2>重复匹配</h2>

<ul>
<li>+出现1次及以上，不包括0次。（是一个元字符，需要使用\进行转义）<br/>
在[]中出现的类似+，.这样的元字符可以不被转义，可以正常使用，但是转义了也没有坏处。</li>
<li>*出现0次及以上，包括0次。（是一个元字符，需要使用\进行转义）</li>
<li>?出现0次或者1次。（是一个元字符，需要使用\进行转义）</li>
<li>{} 出现的次数，用来精确匹配。可以是一个确定的数字，也可以是一个区间。<br/>
  如a{6} 出现6次a
  a{3,5} 至少3次a，最多5次a<br/>
  a{3,}  至少出现3次a，上限没有限制
<strong>注意：</strong>
在匹最好使用\/来进行匹配，防止不必要的麻烦。</li>
</ul>


<p>+,*,{n,}都是贪婪型匹配，每次都尽可能的匹配更长的字符。若想使用这些的懒惰型匹配，在这些后面添加一个?即可。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">贪婪型</th>
<th align="center">懒惰型</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">*</td>
<td align="center">*?</td>
</tr>
<tr>
<td></td>
<td align="center">+</td>
<td align="center">+?</td>
</tr>
<tr>
<td></td>
<td align="center">{n,}</td>
<td align="center">{n,}?</td>
</tr>
</tbody>
</table>


<h2>位置匹配</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">正则表达式</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\b</td>
<td align="center">单词边界（用于一个\w与一个\W之间的匹配)|</td>
</tr>
<tr>
<td></td>
<td align="center">\B</td>
<td align="center">非单词边界</td>
</tr>
<tr>
<td></td>
<td align="center">^</td>
<td align="center">字符串开头</td>
</tr>
<tr>
<td></td>
<td align="center">$</td>
<td align="center">字符串结尾</td>
</tr>
</tbody>
</table>


<h1>使用子表达式</h1>

<p><code>()</code>是元字符，使用它们时需要使用转义，用于将一个子表达式合并在一起组成一个完整的部分。<br/>
<code>|</code>或者<code>,</code>是一个元字符，使用的时候需要使用转义。</p>

<h1>回溯引用</h1>

<p>指的是模式的后半部分引用在前半部分中定义的子表达式，可以把回溯表达式想象成变量。
\1 代表前面模式里的第一个表达式。（需要用括号括起来）</p>

<h2>大小写字母转换</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center">正则表达式</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">\E</td>
<td align="left">结束\L或\U转换</td>
</tr>
<tr>
<td></td>
<td align="center">\l</td>
<td align="left">下一个小写</td>
</tr>
<tr>
<td></td>
<td align="center">\L</td>
<td align="left">\L和\E之间的全部小写</td>
</tr>
<tr>
<td></td>
<td align="center">\u</td>
<td align="left">下一个大写</td>
</tr>
<tr>
<td></td>
<td align="center">\U</td>
<td align="left">\U和\E之间的全部大写</td>
</tr>
</tbody>
</table>


<h1>前后查找</h1>

<h2>向前查找</h2>

<p>向前查找模式其实就是一个以<code>?=</code>开头的子表达式，需要匹配的文本跟在=的后面。找到=后面的即可，不消费它，即不把它包括在内。</p>

<p>例子：</p>

<blockquote><p>.+(?=:)</p></blockquote>

<p><strong>提示：</strong><br/>
任何一个子表达式都可以转换为一个向前查找表达式，只要给它加上一个?=前缀即可。</p>

<h2>向后查找</h2>

<blockquote><p><code>?&lt;=</code><br/>
例子：
(?&lt;=\$)</p>

<pre><code>寻找$符号但是不消费它
</code></pre>

<p><strong>警告：</strong>向前查找模式的长度是可变的，它们可以包含<code>.</code>和<code>+</code>之类的元字符，长度很灵活。而向后查找模式只能是固定长度。</p>

<h2>负向前查找</h2>

<p>?!</p>

<h2>负向后查找</h2>

<p>?&lt;!</p></blockquote>

<h1>嵌入式条件</h1>

<p>Regex中的条件用<code>?</code>来定义</p>

<h2>回溯引用中的条件</h2>

<blockquote><p>?(backreferrenc)true-regex)<br/>
?(backreferrenc)true-regex|false-regex)</p>

<h2>前后查找条件</h2></blockquote>
]]></content>
  </entry>
  
</feed>
