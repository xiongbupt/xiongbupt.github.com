<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Markdonw | Keep Learning]]></title>
  <link href="http://xiongbupt.github.com/tags/markdonw/atom.xml" rel="self"/>
  <link href="http://xiongbupt.github.com/"/>
  <updated>2012-06-07T05:58:54+08:00</updated>
  <id>http://xiongbupt.github.com/</id>
  <author>
    <name><![CDATA[Xiongbupt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[markdown基本语法学习]]></title>
    <link href="http://xiongbupt.github.com/blog/2012/05/22/learning-markdown/"/>
    <updated>2012-05-22T00:00:00+08:00</updated>
    <id>http://xiongbupt.github.com/blog/2012/05/22/learning-markdown</id>
    <content type="html"><![CDATA[<h1>markdown基本语法</h1>

<p>摘抄自<em>http://wowubuntu.com/markdown/</em></p>

<h2>宗旨</h2>

<p>Markdown 的目标是实现「易读易写」。</p>

<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>

<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<strong>强调</strong>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>

<h2>兼容 HTML</h2>

<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>

<p>HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>

<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>

<p>要制约的只有一些 HTML 区块元素――比如 <div>、<table>、<pre>、<p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <p> 标签。</p>

<p>在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。</p>

<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code>可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的<code>&lt;a&gt;</code>或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>

<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>

<h2>特殊字符自动转换</h2>

<p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt</code>; 和 <code>&amp;amp</code>;。</p>

<h2>表格创建宗旨</h2>

<ol>
<li>每行至少有一个|字符;</li>
<li>第二行仅仅能够有|,-,:,.或者空格;</li>
<li>每个单元的内容必须仅仅只有一行;</li>
<li>表的第一行并且每行的分隔符必须出现在每行的起始处;</li>
<li>列的分隔必须使用|.</li>
</ol>


<h3>Notes:</h3>

<ol>
<li>在每个单元内部可以使用Markdown的语法；</li>
<li>在每行的起始和末尾的|是可选的（？？？）；</li>
<li>每个单元可以是空的；</li>
<li><p>为了对齐，可以使用冒号来设计左对齐或者右对齐或者是居中对齐。如果没有提供冒号，将会按照默认的方式对齐，大部分是左对齐。如果使用了点字符（.），这个字符对齐符将会被使用。在之后浙江允许列的十进制格式的数按照十进制字符对齐。浏览器目前不支持，可以在XSLT的格式中使用，（Latex）。</p></li>
<li><p>为了表明一个单元合并来多个列，在该单元格后面添加一个额外的|便可以。如果该单元位于行的末尾，那意味着对改行的末尾不是可选的。</p></li>
</ol>


<p>表格的标题是可选的，但是如果需要提供的话，必须位于紧跟在表格之后的那行的开始处，以[开始并且以]结束。如果在表格的开始和结尾都有标题说明，仅仅第一个匹配的将会被使用。</p>

<p>如果有标题，同样也可以有标签，允许创建表格的定位点。如果没有标签被创建，则标题将会作为标签。</p>

<p>在一个表中可以通过一个单一的空行来创建多重标签。</p>
]]></content>
  </entry>
  
</feed>
